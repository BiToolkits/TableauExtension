'-----------------------------------------------------------------------------------
'BiToolkits Copyright Â© 2016 Data Pantheon
'-----------------------------------------------------------------------------------
Option Compare Database
Option Explicit
Public Const gkMstrObjectResultExclusion As String = " not in (0) "
Public Const gkMstrObjectResultFoldersOnly As String = " in (8) "      ' returns folder only
'*mod* v2.1w Dependents check to include Search type (39)
'*mod* v2.1m 3/30/16 allow to get Dependents of Base Formula type (needed for Fact->Base Formula->Metric search)
'--Public Const gkMstrObjectSearchExclusion As String = " not in (6, 7, 11, 14, 21, 22, 23, 24, 25, 26, 27, 28, 39, 42, 43, 52, 53, 56, 61) "
Public Const gkMstrObjectStrictExclusion As String = " not in (6, 11, 14, 21, 22, 23, 24, 25, 26, 27, 28, 42, 43, 52, 53, 56, 61, 8, 18) "
'v2.1r7n Public Const gkMstrObjectSearchExclusion As String = " not in (6, 11, 14, 21, 22, 23, 24, 25, 26, 27, 28, 42, 43, 52, 53, 56, 61) "
Public Const gkMstrObjectSearchExclusion As String = " not in (-1234) "
'Public Const gkMstrObjectDependencyExclusion As String = " not in (8, 13, 15) " '-- 13 fact, 15 table '-- 8 folder
'*mod* v2.1m 3/30/16 allow to get Dependents of Base Formula type (needed for Fact->Base Formula->Metric search)
'--Public Const gkMstrObjectDependencyExclusion As String = " not in (6, 7, 11, 14, 21, 22, 23, 24, 25, 26, 27, 28, 39, 42, 43, 52, 53, 56, 61, 8, 13, 15) " '-- 13 fact, 15 table '-- 8 folder
'--*mod* v2.1o allow to search Fact 13
'--Public Const gkMstrObjectDependencyExclusion As String = " not in (6, 11, 14, 21, 22, 23, 24, 25, 26, 27, 28, 39, 42, 43, 52, 53, 56, 61, 8, 13, 15) "    '-- 13 fact, 15 table '-- 8 folder
Public Const gkMstrObjectDependencyExclusion As String = " not in (6, 11, 14, 21, 22, 23, 24, 25, 26, 27, 28, 42, 43, 52, 53, 56, 61, 8, 15) "    '-- 13 fact, 15 table '-- 8 folder
'-- not used Public Const gkMstrObjectDependencyExclusionMore As String = " and not (c.subtype in (3840) and c.extended_type = 1) " '-- 3840, 1 = logical table
        
'-- Used for Access Right Tree in TreeListSimple
Public Const gksMstrObjectComponentExclusionMin As String = " not in (6, 7, 11, 14, 21, 22, 23, 24, 25, 26, 27, 28, 42, 43, 52, 53, 56, 61, 8, 13, 15) "         '-- 13 fact, 15 table '-- 8 folder, 18 shortcuts
Public Const gsMstrObjectComponentResultExclusionMin As String = " not in (0) "

'-- Used to get high level components in TreeListSimple
Public Const gksMstrObjectComponentExclusionMax As String = " in (1,2,3,4,10,12,18,47,55) "         '-- 13 fact, 15 table '-- 8 folder, 18 shortcuts
Public Const gsMstrObjectComponentResultExclusionMax As String = " in (1,2,3,4,10,12,18,47,55) and d.subtype not in (1025, 1026, 2816) "

'--*mod* v2.1 Public Const gkMstrObjectComponentExclusionMore As String = " and c.subtype not in (1025, 1026) and not (c.subtype in (3840) and c.extended_type = 1) " '-- 1026 = Metrics Basic Math Function 1025 = Subtotal, 3840, 1 = logical table
Public Const gkMstrObjectComponentExclusionMore As String = " and c.subtype not in (1025, 1026) " '-- 1026 = Metrics Basic Math Function 1025 = Subtotal, 3840, 1 = logical table
Public Const gkOracleRecursionSetting As String = "" '-- not need with Oracle hotfix " alter session set ""_simple_view_merging""=false; "
Public Const gkOracleCycleDetection As String = " cycle object_id set is_cycle to '1' default '0' "
'*mod* v2.1 options to exclude details
Public gsMstrObjectComponentExclusion As String
Public gsMstrObjectComponentResultExclusion As String

'*mod* v2.1r10c Document Type Conversion
Public glDocStaticType As Long
Public glDocStaticStart As Long
Public glDocStaticEnd As Long
Public glDocDynamicType As Long
Public glDocDynamicStart As Long
Public glDocDynamicEnd As Long
Public glDocDossierType As Long
Public glDocDossierStart As Long
Public glDocDossierEnd As Long

'-- Online SQL Formatter
'http://www.dpriver.com/pp/sqlformat.htm
'-- SQL Syntax Checker
'https://www.piliapp.com/mysql-syntax-check/ -- not accurate
'http://sqlfiddle.com/#!9/08903
'-----------------------------------------------------------------------------------------------------------
'Oracle vs MS SQL Diff:
'1.  Create table change to insert INTO
'2.  || change + to concat strings
'3.  Substr change to Substring
'4.  Instr change to CharIndex
'5.  When concat string, must cast type
'6.  CharIndex backward, SUBSTRING(E.FullPath, 1, LEN(E.FullPath) - CHARINDEX('\', REVERSE(E.FullPath)) - 1)
'7.  Use Outer Apply (Lateral Join) to speed up the process (Oracle 12c too)
'8.  Oracle does not allow multiple sqls per transaction.  Must separate multiple create table statements in LastUse
'9.  Oracle SQL cannot end with ';'
'10. Must use ODBC DSN if using pass-through function in VBA
'11. Create table on the fly cannnot contain NULL columns or '' string
'-----------------------------------------------------------------------------------------------------------

Public Sub gComponentExclusionSet(ByVal pvnComponetDetail As gEnumComponentDetailType)
'-- Type: 13 fact, 15 logical table, 53 DBtable, 8 folder, 18 - shortcut
'-- subtype: 1026 = Metrics Basic Math Function 1025 = Subtotal, 2816 = Function
    gnComponentDetail = pvnComponetDetail
    If gnComponentDetail = nComponentDetailMax Then
        '*mod* v2.1 2/20/16 remove 53 gsMstrObjectComponentExclusion = " not in (6, 7, 11, 14, 21, 22, 23, 24, 25, 26, 27, 28, 39, 42, 43, 52, 53, 56, 61, 8, 13) "
        '*mod* v2.1 remove 53 gsMstrObjectComponentExclusion = " not in (6, 7, 11, 14, 21, 22, 23, 24, 25, 26, 27, 28, 39, 42, 43, 52, 53, 56, 61, 8, 13) "
        'gsMstrObjectComponentExclusion = " not in (6, 7, 11, 14, 21, 22, 23, 24, 25, 26, 27, 28, 42, 43, 52, 53, 56, 61, 8, 13, 15) "
        'v2.1r7b -include 7 Base Formula
        gsMstrObjectComponentExclusion = " not in (6, 11, 14, 21, 22, 23, 24, 25, 26, 27, 28, 42, 43, 52, 53, 56, 61, 8, 13, 15) "
        'v2.1r9k components should include logical table (not working as next level, DBTable, would include all attributes in table)
        'gsMstrObjectComponentExclusion = " not in (6, 11, 14, 21, 22, 23, 24, 25, 26, 27, 28, 42, 43, 52, 53, 56, 61, 8, 13) "
        gsMstrObjectComponentResultExclusion = " not in (0) "
    ElseIf gnComponentDetail = nComponentDetailMedium Then
        'gsMstrObjectComponentExclusion = " not in (6, 7, 11, 14, 21, 22, 23, 24, 25, 26, 27, 28, 42, 43, 52, 53, 56, 61, 8, 13, 15) "
        'gsMstrObjectComponentResultExclusion = " not in (6, 7, 11, 14, 21, 22, 23, 24, 25, 26, 27, 28, 39, 42) " & " and d.subtype not in (1025, 1026, 2816) "
        'gsMstrObjectComponentResultExclusion = " not in (6, 7, 21, 23, 24, 25, 28, 42) " & " and d.subtype not in (1025, 1026, 2816) "
        'v2.1r7b -include 7 Base Formula as default resolution
        gsMstrObjectComponentExclusion = " not in (6, 11, 14, 21, 22, 23, 24, 25, 26, 27, 28, 42, 43, 52, 53, 56, 61, 8, 13, 15) "
        'v2.1r9k components should include logical table (not working as next level, DBTable, would include all attributes in table)
        'gsMstrObjectComponentExclusion = " not in (6, 11, 14, 21, 22, 23, 24, 25, 26, 27, 28, 42, 43, 52, 53, 56, 61, 8, 13) "
        gsMstrObjectComponentResultExclusion = " not in (6, 21, 23, 24, 25, 28, 42) " & " and d.subtype not in (1025, 1026, 2816) "
    '--ElseIf gnComponentDetail = nComponentDetailMin Then
    Else
        gsMstrObjectComponentExclusion = " in (1,2,3,4,10,12,18,47,55) "
        gsMstrObjectComponentResultExclusion = gsMstrObjectComponentExclusion & " and d.subtype not in (1025, 1026, 2816) " '& " and d.subtype not in () and d.extended_type not in () "
    End If
End Sub

'---------------------------------
' Start Common Routines
'---------------------------------
Public Function gsSqlTmpTableDrop(ByVal pvsSQLTableName As String) As String
Dim sDBName As String

    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
        If gbDebug Then
            '?gtypSession.sDBConnection
            'Driver=SQL Server Native Client 11.0;Server=DELL8700\SQLEXPRESS;Database=idEM_DB;Trusted_Connection=yes;
            Dim nStartPos As Integer
            Dim nIndex As Integer
            Dim asConnection() As String
            asConnection() = Split(gtypSession.sDBConnection, ";")
            For nIndex = LBound(asConnection) To UBound(asConnection)
                If Left(Trim(asConnection(nIndex)), 8) = "database" Then
                    nStartPos = InStr(asConnection(nIndex), "=")
                    If nStartPos > 0 Then
                        sDBName = Mid(Trim(asConnection(nIndex)), nStartPos + 1)
                    End If
                End If
            Next nIndex
        Else
            sDBName = "tempdb"
        End If
        If sDBName <> "" Then
            gsSqlTmpTableDrop = " IF OBJECT_ID('" & sDBName & ".dbo." & pvsSQLTableName & "', 'U') IS NOT NULL DROP TABLE " & pvsSQLTableName & "; " & vbCrLf
        Else
            gsSqlTmpTableDrop = " DROP TABLE IF EXISTS " & pvsSQLTableName & "; " & vbCrLf
        End If
    ElseIf gtypSQLTmpTable.nDBID = nOracle Then
        gsSqlTmpTableDrop = " begin Execute immediate 'drop table " & pvsSQLTableName & " '; exception when others then null; end; " & vbCrLf
    ElseIf gtypSQLTmpTable.nDBID = nMySql Or gtypSQLTmpTable.nDBID = nPostgreSQL Then
        gsSqlTmpTableDrop = " DROP TABLE IF EXISTS " & pvsSQLTableName & "; " & vbCrLf
    End If
End Function

Public Function gsSqlTmpTableCreate(ByVal pvsSQLTableName As String) As String
    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
        gsSqlTmpTableCreate = " INTO " & pvsSQLTableName & " "
    ElseIf gtypSQLTmpTable.nDBID = nOracle Then
        gsSqlTmpTableCreate = " CREATE TABLE " & pvsSQLTableName & " nologging as "
    ElseIf gtypSQLTmpTable.nDBID = nMySql Or gtypSQLTmpTable.nDBID = nPostgreSQL Then
        '-- MySQL does not have global temporarily table, thus keyword TEMPORARY does not work across sessions
        gsSqlTmpTableCreate = " CREATE TABLE  " & pvsSQLTableName & " as "
    End If
End Function

Public Function gsSqlTmpTableCreation(ByVal pvsSQLTableName As String, ByVal pvsSqlSelect As String, ByVal pvsSqlFrom As String, Optional ByVal pvsSqlHint As String) As String
    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
        gsSqlTmpTableCreation = pvsSqlSelect & " INTO " & pvsSQLTableName & " " & pvsSqlFrom & ";"
    ElseIf gtypSQLTmpTable.nDBID = nOracle Then
        gsSqlTmpTableCreation = " CREATE TABLE " & pvsSQLTableName & " nologging as " & pvsSqlSelect & " " & pvsSqlFrom & ";"
    ElseIf gtypSQLTmpTable.nDBID = nMySql Or gtypSQLTmpTable.nDBID = nPostgreSQL Then
        gsSqlTmpTableCreation = " CREATE TABLE " & pvsSQLTableName & " as " & pvsSqlSelect & " " & pvsSqlFrom & ";"
    End If
End Function

Public Function gsSqlTmpTableCreationRecursion(ByVal pvsSQLTableName As String, ByVal pvsSqlSelect As String, ByVal pvsSqlFrom As String, ByVal pvsSqlTree As String, ByVal pvsSqlHint As String) As String
    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
        gsSqlTmpTableCreationRecursion = pvsSqlTree & pvsSqlSelect & " INTO " & pvsSQLTableName & " " & pvsSqlFrom & ";"
    ElseIf gtypSQLTmpTable.nDBID = nOracle Then
        gsSqlTmpTableCreationRecursion = pvsSqlHint & " CREATE TABLE " & pvsSQLTableName & " nologging as " & pvsSqlTree & pvsSqlSelect & pvsSqlFrom & ";"
    ElseIf gtypSQLTmpTable.nDBID = nMySql Or gtypSQLTmpTable.nDBID = nPostgreSQL Then
        gsSqlTmpTableCreationRecursion = " CREATE TABLE " & pvsSQLTableName & " as " & pvsSqlTree & pvsSqlSelect & pvsSqlFrom & ";"
    End If
End Function

Public Function gsSQLDateConvert(ByVal pvsDate As String) As String
    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
        gsSQLDateConvert = "'" & pvsDate & "'" '-- CAST('" & pvsLastUseDate & " 23:59:59' AS DATETIME) "
    ElseIf gtypSQLTmpTable.nDBID = nOracle Or gtypSQLTmpTable.nDBID = nPostgreSQL Then
        gsSQLDateConvert = "to_date('" & pvsDate & "', 'mm/dd/yyyy')"
    ElseIf gtypSQLTmpTable.nDBID = nMySql Then
        gsSQLDateConvert = "str_to_date('" & pvsDate & "', '%m/%d/%Y')"
    End If
End Function

Public Function gsSQLDateHighConvert(ByVal pvsDate As String) As String
    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
        gsSQLDateHighConvert = "'" & pvsDate & " 23:59:59'" '-- CAST('" & pvsLastUseDate & " 23:59:59' AS DATETIME) "
    ElseIf gtypSQLTmpTable.nDBID = nOracle Then
        gsSQLDateHighConvert = "to_date('" & pvsDate & " 23:59:59', 'mm/dd/yyyy hh24:mi:ss')"
    ElseIf gtypSQLTmpTable.nDBID = nMySql Or gtypSQLTmpTable.nDBID = nPostgreSQL Then
        gsSQLDateHighConvert = "str_to_date('" & pvsDate & " 23:59:59', '%m/%d/%Y %T')"
    End If
End Function

Public Function gsSQLIntToTextLeadingSpaceConvert(ByVal pvsNum As String, ByVal pvnLength As Integer) As String
'-- Length size must be < 11
'-- Note: ODBC call to Oracle sql insert into Access table strips leading spaces.  SQLServer retains leading spaces
    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
        gsSQLIntToTextLeadingSpaceConvert = "RIGHT('          ' + CAST(" & pvsNum & " AS NVarchar(" & pvnLength & ")), " & pvnLength & ")"
    ElseIf gtypSQLTmpTable.nDBID = nOracle Then
        gsSQLIntToTextLeadingSpaceConvert = "Substr('" & Left("          ", pvnLength) & "' || TO_CHAR(" & pvsNum & "), -" & pvnLength & ")"
    ElseIf gtypSQLTmpTable.nDBID = nMySql Or gtypSQLTmpTable.nDBID = nPostgreSQL Then
        gsSQLIntToTextLeadingSpaceConvert = "RIGHT(Concat('          ', CAST(" & pvsNum & " AS char(" & pvnLength & "))), " & pvnLength & ")"
        'nMySQL char_length
    End If
End Function

Public Function gsSQLIntToTextLeading0Convert(ByVal pvsNum As String, ByVal pvnLength As Integer) As String
'-- Length size must be < 11
    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
        gsSQLIntToTextLeading0Convert = "RIGHT('0000000000' + CAST(" & pvsNum & " AS NVarchar(" & pvnLength & ")), " & pvnLength & ")"
    ElseIf gtypSQLTmpTable.nDBID = nOracle Then
        gsSQLIntToTextLeading0Convert = "TO_CHAR(" & pvsNum & ", '" & Left("0000000000", pvnLength) & "')"
    ElseIf gtypSQLTmpTable.nDBID = nMySql Or gtypSQLTmpTable.nDBID = nPostgreSQL Then
        gsSQLIntToTextLeading0Convert = "RIGHT(Concat('0000000000', CAST(" & pvsNum & " AS char(" & pvnLength & "))), " & pvnLength & ")"
    End If
End Function

Public Function gsSqlSubString() As String
    If gtypSQLTmpTable.nDBID = nOracle Then
        gsSqlSubString = "Substr"
    Else
        gsSqlSubString = "Substring"
    End If
End Function

Public Function gsSqlLength() As String
    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
        gsSqlLength = "Len"
    Else
        gsSqlLength = "Length"
    End If
End Function

Public Function gsSqlConcatObjId(ByVal pvsTarget As String, ByVal pvsFieldName As String) As String
Dim sSql As String

    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
        sSql = pvsTarget & " + '|' + cast(" & pvsFieldName & " as Char(36))"
    ElseIf gtypSQLTmpTable.nDBID = nOracle Or gtypSQLTmpTable.nDBID = nPostgreSQL Then
        '-- *mod* 'v2.1r12c
        sSql = pvsTarget & " || '|' || " & pvsFieldName
    ElseIf gtypSQLTmpTable.nDBID = nMySql Then
        sSql = "Concat(" & pvsTarget & " , '|' , cast(" & pvsFieldName & " as Char(32)))"
    End If
    gsSqlConcatObjId = sSql
End Function

Public Function gsSqlRecursiveLoopInit(ByVal pvsObjectIDName As String) As String
Dim sSql As String

    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
        'sSqlTree = sSqlTree & " ,Sentinel = CAST(c.object_id AS VarChar(Max)) "
        sSql = " ,Sentinel = CAST(" & pvsObjectIDName & " AS VarChar(Max)) "
    ElseIf gtypSQLTmpTable.nDBID = nOracle Then
        '-- **notwork no need** sSqlTree = sSqlTree & " ,Sentinel = CAST(c.object_id AS NVARCHAR(2000)) "
    ElseIf gtypSQLTmpTable.nDBID = nMySql Then
        sSql = " , CAST(" & pvsObjectIDName & " AS Char(2000)) Sentinel "
    ElseIf gtypSQLTmpTable.nDBID = nPostgreSQL Then
        'sSqlTree = sSqlTree & " ,Sentinel = CAST(c.object_id AS VarChar(2000)) "
        sSql = " , ARRAY[" & pvsObjectIDName & "] "
    End If
    gsSqlRecursiveLoopInit = sSql
End Function

Public Function gsSqlRecursiveLoopTracking(ByVal pvsObjectIDName As String) As String
Dim sSql As String
    
    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
        'sSqlTree = sSqlTree & " ,Sentinel + '|' + cast(a.object_id as Char(36)) "
        sSql = " ,Sentinel + '|' + cast(" & pvsObjectIDName & " as Char(36)) "
    ElseIf gtypSQLTmpTable.nDBID = nOracle Then
        '-- **notwork no need** sSqlTree = sSqlTree & " ,Sentinel || '|' || cast(a.object_id as Char(36)) "
    ElseIf gtypSQLTmpTable.nDBID = nMySql Then
        'sSqlTree = sSqlTree & " ,Concat(Sentinel , '|' , cast(a.object_id as Char(36))) "
        sSql = " ,Concat(Sentinel , '|' , cast(" & pvsObjectIDName & " as Char(32))) "
    ElseIf gtypSQLTmpTable.nDBID = nPostgreSQL Then
        sSql = " , (Sentinel || " & pvsObjectIDName & ")::char(32)[] "
    End If
    gsSqlRecursiveLoopTracking = sSql
End Function

Public Function gsSqlRecursiveLoopDetection(ByVal pvsObjectIDName As String, ByVal pvsTreeLeveName As String) As String
Dim sSql As String
    
    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
        'sSqlTree = sSqlTree & " and CHARINDEX(cast(a.object_id as Char(36)), Sentinel)=0 "
        'sSqlTree = sSqlTree & " and p.treelevel < 20 ) "    '*mod* v2.1r10c safe guard
        sSql = " and CHARINDEX(cast(" & pvsObjectIDName & " as Char(36)), Sentinel)=0 " & IIf(pvsTreeLeveName <> "", "and " & pvsTreeLeveName & " < 20", "") & ") "   '*mod* v2.1r10c safe guard
    ElseIf gtypSQLTmpTable.nDBID = nOracle Then
        '-- **notwork no need** sSqlTree = sSqlTree & " and instr(Sentinel, cast(a.object_id as Char(36)))=0 ) "
        'sSqlTree = sSqlTree & ")" & gkOracleCycleDetection
        sSql = ")" & gkOracleCycleDetection
    ElseIf gtypSQLTmpTable.nDBID = nMySql Then
        'sSqlTree = sSqlTree & " and LOCATE(cast(a.object_id as Char(36)), Sentinel)=0) "
        sSql = " and LOCATE(cast(" & pvsObjectIDName & " as Char(32)), Sentinel)=0 " & IIf(pvsTreeLeveName <> "", "and " & pvsTreeLeveName & " < 20", "") & ") "   '*mod* v2.1r10d safe guard
    ElseIf gtypSQLTmpTable.nDBID = nPostgreSQL Then
        '*mod* v2.1r13b 2 bugs in Postgres. 1. must use array for loop detection, 2. "!= ANY(Sentinel)" does not work
        sSql = " and not (" & pvsObjectIDName & " = ANY(Sentinel)) " & IIf(pvsTreeLeveName <> "", "and " & pvsTreeLeveName & " < 20", "") & ") "   '*mod* v2.1r10d safe guard
    End If
    gsSqlRecursiveLoopDetection = sSql
End Function

Public Function gsSqlCastChar(ByVal pvsObjectIDName As String, ByVal pvnLength As Integer) As String
Dim sSql As String
    
    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
        sSql = " cast(" & pvsObjectIDName & "  as nvarchar(" & pvnLength & ")) "
    ElseIf gtypSQLTmpTable.nDBID = nOracle Then
        sSql = " to_char(" & pvsObjectIDName & ") "
    ElseIf gtypSQLTmpTable.nDBID = nMySql Or gtypSQLTmpTable.nDBID = nPostgreSQL Then
        sSql = " cast(" & pvsObjectIDName & " as char(" & pvnLength & ")) "
    End If
    gsSqlCastChar = sSql
End Function

Public Function gsSqlLiteralString(ByVal pvsText As String, ByVal pvnLength As Integer) As String
Dim sSql As String
    
    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
        sSql = " cast('" & pvsText & "'  as nvarchar(" & pvnLength & ")) "
    ElseIf gtypSQLTmpTable.nDBID = nOracle Then
        sSql = "'" & pvsText & "' "
    ElseIf gtypSQLTmpTable.nDBID = nMySql Or gtypSQLTmpTable.nDBID = nPostgreSQL Then
        sSql = "'" & pvsText & "' "
    End If
    gsSqlLiteralString = sSql
End Function

Public Function gsSqlInStr(ByVal pvsSearchForLiteral As String, ByVal pvsSearchOnColName As String, Optional ByVal pvnStartPos As Integer, Optional ByVal pvnAppearance As Integer) As String
Dim sSql As String

    If Nz(pvnAppearance) = 0 Then
        pvnAppearance = 1
    End If
    
    If Nz(pvnStartPos) = 0 Then
        pvnStartPos = 1
    End If

    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
        sSql = "Charindex('" & pvsSearchForLiteral & "', " & pvsSearchOnColName & ", " & CStr(pvnStartPos) & ") "
    ElseIf gtypSQLTmpTable.nDBID = nOracle Then
        sSql = "Instr(" & pvsSearchOnColName & ", '" & pvsSearchForLiteral & "', " & CStr(pvnStartPos) & ", " & CStr(pvnAppearance) & ") "
    ElseIf gtypSQLTmpTable.nDBID = nMySql Then
        sSql = "Locate('" & pvsSearchForLiteral & "', " & pvsSearchOnColName & ", " & CStr(pvnStartPos) & ") "
    ElseIf gtypSQLTmpTable.nDBID = nPostgreSQL Then
        sSql = "StrPos(" & pvsSearchOnColName & ", '" & pvsSearchForLiteral & "') "
    End If
    gsSqlInStr = sSql
End Function

Public Function gsSQLFolderPathBuild(ByVal pvsFullPath As String, ByVal pvsObjectName As String) As String
Dim sSql As String
    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
        sSql = " SELECT " & _
                " cast (CASE WHEN Substring(" & pvsFullPath & ", 1, 1) = '\' THEN " & pvsObjectName & " + " & pvsFullPath & " " & _
                " ELSE " & pvsObjectName & " + '\' + " & pvsFullPath & " " & _
                " END as nvarchar(250)) AS FullPath, "
    ElseIf gtypSQLTmpTable.nDBID = nOracle Then
        sSql = " SELECT " & _
                " CASE WHEN substr(" & pvsFullPath & ", 1, 1) = '\' THEN Concat(" & pvsObjectName & " , " & pvsFullPath & ") " & _
                " ELSE Concat(Concat(" & pvsObjectName & " , '\'), " & pvsFullPath & ") " & _
                " END AS FullPath, "
    ElseIf gtypSQLTmpTable.nDBID = nMySql Then
        sSql = " SELECT " & _
                " CASE WHEN substring(" & pvsFullPath & ", 1, 1) = '\' THEN Concat(" & pvsObjectName & " , " & pvsFullPath & ") " & _
                " ELSE Concat(Concat(" & pvsObjectName & " , '\'), " & pvsFullPath & ") " & _
                " END AS FullPath, "
    ElseIf gtypSQLTmpTable.nDBID = nPostgreSQL Then
        sSql = " SELECT " & _
                " cast (CASE WHEN Substring(" & pvsFullPath & ", 1, 1) = '\' THEN Concat(" & pvsObjectName & " , " & pvsFullPath & ") " & _
                " ELSE Concat(Concat(" & pvsObjectName & " , '\'), " & pvsFullPath & ") " & _
                " END as varchar(250)) AS FullPath, "
    End If
    gsSQLFolderPathBuild = sSql
End Function

Public Function gsSQLFolderPathTrim(ByVal pvsFullPath As String) As String
Dim sSql As String
    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
        sSql = ", SUBSTRING(" & pvsFullPath & ", 1, LEN(" & pvsFullPath & ") - CHARINDEX('\', REVERSE(" & pvsFullPath & "))) as Folder_Path "
    ElseIf gtypSQLTmpTable.nDBID = nOracle Then
        sSql = ", substr(" & pvsFullPath & ", 1, Instr(" & pvsFullPath & ", '\', -1)-1) Folder_Path "
    ElseIf gtypSQLTmpTable.nDBID = nMySql Then
        sSql = ", SUBSTRING(" & pvsFullPath & ", 1, CHAR_LENGTH(" & pvsFullPath & ") - LOCATE('\', REVERSE(" & pvsFullPath & "))) as Folder_Path "
    ElseIf gtypSQLTmpTable.nDBID = nPostgreSQL Then
        sSql = ", SUBSTRING(" & pvsFullPath & ", 1, CHAR_LENGTH(" & pvsFullPath & ") - POSITION('\' IN REVERSE(" & pvsFullPath & "))) as Folder_Path "
    End If
    gsSQLFolderPathTrim = sSql
End Function

'---------------------------------
' End Common Routines
'---------------------------------

Public Function gsSQLProjectListGet(ByVal pvsUserLoginCode As String, ByVal pvsMDPrefix As String, ByVal pvsEnvDBID As String) As String
'*mod* v2.1r7t - make sure to convert GUID Object IDs for Sql Server
'DSSMDLNKITEM - links users/group to objects, such as User to Projects
'-- 32 - user Project suchas 'Enterprise Manager'
'-- 36 - system Project suc as 'CASTOR_SERVER_CONFIGURATION'
'-- 34 - User
'-- 44 - User Group
'-- 58 - Security Filter
Dim sSql As String

    gsProcName = "Get Project List"
    
'If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
    sSql = "select distinct " & pvsEnvDBID & " DB_Environment_ID, y.OBJECT_NAME Project_Name, " & gsPurifyGUIDsqlFromSQL("y.Project_ID") & " Project_ID " & _
            "       , " & gsPurifyGUIDsqlFromSQL("y.object_id") & " Root_Folder_ID " & _
            "from " & pvsMDPrefix & "dssmdobjinfo y " & _
            "        where y.Parent_ID = " & gsSql0GUID() & " " & _
            "        and y.object_type = 8 " & _
            "        and y.object_uname <> 'MANAGED OBJECTS' " & _
            "        and y.object_uname <> 'CASTOR_SERVER_CONFIGURATION' "

'*mod* v2.1r7r SQLserver recives: Msg 8169, Level 16, State 2, Line 1 Conversion failed when converting from a character string to uniqueidentifier
'Else
'    '-- Note: must include data in project 'CASTOR_SERVER_CONFIGURATION' 38A062302D4411D28E71006008960167
'    sSql = gsSQLUserGroupsGet(pvsUserLoginCode, pvsMDPrefix)
'    sSql = sSql & ", xProjects (OBJECT_ID, OBJECT_NAME, object_type) as ( " & _
'            "    SELECT distinct a.OBJECT_ID, b.OBJECT_NAME, a.object_type " & _
'            "    FROM " & pvsMDPrefix & "dssmdlnkitem a " & _
'            "        join " & pvsMDPrefix & "dssmdobjinfo b " & _
'            "        on a.object_id = b.object_id " & _
'            "    where   a.LINKITEM_ID in ( " & _
'            "            SELECT distinct g.LINKITEM_ID " & _
'            "            FROM " & pvsMDPrefix & "dssmdlnkitem g " & _
'            "           join Tree_List b " & _
'            "           on (g.object_id = b.depn_objid or g.object_id = b.original_id) " & _
'            "           where g.object_type in (34) " & _
'            "    ) " & _
'            "    and a.object_type in (32, 44) " & _
'            ")"
'    sSql = sSql & _
'            "select distinct " & pvsEnvDBID & " DB_Environment_ID, x.OBJECT_NAME Project_Name, x.OBJECT_ID Project_ID " & _
'            "       , y.object_id Root_Folder_ID " & _
'            "from xProjects x " & _
'            "        join " & pvsMDPrefix & "dssmdobjinfo y " & _
'            "        on x.object_id = y.project_id " & _
'            "        and y.Parent_ID = " & gsSql0GUID() & " " & _
'            "        and y.object_type = 8 " & _
'            "        and y.object_uname <> 'MANAGED OBJECTS' " & _
'            "where x.object_type = 32 " & _
'            "    and exists(select * from xProjects where object_type = 44) "
'End If

    gsSQLProjectListGet = sSql
End Function

Public Function gsSQLUserGroupsGet(ByVal pvsUserLoginCode As String, ByVal pvsMDPrefix As String) As String
'----------------------------------------------------------------------------------------------------------
' Get Recursive User Groups that a given User belong
' User Groups are used to find out what Projects the user has access to.
'----------------------------------------------------------------------------------------------------------
Dim sSqlTree As String

    gsProcName = "Get User/Group List"
    sSqlTree = "WithR Tree_List( " & _
        "            original_id, object_id, depn_objid, object_type, project_id "
    
    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
        sSqlTree = sSqlTree & " ,Sentinel "
    ElseIf gtypSQLTmpTable.nDBID = nOracle Then
        '-- **notwork no need** sSqlTree = sSqlTree & " ,Sentinel " "
    ElseIf gtypSQLTmpTable.nDBID = nMySql Or gtypSQLTmpTable.nDBID = nPostgreSQL Then
        sSqlTree = sSqlTree & " ,Sentinel "
    End If
    
    sSqlTree = sSqlTree & ") AS " & _
        "( " & _
        "    SELECT " & _
        "        a.object_id Original_id " & _
        "        ,a.object_id " & _
        "        ,a.depn_objid " & _
        "        ,a.object_type " & _
        "        ,a.project_id "
        
    '-- Recursive Loop Init
    sSqlTree = sSqlTree & gsSqlRecursiveLoopInit("d.object_id")

    sSqlTree = sSqlTree & " FROM " & _
        "         " & pvsMDPrefix & "dssmdobjdepn a " & _
        "         join " & pvsMDPrefix & "dssmdobjinfo d " & _
        "         ON a.object_id = d.object_id " & _
        "        where  UPPER(d.abbreviation) = '" & UCase(pvsUserLoginCode) & "' and d.object_type = 34 " & _
        "    UNION ALL "
        '-- ^^^ Anchor --> d.Login <> '' AND <-- not work in Oracle
        '-- recursion
    sSqlTree = sSqlTree & _
        "    SELECT " & _
        "        p.Original_id " & _
        "        ,a.object_id " & _
        "        ,a.depn_objid " & _
        "        ,a.object_type " & _
        "        ,a.project_id "
        
    '-- Recursive Loop tracking
    sSqlTree = sSqlTree & gsSqlRecursiveLoopTracking("a.object_id")
        
    sSqlTree = sSqlTree & _
        "    FROM " & _
        "        Tree_List p " & _
        "        JOIN " & pvsMDPrefix & "dssmdobjdepn a " & _
        "            ON p.project_id = a.project_id "
    
        sSqlTree = sSqlTree & _
        "  and p.depn_objid = a.object_id " & _
        "  and a.object_type =34 "         '-- Down Level -> Component List

       sSqlTree = sSqlTree & " WHERE a.object_type =34"     '-- User Groups
   
    '-- Recursive Loop tracking
    sSqlTree = sSqlTree & gsSqlRecursiveLoopDetection("a.object_id", "")
    
    gsSQLUserGroupsGet = sSqlTree
End Function

Public Function gsSQLUserGet(ByVal pvsUserSql As String, ByVal pvsOrderBy As String) As String
'--Public Function gsSQLUserGet(ByVal pvsTargetTableName As String, ByVal pvsUserSql As String) As String
'----------------------------------------------------------------------------------------------------------
' Get user (and Groups) list from a search criteria
' Used in Object Finder User Search
'----------------------------------------------------------------------------------------------------------
Dim sSqlSelect As String
Dim sSqlFrom As String

    'on b.contact_id = a.object_id  ==> returns users/groups only
    'on b.mstruser_id = a.object_id ==> returns all contacts, including DRL, Contact, Contact Group, etc.
    
    'Status --> 1=Enabled, 0=Disabled
    'Conatct_Type --> 4=user, 32=DRL
    'a.object_type = 34 And a.SUBTYPE = 8704 --> User
    'a.object_type = 34 And a.SUBTYPE = 8705 --> group
    '
'--select * from dbo.DSSMDOBJINFO a where a.object_type = 34 And SUBTYPE = 8704
    '*mod* v2.1n 4/2/16 use left join in case no Contact was not setup for user
    '*mod* v2.1r7t - make sure to convert GUID Object IDs for Sql Server
    sSqlSelect = "select distinct lower(a.abbreviation) Login, a.object_name as Name, a.Description, b.Status, c.address Email, case when a.SUBTYPE = 8705 then 1 else 0 end Group_Flag, a.Mod_time, a.Create_time "
    sSqlFrom = " FROM " & gtypSession.sDBPrefixMD & "DSSMDOBJINFO a " & _
                    " left join " & gtypSession.sDBPrefixMD & "dsscscontact b " & _
                    "   on " & gsPurifyGUIDsqlFromSQL("a.object_id") & " = b.contact_id " & _
                    " left join " & gtypSession.sDBPrefixMD & "dsscsAddress c " & _
                    "   on b.contact_id = c.contact_id " & _
                    "  And c.delivery_type = 1 And c.is_default <> 0 " & _
                    " where a.object_type = 34 " & _
                    pvsUserSql & _
                    pvsOrderBy
'*mod* v2.1r10g ==> prior: and (b.status IS NULL Or b.status = 1)
'    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
'        sSqlFinal = sSqlSelect & gsSqlTmpTableCreate(pvsTargetTableName) & sSqlFrom & ";"
'    ElseIf gtypSQLTmpTable.nDBID = nOracle Then
'        sSqlFinal = gsSqlTmpTableCreate(pvsTargetTableName) & sSqlSelect & sSqlFrom & ";"
'    End If
    
    gsSQLUserGet = sSqlSelect & sSqlFrom
End Function

Public Function gsSQLUserContactSearch(ByVal pvsUserSql As String, ByVal pvsOrderBy As String) As String
'----------------------------------------------------------------------------------------------------------
' Get user (no Group) list from a search criteria
' Used in Object Finder User Search
'----------------------------------------------------------------------------------------------------------
Dim sSqlSelect As String
Dim sSqlFrom As String

    'on b.contact_id = a.object_id  ==> returns users/groups only
    'on b.mstruser_id = a.object_id ==> returns all contacts, including DRL, Contact, Contact Group, etc.
    
    'Status --> 1=Enabled, 0=Disabled
    'Conatct_Type --> 4=user, 32=DRL
    'a.object_type = 34 And a.SUBTYPE = 8704 --> User
    'a.object_type = 34 And a.SUBTYPE = 8705 --> group
    '
'--select * from dbo.DSSMDOBJINFO a where a.object_type = 34 And SUBTYPE = 8704
    '*mod* v2.1n 4/2/16 use left join in case no Contact was not setup for user
    '*mod* v2.1r7t - make sure to convert GUID Object IDs for Sql Server
    'sSqlSelect = "select distinct lower(a.abbreviation) Login, a.object_name Name, a.Description, b.Status, c.address Email, case when a.SUBTYPE = 8705 then 1 else 0 end Group_Flag, a.Mod_time, a.Create_time "
    sSqlSelect = "select distinct lower(a.abbreviation) Login, a.object_name as Name, a.Description, b.Status, case when a.SUBTYPE = 8705 or b.contact_type = 2 then 1 else 0 end Group_Flag, b.login contact_name, b.contact_type, c.disp_name Address_Name, c.Delivery_Type, c.IS_Default, c.Address, c.MODIFICATION_TIME mod_time "
    '--"   on " & gsPurifyGUIDsqlFromSQL("a.object_id") & " = b.contact_id " 'v2.1r11q
    sSqlFrom = " FROM " & gtypSession.sDBPrefixMD & "DSSMDOBJINFO a " & _
                    " left join " & gtypSession.sDBPrefixMD & "dsscscontact b " & _
                    "   on " & gsPurifyGUIDsqlFromSQL("a.object_id") & " = b.mstruser_id " & _
                    " left join " & gtypSession.sDBPrefixMD & "dsscsAddress c " & _
                    "   on b.contact_id = c.contact_id " & _
                    " where a.object_type = 34 " & _
                    pvsUserSql & _
                    pvsOrderBy
'*mod* v2.1r10g ==> prior: and (b.status IS NULL Or b.status = 1)
'    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
'        sSqlFinal = sSqlSelect & gsSqlTmpTableCreate(pvsTargetTableName) & sSqlFrom & ";"
'    ElseIf gtypSQLTmpTable.nDBID = nOracle Then
'        sSqlFinal = gsSqlTmpTableCreate(pvsTargetTableName) & sSqlSelect & sSqlFrom & ";"
'    End If
    
    gsSQLUserContactSearch = sSqlSelect & sSqlFrom
End Function

Public Function gsSQLUserContactsGet(ByVal pvsWhereSql As String, ByVal pvnContactType As Integer) As String
'----------------------------------------------------------------------------------------------------------
' Get Addresses/Contacts from a search criteria
' A user can have multiple addresses but the default address come first
' Used in Web Subscription Cloning
'----------------------------------------------------------------------------------------------------------
'Contact_Type:
'1 ==> Contact
'2 ==> Contact Group
'4 ==> User
'8 ==> User Group
'32 ==> DRL  "DRL IW W Territory East West ISM"
'16777216 ==> Burst "Recipient From Content"
Dim sSqlSelect As String
Dim sSqlFrom As String

    'on c.contact_id = a.object_id  ==> returns users/groups only
    'on c.mstruser_id = a.object_id ==> returns all contacts, including DRL, Contact, Contact Group, etc.
    
    'Status --> 1=Enabled, 0=Disabled
    'Conatct_Type --> 4=user, 32=DRL
    'a.object_type = 34 And a.SUBTYPE = 8704 --> User
    'a.object_type = 34 And a.SUBTYPE = 8705 --> group
    '
'--select * from dbo.DSSMDOBJINFO a where a.object_type = 34 And SUBTYPE = 8704
    '*mod* v2.1n 4/2/16 use left join in case no Contact was not setup for user
    '*mod* v2.1r7t - make sure to convert GUID Object IDs for Sql Server
    sSqlSelect = "select distinct lower(a.abbreviation) Login, a.subtype, a.object_name, c.login contact_name, c.status contact_status, c.contact_type, b.disp_name Address_Name, b.Delivery_Type, b.IS_Default, b.Address "
    sSqlFrom = " FROM " & gtypSession.sDBPrefixMD & "DSSMDOBJINFO a " & _
                    " left join " & gtypSession.sDBPrefixMD & "dsscscontact c " & _
                    "   on " & gsPurifyGUIDsqlFromSQL("a.object_id") & " = c.mstruser_id " & _
                    " left join " & gtypSession.sDBPrefixMD & "dsscsaddress b "
    If pvnContactType = 1 Or pvnContactType = 2 Then
        sSqlFrom = sSqlFrom & "   on c.contact_id = b.contact_id "
    Else
        sSqlFrom = sSqlFrom & "   on c.mstruser_id = b.contact_id "
    End If
    
    sSqlFrom = sSqlFrom & _
                    " where a.object_type = 34 " & _
                    pvsWhereSql & _
                    " order by lower(a.abbreviation), b.IS_Default"
                                                     '^^ *mod* v2.1r7i make sure the default address come first
'    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
'        sSqlFinal = sSqlSelect & gsSqlTmpTableCreate(pvsTargetTableName) & sSqlFrom & ";"
'    ElseIf gtypSQLTmpTable.nDBID = nOracle Then
'        sSqlFinal = gsSqlTmpTableCreate(pvsTargetTableName) & sSqlSelect & sSqlFrom & ";"
'    End If
    
    gsSQLUserContactsGet = sSqlSelect & sSqlFrom & ";"
End Function

Public Function gsSQLMstrAccountTypeGet(ByVal pvsMstrAccountCode As String) As String
'----------------------------------------------------------------------------------------------------------
' Get account type from a user or group
'----------------------------------------------------------------------------------------------------------
Dim sSqlSelect As String

    sSqlSelect = "select case when object_type = 34 And subtype = 8704 then 0 when object_type = 34 And subtype = 8705 then 1 else - 1 end group_flag "
    sSqlSelect = sSqlSelect & " from " & gtypSession.sDBPrefixMD & "dssmdobjinfo where object_type = 34 and ((subtype = 8704 and UPPER(abbreviation) = ('" & UCase(pvsMstrAccountCode) & "')) or (subtype = 8705 and UPPER(object_name) = ('" & UCase(pvsMstrAccountCode) & "'))) "
    
    gsSQLMstrAccountTypeGet = sSqlSelect
End Function

Public Function gsSQLMstrSchduleGet() As String
Dim sSqlSelect As String

    sSqlSelect = "select object_name "
    sSqlSelect = sSqlSelect & " from " & gtypSession.sDBPrefixMD & "dssmdobjinfo where object_type = 51 and hidden = 0 "
    
    gsSQLMstrSchduleGet = sSqlSelect
End Function

Public Function gsSqlTmpTableTestGet(ByVal pvsTable As String, ByVal pvsMDPrefix As String) As String
Dim sSqlSelect As String
Dim sSqlFrom As String

    sSqlSelect = "select object_id "
    sSqlFrom = " from " & pvsMDPrefix & "dssmdusracct where login in ('ADMINISTRATOR')"
    gsSqlTmpTableTestGet = gsSqlTmpTableCreation(pvsTable, sSqlSelect, sSqlFrom)
End Function

Public Function gsSQLFolderListGet() As String
'*mod* v2.1r7t - make sure to convert GUID Object IDs for Sql Server
Dim sSql

    gsProcName = "Get Folder List"
    'sSql = "select a.project_id, a.object_name as project_name "
    'sSql = sSql & ",b.object_id as project_root_folder_id"
    sSql = "select " & gtypSession.lEnvProjectID & " as EnvProject_ID, " & gsPurifyGUIDsqlFromSQL("a.object_id") & " object_id, " & gsPurifyGUIDsqlFromSQL("a.Parent_ID") & " parent_id, a.object_name " & _
            "from " & gtypSession.sDBPrefixMD & "dssmdobjinfo a " & _
            "where a.object_type = 8 " & _
            "and a.project_id = '" & gtypSession.sMstrProjectID & "';"
    gsSQLFolderListGet = sSql
End Function

Public Function gsSQLShortCutTypeGet(ByVal pvsShortcutID As String) As String
    gsSQLShortCutTypeGet = "select a2.object_type, a2.subtype, a2.extended_type " & _
        "FROM " & gtypSession.sDBPrefixMD & "dssmdobjdepn a1 " & _
        " join " & gtypSession.sDBPrefixMD & "dssmdobjinfo a2 " & _
        "    on a1.DEPN_OBJID   = a2.object_id and a1.DEPN_PRJID = a2.project_id " & _
        "    where a1.object_id = '" & pvsShortcutID & "' and a1.project_id = '" & gtypSession.sMstrProjectID & "'"

End Function

Public Function gsSQLDocTypeByViewMedia(ByVal pvsTableAlias As String, ByVal pvsLibraryTableAlias As String) As String
'-- Converts View_Media to Extended Type for Document or Library Shortcut
'-- Returns Extended Type
    gsSQLDocTypeByViewMedia = " Case When " & pvsTableAlias & ".object_type = 55 and " & pvsTableAlias & ".view_media >= " & glDocStaticStart & " and " & pvsTableAlias & ".view_media <= " & glDocStaticEnd & " Then " & glDocStaticType & _
                " When " & pvsTableAlias & ".object_type = 55 and " & pvsTableAlias & ".view_media >= " & glDocDynamicStart & " and " & pvsTableAlias & ".view_media <= " & glDocDynamicEnd & " Then " & glDocDynamicType & _
                " When " & pvsTableAlias & ".object_type = 55 and " & pvsTableAlias & ".view_media >= " & glDocDossierStart & " and " & pvsTableAlias & ".view_media <= " & glDocDossierEnd & " Then " & glDocDossierType
    '*mod* v2.1r11a
    If pvsLibraryTableAlias <> "" Then
        gsSQLDocTypeByViewMedia = gsSQLDocTypeByViewMedia & _
                " When " & pvsLibraryTableAlias & ".object_type = 55 and " & pvsLibraryTableAlias & ".view_media >= " & glDocStaticStart & " and " & pvsLibraryTableAlias & ".view_media <= " & glDocStaticEnd & " Then " & glDocStaticType & _
                " When " & pvsLibraryTableAlias & ".object_type = 55 and " & pvsLibraryTableAlias & ".view_media >= " & glDocDynamicStart & " and " & pvsLibraryTableAlias & ".view_media <= " & glDocDynamicEnd & " Then " & glDocDynamicType & _
                " When " & pvsLibraryTableAlias & ".object_type = 55 and " & pvsLibraryTableAlias & ".view_media >= " & glDocDossierStart & " and " & pvsLibraryTableAlias & ".view_media <= " & glDocDossierEnd & " Then " & glDocDossierType & _
                " When " & pvsLibraryTableAlias & ".object_type Is Not Null Then " & pvsLibraryTableAlias & ".extended_type "
    End If
    gsSQLDocTypeByViewMedia = gsSQLDocTypeByViewMedia & _
                " Else " & pvsTableAlias & ".extended_type End "

End Function

Public Function gsSQLDocType2ViewMedia(ByVal pvsTableAlias As String, ByVal pvlDocExtType As Long) As String
'-- Converts homogenized doc type back to View_Media data
'-- Returns View_Media
    If pvlDocExtType = glDocStaticType Then
        gsSQLDocType2ViewMedia = " and " & pvsTableAlias & ".view_media >= " & glDocStaticStart & " and " & pvsTableAlias & ".view_media <= " & glDocStaticEnd
    ElseIf pvlDocExtType = glDocDynamicType Then
        gsSQLDocType2ViewMedia = " and " & pvsTableAlias & ".view_media >= " & glDocDynamicStart & " and " & pvsTableAlias & ".view_media <= " & glDocDynamicEnd
    ElseIf pvlDocExtType = glDocDossierType Then
            gsSQLDocType2ViewMedia = " and " & pvsTableAlias & ".view_media >= " & glDocDossierStart & " and " & pvsTableAlias & ".view_media <= " & glDocDossierEnd
    Else
        gsSQLDocType2ViewMedia = " and " & pvsTableAlias & ".view_media = " & pvlDocExtType
    End If

End Function

Public Function gsSQLHaveExplicitAccessRightGet(ByVal pvsObjectIDs As String, ByVal pvsProjectID As String, ByVal pvsUserLogin As String) As String
    gsSQLHaveExplicitAccessRightGet = "select c.object_id, c.project_id from " & gtypSession.sDBPrefixMD & "dssmdobjsecu c " & _
                " join " & gtypSession.sDBPrefixMD & "dssmdusracct d " & _
                " on d.object_id = c.trust_id " & _
                " where c.object_id in (" & pvsObjectIDs & ")" & _
                " and c.project_id = " & pvsProjectID & _
                " and d.login = '" & UCase(pvsUserLogin) & "' "
End Function

Public Function gsSQLTmpCmdMgrData(ByVal pvsSourceTableName As String, ByVal pvsTargetTableName As String, ByVal pvsFolderPathTableName As String, ByVal pvsMstrAccountCodes As String) As String
'  pvsMstrAccountCodes = "-1" ==> get access rights for all accounts
'  pvsMstrAccountCodes = "" ==> Don't access right data
'  pvsMstrAccountCodes = account list ==> Get access rights for specified accounts
Dim sSqlSelect As String
Dim sSqlFrom As String

    gsProcName = "Get Object for Command Manager"
    '-- *mod* v2.1r11a Library Shortcut to actual object
    sSqlSelect = "Select distinct x1.ID " & _
            ", case when a2.object_type Is Null and L3.object_type Is Null Then 0 " & _
                  " when a2.object_type Is Not Null Then a2.object_type " & _
                  " when L3.object_type Is Not Null Then L3.object_type " & _
            " end as Object_Type_Num " & _
            ", case when a2.object_type Is Null and L3.object_type Is Null then 0 " & _
                  " when a2.object_type Is Not Null Then a2.subtype " & _
                  " when L3.object_type Is Not Null Then L3.subtype " & _
            " end as Object_SubType_Num " & _
            ", case when a2.object_type Is Null and L3.object_type Is Null then 0 " & _
                  " when a2.object_type Is Not Null Then a2.extended_type " & _
                  " when L3.object_type Is Not Null Then L3.extended_type " & _
            " end as Object_Extended_Type_Num " & _
            ", a.object_id "
            
    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
        sSqlSelect = sSqlSelect & ", case when x2.Folder_Path is NULL then '' else x2.Folder_Path end Folder_Path "    '*mod* v2.1
    ElseIf gtypSQLTmpTable.nDBID = nOracle Then
        sSqlSelect = sSqlSelect & ", case when x2.Folder_Path is NULL then chr('') else x2.Folder_Path end Folder_Path "    '*mod* v2.1
    ElseIf gtypSQLTmpTable.nDBID = nMySql Or gtypSQLTmpTable.nDBID = nPostgreSQL Then
        sSqlSelect = sSqlSelect & ", case when x2.Folder_Path is NULL then '' else x2.Folder_Path end Folder_Path "
    End If

    If pvsMstrAccountCodes <> "" Then
        If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
            '--sSqlSelect = sSqlSelect & ", case when d.login is null and d.isgroup is null then '~~none~~' when d.isgroup = 1 then d2.object_uname else d.login end Mstr_Account_Code "
            '*mod* v2.1s for Group, must use object_name because abbreviation for group "Public / Guest" is Public which is not correct.
            '--sSqlSelect = sSqlSelect & ", Coalesce(d2.abbreviation,'~~none~~') Mstr_Account_Code "
            sSqlSelect = sSqlSelect & ", case when d.isgroup = 1 then Coalesce(d2.object_name,'~~none~~') else Coalesce(d2.abbreviation,'~~none~~') end Mstr_Account_Code "
        ElseIf gtypSQLTmpTable.nDBID = nOracle Then
            '*mod* v2.1s for Group, must use object_name because abbreviation for group "Public / Guest" is Public which is not correct.
            '*mod* v2.1r10f Coalesce needs n' for varchar
            sSqlSelect = sSqlSelect & ", case when d.isgroup = 1 then Coalesce(d2.object_name,n'~~none~~') else Coalesce(d2.abbreviation,n'~~none~~') end Mstr_Account_Code "
        ElseIf gtypSQLTmpTable.nDBID = nMySql Or gtypSQLTmpTable.nDBID = nPostgreSQL Then
            sSqlSelect = sSqlSelect & ", case when d.isgroup = 1 then Coalesce(d2.object_name,n'~~none~~') else Coalesce(d2.abbreviation,n'~~none~~') end Mstr_Account_Code "
        End If
        sSqlSelect = sSqlSelect & ", case when d.isgroup = 1 then 'GROUP' else 'USER' end Mstr_Account_Type "
    Else
        sSqlSelect = sSqlSelect & ", '~~none~~' Mstr_Account_Code, '~' Mstr_Account_Type "
    End If
    '--^^ Due to Oracle, Create table cannot contain Null or '' string.

    '-- Final From Clause
    sSqlFrom = " from " & gtypSession.sDBPrefixMD & "dssmdobjinfo a  " & _
            "join " & pvsSourceTableName & " x1 on a.object_id = x1.object_id and a.project_id = x1.project_id " & _
            "left join " & pvsFolderPathTableName & " x2 on a.object_id = x2.original_id and a.project_id = x2.project_id "
    
    '-- Shortcut to actual object
    sSqlFrom = sSqlFrom & _
            "left join " & gtypSession.sDBPrefixMD & "dssmdobjdepn a1 " & _
                   "on a1.object_id = a.object_id and a1.project_id = a.project_id " & _
                  "and a.object_type = 18 " & _
            "left join " & gtypSession.sDBPrefixMD & "dssmdobjinfo a2 " & _
                   "on a1.DEPN_OBJID   = a2.object_id and a1.DEPN_PRJID = a2.project_id "
   
    '-- *mod* v2.1r11a Library Shortcut to actual object
    sSqlFrom = sSqlFrom & _
        "left join " & gtypSession.sDBPrefixMD & "dssmdlnkitem L1 " & _
               "on L1.object_id = a.object_id and L1.project_id = a.project_id " & _
              "and a.object_type = 18 " & _
        "left join " & gtypSession.sDBPrefixMD & "dssmdlnkitem L2 " & _
               "on L1.LINKITEM_ID = L2.LINKITEM_ID and L1.project_id = L2.project_id " & _
              "and L2.object_type = 55 " & _
        "left join " & gtypSession.sDBPrefixMD & "dssmdobjinfo L3 " & _
               "on L2.object_id = L3.object_id and L2.project_id = L3.project_id "

    If pvsMstrAccountCodes <> "" Then
        '-- Access Rights
        sSqlFrom = sSqlFrom & _
                     "left join " & gtypSession.sDBPrefixMD & "dssmdobjsecu c " & _
                     "on c.object_id = a.object_id " & _
                     "and c.project_id = a.project_id " & _
                     "left join " & gtypSession.sDBPrefixMD & "dssmdusracct d " & _
                     "on d.object_id = c.trust_id "

        sSqlFrom = sSqlFrom & _
                    "left join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d2 " & _
                    "on d.object_id   = d2.object_id " & _
                    "and d.project_id   = d2.project_id "
        If pvsMstrAccountCodes <> "-1" Then
            '*mod* v2.1t -- sSqlFrom = sSqlFrom & "and UPPER(d2.abbreviation) in (" & UCase(pvsMstrAccountCodes) & ") "
            sSqlFrom = sSqlFrom & "and d2.object_type = 34 and ((d2.subtype = 8704 and UPPER(d2.abbreviation) in (" & UCase(pvsMstrAccountCodes) & ")) or (d2.subtype = 8705 and UPPER(d2.object_name) in (" & UCase(pvsMstrAccountCodes) & "))) "
        End If
    End If
        
    sSqlFrom = sSqlFrom & " where (x2.Parent_ID = '" & gtypSession.sMstrProjectRootFolderID & "' or x2.Parent_ID is NULL)"   '*mod* v2.1

    gsSQLTmpCmdMgrData = gsSqlTmpTableCreation(pvsTargetTableName, sSqlSelect, sSqlFrom)

End Function

Public Function gsSQLFolderObjectsGet(ByVal pvsParentID As String) As String
'*mod* v2.1r7t - make sure to convert GUID Object IDs for Sql Server
Dim sSql

    '-- *mod* v2.1r11a Library Shortcut to actual object
    sSql = "select distinct " & gtypSession.lUserID & " User_ID " & _
            ", case When a.object_type = 18 And a2.object_name Is Not Null Then a2.object_name When a.object_type = 18 And L3.object_name Is Not Null Then L3.object_name Else a.object_name End Object_Name " & _
            ", a.description " & _
            ", a.object_type, a.subtype, a.extended_type " & _
            ", b.login owner_login_id " & _
            ", a.create_time, a.mod_time, a.hidden " & _
            ", " & gsPurifyGUIDsqlFromSQL("a.object_id") & " object_id " & _
            "from " & gtypSession.sDBPrefixMD & "dssmdobjinfo a  " & _
            "join " & gtypSession.sDBPrefixMD & "dssmdusracct b  " & _
            "on a.owner_id = b.object_id "
            
   '-- Shortcut to actual object
    sSql = sSql & _
            "left join " & gtypSession.sDBPrefixMD & "dssmdobjdepn a1 " & _
                   "on a1.object_id = a.object_id and a1.project_id = a.project_id " & _
                  "and a.object_type = 18 " & _
            "left join " & gtypSession.sDBPrefixMD & "dssmdobjinfo a2 " & _
                   "on a1.DEPN_OBJID = a2.object_id and a1.DEPN_PRJID = a2.project_id "
   
    '-- *mod* v2.1r11a Library Shortcut to actual object
    sSql = sSql & _
        "left join " & gtypSession.sDBPrefixMD & "dssmdlnkitem L1 " & _
               "on L1.object_id = a.object_id and L1.project_id = a.project_id " & _
              "and a.object_type = 18 " & _
        "left join " & gtypSession.sDBPrefixMD & "dssmdlnkitem L2 " & _
               "on L1.LINKITEM_ID = L2.LINKITEM_ID and L1.project_id = L2.project_id " & _
              "and L2.object_type = 55 " & _
        "left join " & gtypSession.sDBPrefixMD & "dssmdobjinfo L3 " & _
               "on L2.object_id = L3.object_id and L2.project_id = L3.project_id "

            
    sSql = sSql & _
            "where a.Parent_ID = '" & gsPadGUIDdataForSQL(pvsParentID) & "' and a.project_id = '" & gtypSession.sMstrProjectID & "'"
    gsSQLFolderObjectsGet = sSql
        
End Function

Public Function gsSQLtmpSourceProjectChange(ByVal pvsTargetTableName As String, ByVal pvsProjectID As String) As String
'-- Change Project ID on source table
Dim sSqlFinal As String

    sSqlFinal = " Update " & pvsTargetTableName & " SET project_id = '" & pvsProjectID & "';"
    gsSQLtmpSourceProjectChange = sSqlFinal
End Function

Public Function gsSQLtmpSourceSiblingObjectsGet(ByVal pvsSourceTableName As String, ByVal pvsTargetTableName As String, ByVal pvsFolderPathTableName As String, ByVal pvlBatchRunId As Long, ByVal pvsObjectID As String, ByVal pvbRecursive As Boolean) As String
'-- SQL tables: a. -> dssmdobjinfo
'               b. -> dssmdusracct
'               c. -> dssmdobjdepn
'               d. -> dssmdobjinfo on last use object
'               x1. -> #tmpSource_userid
'               x2. -> #tmpFolderPath_userid
'               x3. -> #tmpLastUse_userid
'
'-----------------------------------------------------------------------------------------------------------
'-- Input Temp Table
'o  #tmpSource_userid
'o  #tmpFolderPath_userid
'
'-- Output Temp table
'o  ##tmpFinalPass_userid   ==> Need to be global temp table because MS Access Qry needs to use different connection
'-----------------------------------------------------------------------------------------------------------
Dim sSqlSelect As String
Dim sSqlFrom As String

    gsProcName = "Get Siblings"
    '-- Final Select Clause
    '-- *mod* v2.1r11a Library Shortcut to actual object
    sSqlSelect = _
            "select distinct " & pvlBatchRunId & " as Batch_Run_ID " & _
            ", case When a.object_type = 18 And a2.object_name Is Not Null Then a2.object_name When a.object_type = 18 And L3.object_name Is Not Null Then L3.object_name Else a.object_name End Object_Name " & _
            ", a.object_type as Object_Type_Num, a.subtype as Object_SubType_Num, " & gsSQLDocTypeByViewMedia("a", "L3") & " as Object_Extended_Type_Num " & _
            ", b.login as Object_Owner_Login_ID " & _
            ", a.create_time as Object_Create_Time, a.mod_time as Object_Update_Time " & _
            ", a.hidden as Object_Hidden_flag " & _
            ", a.object_id " & _
            ", a.Parent_ID " & _
            ", a.version_id as Object_Version_ID " & _
            ", x2.Folder_Path "

    '-- Final From Clause
    sSqlFrom = " from " & gtypSession.sDBPrefixMD & "dssmdobjinfo a  " & _
            "join " & gtypSession.sDBPrefixMD & "dssmdusracct b  " & _
            "on a.owner_id = b.object_id " & _
            "join " & pvsSourceTableName & " x1 on a.object_id = x1.object_id and a.project_id = x1.project_id " & _
            "left join " & pvsFolderPathTableName & " x2 on a.object_id = x2.original_id and a.project_id = x2.project_id "
            
   '-- Shortcut to actual object
    sSqlFrom = sSqlFrom & _
            "left join " & gtypSession.sDBPrefixMD & "dssmdobjdepn a1 " & _
                   "on a1.object_id = a.object_id and a1.project_id = a.project_id " & _
                  "and a.object_type = 18 " & _
            "left join " & gtypSession.sDBPrefixMD & "dssmdobjinfo a2 " & _
                   "on a1.DEPN_OBJID = a2.object_id and a1.DEPN_PRJID = a2.project_id "
   
    '-- *mod* v2.1r11a Library Shortcut to actual object
    sSqlFrom = sSqlFrom & _
        "left join " & gtypSession.sDBPrefixMD & "dssmdlnkitem L1 " & _
               "on L1.object_id = a.object_id and L1.project_id = a.project_id " & _
              "and a.object_type = 18 " & _
        "left join " & gtypSession.sDBPrefixMD & "dssmdlnkitem L2 " & _
               "on L1.LINKITEM_ID = L2.LINKITEM_ID and L1.project_id = L2.project_id " & _
              "and L2.object_type = 55 " & _
        "left join " & gtypSession.sDBPrefixMD & "dssmdobjinfo L3 " & _
               "on L2.object_id = L3.object_id and L2.project_id = L3.project_id "
            
    sSqlFrom = " from " & _
            "where x2.Parent_ID = '" & gtypSession.sMstrProjectRootFolderID & "'; "

    gsSQLtmpSourceSiblingObjectsGet = gsSqlTmpTableCreation(pvsTargetTableName, sSqlSelect, sSqlFrom)
End Function

Public Function gsSQLtmpObjectVerify(ByVal pvsSourceTableName As String, ByVal pvsTargetTableName As String) As String
' Check existing of objects in Mstr metadata
'-- SQL tables: a. -> dssmdobjinfo
'
'-----------------------------------------------------------------------------------------------------------
'-- Input Temp Table
'o  #tmpSource_userid
'
'-- Output Temp table
'o  pvsTargetTableName
'-----------------------------------------------------------------------------------------------------------
Dim sSqlSelect As String
Dim sSqlFrom As String

    gsProcName = "Verify Mstr Objects"
    '-- Final Select Clause
    sSqlSelect = _
            "select distinct a.object_id, a.project_id "

    '-- Final From Clause
    sSqlFrom = " from " & gtypSession.sDBPrefixMD & "dssmdobjinfo a  " & _
            "join " & pvsSourceTableName & " x1 on a.object_id = x1.object_id and a.project_id = x1.project_id "

    gsSQLtmpObjectVerify = gsSqlTmpTableCreation(pvsTargetTableName, sSqlSelect, sSqlFrom)
End Function

Public Function gsSQLTmpFolderPathAsSource(ByVal pvsTargetTableName As String, ByVal pvsSourceTableName As String) As String
' create source table from Folder Path table
'
'-----------------------------------------------------------------------------------------------------------
'-- Input Temp Table
'o
'
'-- Output Temp table
'o
'-----------------------------------------------------------------------------------------------------------
Dim sSqlSelect As String
Dim sSqlFrom As String
    
    gsProcName = "Create source table from Folder Path table"
    '-- Final Select Clause
    sSqlSelect = _
            "select distinct a.Original_id object_id, a.project_id "

    '-- Final From Clause
    sSqlFrom = " from " & pvsSourceTableName & " a  "

    gsSQLTmpFolderPathAsSource = gsSqlTmpTableCreation(pvsTargetTableName, sSqlSelect, sSqlFrom)
End Function

'--*mod* v2.1p Public Function gsSQLtmpFinalPass(ByVal pvsSourceTableName As String, ByVal pvsTargetTableName As String, ByVal pvlBatchRunId As Long, ByVal pvsLastUseDate As String, ByVal pvsLastUseTurboDate As String, ByVal pvsAccessUser As String, ByVal pvbHasSourceData As Boolean, Optional pvbGetOriginalId As Boolean) As String
Public Function gsSQLtmpFinalPass(ByVal pvsSourceTableName As String, ByVal pvsTargetTableName As String, ByVal pvlBatchRunId As Long, ByVal pvsLastUseDate As String, ByVal pvsLastUseTurboDate As String, ByVal pvsAccessUser As String, ByVal pvbHasSourceData As Boolean) As String
'-- SQL tables: a. -> dssmdobjinfo
'               b. -> dssmdusracct
'               c. -> dssmdobjdepn
'               d. -> dssmdobjinfo on last use object
'               x1. -> #tmpSource_userid
'               x2. -> #tmpFolderPath_userid
'               x3. -> #tmpLastUse_userid
'
'-----------------------------------------------------------------------------------------------------------
'-- Input Temp Table
'o  #tmpSource_userid
'o  #tmpFolderPath_userid
'o  #tmpLastUse_userid
'
'-- Output Temp table
'o  ##tmpFinalPass_userid   ==> Need to be global temp table because MS Access Qry needs to use different connection
'
'-- Paramters
'   pvsLastUseDate: Include Last Use data
'   pvsLastUseTurboDate: Not Used in v2.1 ==> always empty
'   pvsAccessUser: Include User Access Rights (Object_ACL_Name column) ==> Append Access Rights to this User ID
'   pvbHasSourceData: Include Source Object indicator (Level1_Dep_Num column) ==> 1 if object is the original source, 0 if not source object (eg. dependents/components).
'   *not used* pvbGetOriginalId: Include Source Object ID (Actual_Object_ID column) ==> used in the View to determine whether Source Object has
'-----------------------------------------------------------------------------------------------------------
Dim sSqlSelect As String
Dim sSqlFrom As String

    gsProcName = "Final Pass1"
    '-- Final Select Clause
    sSqlSelect = _
        "With cteColumnsL as ( " & _
            " Select distinct g1.depn_objid object_id, g1.project_id, g2.object_name " & _
            " from " & pvsSourceTableName & " a " & _
            " left join " & gtypSession.sDBPrefixMD & "dssmdobjdepn g1 " & _
            " ON g1.object_id = a.object_id " & _
            " AND g1.project_id = a.project_id " & _
            " left join " & gtypSession.sDBPrefixMD & "dssmdobjinfo g2 " & _
            " ON a.object_id = g2.object_id " & _
            " AND a.project_id = g2.project_id " & _
            " where a.object_type in (15) " & _
            " and g1.depnobj_type in (26)) "            '-- columns/facts
    '*mod* v2.1r12c - prefix witht table. Note some columns has no logical table (15); thus use physical table 53; some ffsql columns has no table at all.
    sSqlSelect = sSqlSelect & _
        ", cteColumnsP as ( " & _
            " Select distinct g1.depn_objid object_id, g1.project_id, g2.object_name " & _
            " from " & pvsSourceTableName & " a " & _
            " left join " & gtypSession.sDBPrefixMD & "dssmdobjdepn g1 " & _
            " ON g1.object_id = a.object_id " & _
            " AND g1.project_id = a.project_id " & _
            " left join " & gtypSession.sDBPrefixMD & "dssmdobjinfo g2 " & _
            " ON a.object_id = g2.object_id " & _
            " AND a.project_id = g2.project_id " & _
            " where a.object_type in (53) " & _
            " and g1.depnobj_type in (26) " & _
            " AND g1.depn_objid NOT in (select L.object_id from cteColumnsL L where L.project_id = g1.project_id)) "
    sSqlSelect = sSqlSelect & _
        ", cteColumns as ( " & _
            " select * from cteColumnsL union select * from cteColumnsP) "
            
    sSqlSelect = sSqlSelect & _
            "select distinct " & pvlBatchRunId & " as Batch_Run_ID "
    '-- object type = 18 - shortcut
    '--*mod* v2.1z Use actual object name for shortcut and ffsql report name for ffsql table
    '--*mod* v2.1R1c replace Concat with + for SQLServer 2008 compatiblity
    '-- *mod* v2.1r11a Library Shortcut to actual object
    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
        sSqlSelect = sSqlSelect & _
            ", Case When a.object_type = 18 And a2.object_name Is Not Null Then a2.object_name When a.object_type IN (26, 53) And a.object_name Is Null Then a5.object_name When a.object_type = 18 And L3.object_name Is Not Null Then L3.object_name " & _
            "When a.object_type = 15 and a.subtype=3840 and a.extended_type = 3 and f3.object_name = 'Managed Objects' then 'Logical Table for ' + f2.object_name " & _
            "When a.object_type in (26) then concat(concat(g3.object_name, '.'), a.object_name) " & _
            "Else a.object_name end Object_Name "

    ElseIf gtypSQLTmpTable.nDBID = nOracle Or gtypSQLTmpTable.nDBID = nMySql Or gtypSQLTmpTable.nDBID = nPostgreSQL Then
        sSqlSelect = sSqlSelect & _
            ", Case When a.object_type = 18 And a2.object_name Is Not Null Then a2.object_name When a.object_type IN (26, 53) And a.object_name Is Null Then a5.object_name When a.object_type = 18 And L3.object_name Is Not Null Then L3.object_name " & _
            "When a.object_type = 15 and a.subtype=3840 and a.extended_type = 3 and f3.object_name = 'Managed Objects' then concat('Logical Table for ', f2.object_name) " & _
            "When a.object_type in (26) then concat(concat(g3.object_name, '.'), a.object_name) " & _
            "Else a.object_name end Object_Name "
    End If
    
    sSqlSelect = sSqlSelect & _
            ", a.object_type as Object_Type_Num, a.subtype as Object_SubType_Num, " & gsSQLDocTypeByViewMedia("a", "L3") & " as Object_Extended_Type_Num " & _
            ", b.login as Object_Owner_Login_ID " & _
            ", a.create_time as Object_Create_Time, a.mod_time as Object_Update_Time " & _
            ", a.hidden as Object_Hidden_flag " & _
            ", a.object_id " & _
            ", a.Parent_ID " & _
            ", a.version_id as Object_Version_ID "
            
    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
        sSqlSelect = sSqlSelect & ", case when x2.Folder_Path is NULL then '' else x2.Folder_Path end Folder_Path "    '*mod* v2.1
    ElseIf gtypSQLTmpTable.nDBID = nOracle Then
        sSqlSelect = sSqlSelect & ", case when x2.Folder_Path is NULL then chr('') else x2.Folder_Path end Folder_Path "    '*mod* v2.1
    ElseIf gtypSQLTmpTable.nDBID = nMySql Or gtypSQLTmpTable.nDBID = nPostgreSQL Then
        sSqlSelect = sSqlSelect & ", case when x2.Folder_Path is NULL then '' else x2.Folder_Path end Folder_Path "
    End If
            
    '-- *mod* v1.1 12/10/2015 cl save Original_Data flag as 1 in Level1_Dep_Num column
    '*mod* v2.1p If pvbHasSourceData Or pvbGetOriginalId Then
    If pvbHasSourceData Then
        sSqlSelect = sSqlSelect & _
            ", case when x1.Original_Data = 'Y' then 1 else 0 end Level1_Dep_Num "
    Else
        sSqlSelect = sSqlSelect & ", 0 Level1_Dep_Num "
    End If
    
    sSqlSelect = sSqlSelect & ", x1.TreeLevel "              '*mod* v2.1 2/11/2016 cl Treelevel place holder
    
    '*mod* v2.1p
'    If pvbGetOriginalId Then
'        sSqlSelect = sSqlSelect & ", x1.original_id as Actual_Object_ID "
'    End If
    
    If pvsLastUseDate <> "" And pvsLastUseTurboDate = "" Then
        sSqlSelect = sSqlSelect & ", x3.Last_Use_Object_Name, x3.last_Use_User_Name, x3.Last_Use_Time, x3.last_Use_Object_ID " & _
                    ", d.object_type last_Use_Object_Type_Num, d.subtype last_Use_Object_SubType_Num, " & gsSQLDocTypeByViewMedia("d", "L3") & " last_Use_Extended_Type_Num "
    End If
    '... Add ACL here USER=> Explicit Rights or USER-> Implicit Rights
    '-- folder's rights for children starts over 500000000
    If pvsAccessUser <> "" Then
        If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
            sSqlSelect = sSqlSelect & ", cast('" & pvsAccessUser & _
                                "=> ' + CASE x4.rights WHEN 199 THEN 'View' WHEN 223 THEN 'Modify' WHEN 255 THEN 'Full' ELSE 'Custom' END as nvarchar(255)) AS Object_ACL_Name "
        ElseIf gtypSQLTmpTable.nDBID = nOracle Or gtypSQLTmpTable.nDBID = nMySql Or gtypSQLTmpTable.nDBID = nPostgreSQL Then
            sSqlSelect = sSqlSelect & ", Concat('" & pvsAccessUser & "=> ' , CASE x4.rights WHEN 199 THEN 'View' WHEN 223 THEN 'Modify' WHEN 255 THEN 'Full' ELSE 'Custom' END) Object_ACL_Name "
        End If
    End If
    
    '-- Final From Clause
    sSqlFrom = " from " & gtypSession.sDBPrefixMD & "dssmdobjinfo a  " & _
            "join " & gtypSession.sDBPrefixMD & "dssmdusracct b  " & _
            "on a.owner_id = b.object_id " & _
            "join " & pvsSourceTableName & " x1 on a.object_id = x1.object_id and a.project_id = x1.project_id " & _
            "left join " & gtypSQLTmpTable.sTmpFolderPathTable & " x2 on a.object_id = x2.original_id and a.project_id = x2.project_id "
            
   '-- Shortcut to actual object
    sSqlFrom = sSqlFrom & _
            "left join " & gtypSession.sDBPrefixMD & "dssmdobjdepn a1 " & _
                   "on a1.object_id = a.object_id and a1.project_id = a.project_id " & _
                  "and a.object_type = 18 " & _
            "left join " & gtypSession.sDBPrefixMD & "dssmdobjinfo a2 " & _
                   "on a1.DEPN_OBJID = a2.object_id and a1.DEPN_PRJID = a2.project_id "
   
   '-- *mod* v2.1r11b get Dossier Column/Table Name from level 1 component
    sSqlFrom = sSqlFrom & _
            "left join " & gtypSession.sDBPrefixMD & "dssmdobjdepn a4 " & _
                   "on a4.DEPN_OBJID = a.object_id and a4.DEPN_PRJID = a.project_id " & _
                  "and a.object_type IN (26, 53) and a.extended_type = 352 And a.object_name Is Null " & _
            "left join " & gtypSession.sDBPrefixMD & "dssmdobjinfo a5 " & _
                   "on a5.object_id = a4.object_id and a5.project_id = a4.project_id " & _
                  "and ((a5.object_type = 12 and a.object_type = 26) or (a5.object_type = 15 and a.object_type = 53)) "
   
    '-- *mod* v2.1r11a Library Shortcut to actual object
    sSqlFrom = sSqlFrom & _
        "left join " & gtypSession.sDBPrefixMD & "dssmdlnkitem L1 " & _
               "on L1.object_id = a.object_id and L1.project_id = a.project_id " & _
              "and a.object_type = 18 " & _
        "left join " & gtypSession.sDBPrefixMD & "dssmdlnkitem L2 " & _
               "on L1.LINKITEM_ID = L2.LINKITEM_ID and L1.project_id = L2.project_id " & _
              "and L2.object_type = 55 " & _
        "left join " & gtypSession.sDBPrefixMD & "dssmdobjinfo L3 " & _
               "on L2.object_id = L3.object_id and L2.project_id = L3.project_id "
            
    '--*mod* v2.1z Get FFSQL Logical Table Names
    '--1. ffsql table is one per report  (dssmdobjdepn table contains 1 object_id only (where depn_objid is ffsql table)
    '--2. ffsql table name can have a name or can be '1'.  If not '1', then ffsql table name is not renamed if ffsql reports is renamed
    '--3. ffsql table can be define as Mstr Logical Table View.  In this case the parent object is "Tables" and not 'Managed Objects'
    '-- F2 - ffsql Report Name, F3 - ffsql Table Parent Name
    sSqlFrom = sSqlFrom & _
            "left join " & gtypSession.sDBPrefixMD & "dssmdobjdepn f1 " & _
            "on f1.DEPN_OBJID = a.object_id and f1.DEPN_PRJID = a.project_id " & _
            "and a.object_type = 15 and a.subtype=3840 and a.extended_type = 3 " & _
            "left join " & gtypSession.sDBPrefixMD & "dssmdobjinfo f2 " & _
            "on f1.object_id = f2.object_id " & _
            "and f1.project_id = f2.project_id " & _
            "left join " & gtypSession.sDBPrefixMD & "dssmdobjinfo f3 " & _
            "on a.Parent_ID = f3.object_id " & _
            "and a.project_id = f3.project_id " & _
            "and f3.object_name = 'Managed Objects' " & _
            "left join cteColumns g3 " & _
            "ON a.object_id = g3.object_id " & _
            "AND a.project_id = g3.project_id "
            
    If pvsLastUseDate <> "" And pvsLastUseTurboDate = "" Then
            sSqlFrom = sSqlFrom & "left join " & gtypSQLTmpTable.sTmpIntermTable & " x3 on a.object_id = x3.object_id and a.project_id = x3.project_id " & _
                                    "left join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d on d.object_id = x3.Last_Use_Object_ID and d.project_id = x3.Last_Use_Project_ID "
    End If
    If pvsAccessUser <> "" Then
        sSqlFrom = sSqlFrom & " join (select * from ( " & _
                    " select a.object_id, a.project_id, b.rights, row_number() over (partition by a.object_id order by b.rights desc) rn " & _
                    " from " & pvsSourceTableName & " a " & _
                    " join " & gtypSession.sDBPrefixMD & "dssmdobjsecu b " & _
                    " on a.OBJECT_ID = b.OBJECT_ID " & _
                    " and a.project_id = b.project_id " & _
                    " join " & gtypSession.sDBPrefixMD & "dssmdusracct d " & _
                    " on d.OBJECT_ID = b.TRUST_ID " & _
                    " where d.LOGIN = '" & pvsAccessUser & "' and b.rights < 500000000 " & _
                    " ) x where rn <= 1) x4 on a.OBJECT_ID = x4.OBJECT_ID and a.project_id = x4.project_id "
                    '-- folder's rights for children starts over 500000000
    End If
    
    '--sSqlFrom = sSqlFrom & " where (x2.Parent_ID = '" & gtypSession.sMstrProjectRootFolderID & "' or x2.Parent_ID is NULL)"   '*mod* v2.1
    sSqlFrom = sSqlFrom & " where (x2.Parent_ID = '" & gtypSession.sMstrProjectRootFolderID & "' or x2.Parent_ID is NULL) and COALESCE(a4.object_type,-123) = COALESCE(a5.object_type,-123)"   '*mod* v2.1r11b
    
    If pvsLastUseDate <> "" And pvsLastUseTurboDate = "" Then
        sSqlFrom = sSqlFrom & " and x3.Last_Use_Time <= " & gsSQLDateHighConvert(pvsLastUseDate) & " or x3.Last_Use_Time IS NULL"
    End If
       
    gsSQLtmpFinalPass = gsSqlTmpTableCreation(pvsTargetTableName, sSqlSelect, sSqlFrom)
End Function

Public Function gsSQLtmpFinalPassObjectFinder(ByVal pvsSourceTableName As String, ByVal pvsTargetTableName As String, ByVal pvlBatchRunId As Long, ByVal pvbLastUse As Boolean, ByVal pvsLastUseTurboDate As String, ByVal pvsAccessUser As String) As String
'-- SQL tables: a. -> dssmdobjinfo
'               b. -> dssmdusracct
'               c. -> dssmdobjdepn
'               d. -> dssmdobjinfo on last use object
'               x1. -> #tmpSource_userid
'               x2. -> #tmpFolderPath_userid
'               x3. -> #tmpLastUse_userid
'
'-----------------------------------------------------------------------------------------------------------
'-- Input Temp Table
'o  #tmpSource_userid
'o  #tmpFolderPath_userid
'o  #tmpLastUse_userid
'o  gtypSQLTmpTable.sTmpIntermTable ==> Expect to contain Last Use data
'
'-- Output Temp table
'o  ##tmpFinalPass_userid   ==> Need to be global temp table because MS Access Qry needs to use different connection
'-----------------------------------------------------------------------------------------------------------
Dim sSqlSelect As String
Dim sSqlFrom As String

    gsProcName = "Final Pass2"
    '-- Final Select Clause
    sSqlSelect = _
            "select distinct " & pvlBatchRunId & " as Batch_Run_ID "
    '-- object type = 18 - shortcut
    '--*mod* v2.1z Use actual object name for shortcut and ffsql report name for ffsql table
    '--*mod* v2.1R1c replace Concat with + for SQLServer 2008 compatiblity
    '-- *mod* v2.1r11a Library Shortcut to actual object
    '-- *mod* v2.1r11b get Dossier Column/Table Name from level 1 component
    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
        sSqlSelect = sSqlSelect & _
            ", Case When a.object_type = 18 And a2.object_name Is Not Null Then a2.object_name When a.object_type IN (26, 53) And a.object_name Is Null Then a5.object_name When a.object_type = 18 And L3.object_name Is Not Null Then L3.object_name " & _
            "When a.object_type = 15 and a.subtype=3840 and a.extended_type = 3 and f3.object_name = 'Managed Objects' then 'Logical Table for ' + f2.object_name " & _
            "Else a.object_name End Object_Name "

    ElseIf gtypSQLTmpTable.nDBID = nOracle Or gtypSQLTmpTable.nDBID = nMySql Or gtypSQLTmpTable.nDBID = nPostgreSQL Then
        sSqlSelect = sSqlSelect & _
            ", Case When a.object_type = 18 And a2.object_name Is Not Null Then a2.object_name When a.object_type IN (26, 53) And a.object_name Is Null Then a5.object_name When a.object_type = 18 And L3.object_name Is Not Null Then L3.object_name " & _
            "When a.object_type = 15 and a.subtype=3840 and a.extended_type = 3 and f3.object_name = 'Managed Objects' then concat('Logical Table for ', f2.object_name) " & _
            "Else a.object_name End Object_Name "

    End If

    sSqlSelect = sSqlSelect & _
            ", a.object_type as Object_Type_Num, a.subtype as Object_SubType_Num, " & gsSQLDocTypeByViewMedia("a", "L3") & " as Object_Extended_Type_Num " & _
            ", b.login as Object_Owner_Login_ID " & _
            ", a.create_time as Object_Create_Time, a.mod_time as Object_Update_Time " & _
            ", a.hidden as Object_Hidden_flag " & _
            ", a.object_id " & _
            ", a.Parent_ID " & _
            ", a.version_id as Object_Version_ID "

    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
        sSqlSelect = sSqlSelect & ", case when x2.Folder_Path is NULL then '' else x2.Folder_Path end Folder_Path "    '*mod* v2.1
    ElseIf gtypSQLTmpTable.nDBID = nOracle Then
        sSqlSelect = sSqlSelect & ", case when x2.Folder_Path is NULL then chr('') else x2.Folder_Path end Folder_Path "    '*mod* v2.1
    ElseIf gtypSQLTmpTable.nDBID = nMySql Or gtypSQLTmpTable.nDBID = nPostgreSQL Then
        sSqlSelect = sSqlSelect & ", case when x2.Folder_Path is NULL then '' else x2.Folder_Path end Folder_Path "
    End If
    
    sSqlSelect = sSqlSelect & ", 0 Level1_Dep_Num "     '*mod* v1.1 12/10/2015 cl save Original_Data flag as 1 in Level1_Dep_Num column
    sSqlSelect = sSqlSelect & ", 0 TreeLevel "          '*mod* v2.1 2/11/16 cl save tree hieararchy for Dependents and Components Search, 0 for others
            
    If pvbLastUse And pvsLastUseTurboDate = "" Then
        sSqlSelect = sSqlSelect & ", x3.Last_Use_Object_Name, x3.last_Use_User_Name, x3.Last_Use_Time, x3.last_Use_Object_ID " & _
                    ", d.object_type last_Use_Object_Type_Num, d.subtype last_Use_Object_SubType_Num, " & gsSQLDocTypeByViewMedia("d", "L3") & " last_Use_Extended_Type_Num "
    End If
    '... Add ACL here USER=> Explicit Rights or USER-> Implicit Rights
    '-- folder's rights for children starts over 500000000
    If pvsAccessUser <> "" Then
        If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
            sSqlSelect = sSqlSelect & ", cast(x4.abbreviation + " & _
                                "' => ' + CASE COALESCE(x4.rights,0) WHEN 199 THEN 'View' WHEN 223 THEN 'Modify' WHEN 255 THEN 'Full' WHEN 0 THEN ' ' ELSE 'Custom' END as nvarchar(255)) AS Object_ACL_Name "
        ElseIf gtypSQLTmpTable.nDBID = nOracle Or gtypSQLTmpTable.nDBID = nMySql Or gtypSQLTmpTable.nDBID = nPostgreSQL Then
            sSqlSelect = sSqlSelect & ", Concat(Concat(x4.abbreviation, ' => '), CASE COALESCE(x4.rights,0) WHEN 199 THEN 'View' WHEN 223 THEN 'Modify' WHEN 255 THEN 'Full' WHEN 0 THEN ' ' ELSE 'Custom' END) Object_ACL_Name "
        End If
    End If
    
    '-- Final From Clause
    sSqlFrom = " from " & gtypSession.sDBPrefixMD & "dssmdobjinfo a  " & _
            "join " & gtypSession.sDBPrefixMD & "dssmdusracct b  " & _
            "on a.owner_id = b.object_id " & _
            "join " & pvsSourceTableName & " x1 on a.object_id = x1.object_id and a.project_id = x1.project_id " & _
            "left join " & gtypSQLTmpTable.sTmpFolderPathTable & " x2 on a.object_id = x2.original_id and a.project_id = x2.project_id "

   '-- Shortcut to actual object
    sSqlFrom = sSqlFrom & _
            "left join " & gtypSession.sDBPrefixMD & "dssmdobjdepn a1 " & _
                   "on a1.object_id = a.object_id and a1.project_id = a.project_id " & _
                  "and a.object_type = 18 " & _
            "left join " & gtypSession.sDBPrefixMD & "dssmdobjinfo a2 " & _
                   "on a1.DEPN_OBJID = a2.object_id and a1.DEPN_PRJID = a2.project_id "
   
   '-- *mod* v2.1r11b get Dossier Column/Table Name from level 1 component
    sSqlFrom = sSqlFrom & _
            "left join " & gtypSession.sDBPrefixMD & "dssmdobjdepn a4 " & _
                   "on a4.DEPN_OBJID = a.object_id and a4.DEPN_PRJID = a.project_id " & _
                  "and a.object_type IN (26, 53) and a.extended_type = 352 And a.object_name Is Null " & _
            "left join " & gtypSession.sDBPrefixMD & "dssmdobjinfo a5 " & _
                   "on a5.object_id = a4.object_id and a5.project_id = a4.project_id " & _
                  "and ((a5.object_type = 12 and a.object_type = 26) or (a5.object_type = 15 and a.object_type = 53)) "
                     
    '-- *mod* v2.1r11a Library Shortcut to actual object
    sSqlFrom = sSqlFrom & _
        "left join " & gtypSession.sDBPrefixMD & "dssmdlnkitem L1 " & _
               "on L1.object_id = a.object_id and L1.project_id = a.project_id " & _
              "and a.object_type = 18 " & _
        "left join " & gtypSession.sDBPrefixMD & "dssmdlnkitem L2 " & _
               "on L1.LINKITEM_ID = L2.LINKITEM_ID and L1.project_id = L2.project_id " & _
              "and L2.object_type = 55 " & _
        "left join " & gtypSession.sDBPrefixMD & "dssmdobjinfo L3 " & _
               "on L2.object_id = L3.object_id and L2.project_id = L3.project_id "
            
    '--*mod* v2.1z Get FFSQL Logical Table Names
    '--1. ffsql table is one per report  (dssmdobjdepn table contains 1 object_id only (where depn_objid is ffsql table)
    '--2. ffsql table name can have a name or can be '1'.  If not '1', then ffsql table name is not renamed if ffsql reports is renamed
    '--3. ffsql table can be define as Mstr Logical Table View.  In this case the parent object is "Tables" and not 'Managed Objects'
    '-- F2 - ffsql Report Name, F3 - ffsql Table Parent Name
    sSqlFrom = sSqlFrom & _
            "left join " & gtypSession.sDBPrefixMD & "dssmdobjdepn f1 " & _
            "on f1.DEPN_OBJID = a.object_id and f1.DEPN_PRJID = a.project_id " & _
            "and a.object_type = 15 and a.subtype=3840 and a.extended_type = 3 " & _
            "left join " & gtypSession.sDBPrefixMD & "dssmdobjinfo f2 " & _
            "on f1.object_id = f2.object_id " & _
            "and f1.project_id = f2.project_id " & _
            "left join " & gtypSession.sDBPrefixMD & "dssmdobjinfo f3 " & _
            "on a.Parent_ID = f3.object_id " & _
            "and a.project_id = f3.project_id " & _
            "and f3.object_name = 'Managed Objects'"

    If pvbLastUse And pvsLastUseTurboDate = "" Then
            sSqlFrom = sSqlFrom & "left join " & gtypSQLTmpTable.sTmpIntermTable & " x3 on a.object_id = x3.object_id and a.project_id = x3.project_id " & _
                                    "left join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d on d.object_id = x3.Last_Use_Object_ID and d.project_id = x3.Last_Use_Project_ID "
    End If
    '*mod* v2.1r9d allow search by User Group
    If pvsAccessUser <> "" Then
        sSqlFrom = sSqlFrom & " left join (select * from ( " & _
                    " select a.object_id, a.project_id, b.rights, d.abbreviation, row_number() over (partition by a.object_id order by b.rights desc) rn " & _
                    " from " & pvsSourceTableName & " a " & _
                    " join " & gtypSession.sDBPrefixMD & "dssmdobjsecu b " & _
                    " on a.OBJECT_ID = b.OBJECT_ID " & _
                    " and a.project_id = b.project_id " & _
                    " join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d " & _
                    " on d.OBJECT_ID = b.TRUST_ID " & _
                    " where upper(d.abbreviation) in (" & pvsAccessUser & ") and b.rights < 500000000 " & _
                    " ) x where rn <= 1) x4 on a.OBJECT_ID = x4.OBJECT_ID and a.project_id = x4.project_id "
                    '-- folder's rights for children starts over 500000000
    End If
    
    '--sSqlFrom = sSqlFrom & " where (x2.Parent_ID = '" & gtypSession.sMstrProjectRootFolderID & "' or x2.Parent_ID is NULL)"   '*mod* v2.1
    sSqlFrom = sSqlFrom & " where (x2.Parent_ID = '" & gtypSession.sMstrProjectRootFolderID & "' or x2.Parent_ID is NULL) and COALESCE(a4.object_type,-123) = COALESCE(a5.object_type,-123)"   '*mod* v2.1r11b
    
'*mod* v2.1t Last use is already filtered before Final step
'    If pvsLastUseDate <> "" And pvsLastUseTurboDate = "" Then
'        If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
'            sSqlFinal = sSqlFinal & " and ((substring(x3.last_Use_User_Name,2,1)='~' and a.mod_time < " & gsSQLDateConvert(pvsLastModifiedDate) & " and x3.Last_Use_Time < " & gsSQLDateConvert(pvsLastUseDate) & ") or (substring(x3.last_Use_User_Name,2,1)<>'~' and a.mod_time < " & gsSQLDateConvert(pvsLastModifiedDate) & " and x3.Last_Use_Time < " & gsSQLDateConvert(pvsLastModifiedDate) & ") or x3.Last_Use_Time IS NULL) "
'        ElseIf gtypSQLTmpTable.nDBID = nOracle Then
'            sSqlFinal = sSqlFinal & " and ((substr(x3.last_Use_User_Name,2,1)='~' and a.mod_time < " & gsSQLDateConvert(pvsLastModifiedDate) & " and x3.Last_Use_Time < " & gsSQLDateConvert(pvsLastUseDate) & ") or (substr(x3.last_Use_User_Name,2,1)<>'~' and a.mod_time < " & gsSQLDateConvert(pvsLastModifiedDate) & " and x3.Last_Use_Time < " & gsSQLDateConvert(pvsLastModifiedDate) & ") or x3.Last_Use_Time IS NULL) "
'        End If
'    End If
       
    gsSQLtmpFinalPassObjectFinder = gsSqlTmpTableCreation(pvsTargetTableName, sSqlSelect, sSqlFrom)
End Function

Public Function gsSQLtmpFinalPassSimple(ByVal pvsSourceTableName As String, ByVal pvsTargetTableName As String, ByVal pvlBatchRunId As Long, Optional pvbGetOriginalId As Boolean) As String
'-- Simplified final pass
'-- SQL tables: a. -> dssmdobjinfo
'               b. -> dssmdusracct
'               c. -> dssmdobjdepn
'               x1. -> #tmpSource_userid
'               x2. -> #tmpFolderPath_userid
'               x3. -> #tmpLastUse_userid
'
'-----------------------------------------------------------------------------------------------------------
'-- Input Temp Table
'o  #tmpSource_userid
'o  #tmpFolderPath_userid
'o  #tmpLastUse_userid
'
'-- Output Temp table
'o  ##tmpFinalPass_userid   ==> Need to be global temp table because MS Access Qry needs to use different connection
'-----------------------------------------------------------------------------------------------------------
'    sSqlSelect = "SELECT a.Batch_Run_ID, a.Object_Name, a.Folder_Path, a.Object_ID, a.Parent_ID, a.Object_Version_ID, a.Object_Create_Time, a.Object_Update_Time, a.Object_Type_Num, a.Object_SubType_Num, a.Object_Extended_Type_Num, a.Object_Owner_Login_ID "
Dim sSqlSelect As String
Dim sSqlFrom As String

    gsProcName = "Final Pass3"
    '-- Final Select Clause
    sSqlSelect = _
            "select distinct " & pvlBatchRunId & " as Batch_Run_ID "
    '-- object type = 18 - shortcut
    '--*mod* v2.1z Use actual object name for shortcut and ffsql report name for ffsql table
    '--*mod* v2.1R1c replace Concat with + for SQLServer 2008 compatiblity
    '-- *mod* v2.1r11a Library Shortcut to actual object
    '-- *mod* v2.1r11b get Dossier Column/Table Name from level 1 component
    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
        sSqlSelect = sSqlSelect & _
            ", Case When a.object_type = 18 And a2.object_name Is Not Null Then a2.object_name When a.object_type IN (26, 53) And a.object_name Is Null Then a5.object_name When a.object_type = 18 And L3.object_name Is Not Null Then L3.object_name " & _
            "When a.object_type = 15 and a.subtype=3840 and a.extended_type = 3 and f3.object_name = 'Managed Objects' then 'Logical Table for ' + f2.object_name " & _
            "Else a.object_name end Object_Name "
    ElseIf gtypSQLTmpTable.nDBID = nOracle Or gtypSQLTmpTable.nDBID = nMySql Or gtypSQLTmpTable.nDBID = nPostgreSQL Then
        sSqlSelect = sSqlSelect & _
            ", Case When a.object_type = 18 And a2.object_name Is Not Null Then a2.object_name When a.object_type IN (26, 53) And a.object_name Is Null Then a5.object_name When a.object_type = 18 And L3.object_name Is Not Null Then L3.object_name " & _
            "When a.object_type = 15 and a.subtype=3840 and a.extended_type = 3 and f3.object_name = 'Managed Objects' then concat('Logical Table for ', f2.object_name) " & _
            "Else a.object_name end Object_Name "
    End If

    sSqlSelect = sSqlSelect & _
            ", a.object_type as Object_Type_Num, a.subtype as Object_SubType_Num, " & gsSQLDocTypeByViewMedia("a", "L3") & " as Object_Extended_Type_Num " & _
            ", b.login as Object_Owner_Login_ID " & _
            ", a.create_time as Object_Create_Time, a.mod_time as Object_Update_Time " & _
            ", a.hidden as Object_Hidden_flag " & _
            ", a.object_id " & _
            ", a.Parent_ID " & _
            ", a.version_id as Object_Version_ID "
            
    '-- *mod* v2.1 02/19/2016 cl Use for Compare Object
    If Not IsMissing(pvbGetOriginalId) Then
        If pvbGetOriginalId Then
            '-- *mod* v2.1r2a 12/17/2016 cl Actual_Object_ID Not Used for Compare Object
            '--sSqlSelect = sSqlSelect & ", x1.original_id as Actual_Object_ID "
            sSqlSelect = sSqlSelect & " , case when x1.Original_Data = 'Y' then 1 else 0 end Level1_Dep_Num "
        Else
            sSqlSelect = sSqlSelect & ", 0 Level1_Dep_Num "
        End If
    End If
            
    '--sSqlSelect = sSqlSelect & ", 0 TreeLevel "          '*mod* v2.1r2a 12/18/16 cl assume tree search does not return Treelevel
            
    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
        sSqlSelect = sSqlSelect & ", case when x2.Folder_Path is NULL then '' else x2.Folder_Path end Folder_Path "    '*mod* v2.1
    ElseIf gtypSQLTmpTable.nDBID = nOracle Then
        sSqlSelect = sSqlSelect & ", case when x2.Folder_Path is NULL then chr('') else x2.Folder_Path end Folder_Path "    '*mod* v2.1
    ElseIf gtypSQLTmpTable.nDBID = nMySql Or gtypSQLTmpTable.nDBID = nPostgreSQL Then
        sSqlSelect = sSqlSelect & ", case when x2.Folder_Path is NULL then '' else x2.Folder_Path end Folder_Path "
    End If
            
    '-- Final From Clause
    sSqlFrom = " from " & gtypSession.sDBPrefixMD & "dssmdobjinfo a  " & _
            "join " & gtypSession.sDBPrefixMD & "dssmdusracct b  " & _
            "on a.owner_id = b.object_id " & _
            "join " & pvsSourceTableName & " x1 on a.object_id = x1.object_id and a.project_id = x1.project_id " & _
            "left join " & gtypSQLTmpTable.sTmpFolderPathTable & " x2 on a.object_id = x2.original_id and a.project_id = x2.project_id "
    
   '-- Shortcut to actual object
    sSqlFrom = sSqlFrom & _
            "left join " & gtypSession.sDBPrefixMD & "dssmdobjdepn a1 " & _
                   "on a1.object_id = a.object_id and a1.project_id = a.project_id " & _
                  "and a.object_type = 18 " & _
            "left join " & gtypSession.sDBPrefixMD & "dssmdobjinfo a2 " & _
                   "on a1.DEPN_OBJID = a2.object_id and a1.DEPN_PRJID = a2.project_id "
    
   '-- *mod* v2.1r11b get Dossier Column/Table Name from level 1 component
    sSqlFrom = sSqlFrom & _
            "left join " & gtypSession.sDBPrefixMD & "dssmdobjdepn a4 " & _
                   "on a4.DEPN_OBJID = a.object_id and a4.DEPN_PRJID = a.project_id " & _
                  "and a.object_type IN (26, 53) and a.extended_type = 352 And a.object_name Is Null " & _
            "left join " & gtypSession.sDBPrefixMD & "dssmdobjinfo a5 " & _
                   "on a5.object_id = a4.object_id and a5.project_id = a4.project_id " & _
                  "and ((a5.object_type = 12 and a.object_type = 26) or (a5.object_type = 15 and a.object_type = 53)) "
   
    '-- *mod* v2.1r11a Library Shortcut to actual object
    sSqlFrom = sSqlFrom & _
        "left join " & gtypSession.sDBPrefixMD & "dssmdlnkitem L1 " & _
               "on L1.object_id = a.object_id and L1.project_id = a.project_id " & _
              "and a.object_type = 18 " & _
        "left join " & gtypSession.sDBPrefixMD & "dssmdlnkitem L2 " & _
               "on L1.LINKITEM_ID = L2.LINKITEM_ID and L1.project_id = L2.project_id " & _
              "and L2.object_type = 55 " & _
        "left join " & gtypSession.sDBPrefixMD & "dssmdobjinfo L3 " & _
               "on L2.object_id = L3.object_id and L2.project_id = L3.project_id "
            
    '--*mod* v2.1z Get FFSQL Logical Table Names
    '--1. ffsql table is one per report  (dssmdobjdepn table contains 1 object_id only (where depn_objid is ffsql table)
    '--2. ffsql table name can have a name or can be '1'.  If not '1', then ffsql table name is not renamed if ffsql reports is renamed
    '--3. ffsql table can be define as Mstr Logical Table View.  In this case the parent object is "Tables" and not 'Managed Objects'
    '-- F2 - ffsql Report Name, F3 - ffsql Table Parent Name
    sSqlFrom = sSqlFrom & _
            "left join " & gtypSession.sDBPrefixMD & "dssmdobjdepn f1 " & _
            "on f1.DEPN_OBJID = a.object_id and f1.DEPN_PRJID = a.project_id " & _
            "and a.object_type = 15 and a.subtype=3840 and a.extended_type = 3 " & _
            "left join " & gtypSession.sDBPrefixMD & "dssmdobjinfo f2 " & _
            "on f1.object_id = f2.object_id " & _
            "and f1.project_id = f2.project_id " & _
            "left join " & gtypSession.sDBPrefixMD & "dssmdobjinfo f3 " & _
            "on a.Parent_ID = f3.object_id " & _
            "and a.project_id = f3.project_id " & _
            "and f3.object_name = 'Managed Objects'"
            
    sSqlFrom = sSqlFrom & " where (x2.Parent_ID = '" & gtypSession.sMstrProjectRootFolderID & "' or x2.Parent_ID is NULL) and COALESCE(a4.object_type,-123) = COALESCE(a5.object_type,-123)"   '*mod* v2.1r11b
    
    gsSQLtmpFinalPassSimple = gsSqlTmpTableCreation(pvsTargetTableName, sSqlSelect, sSqlFrom)
End Function

Public Function gsSQLTmpFolderPath(ByVal pvsSourceTableName As String, ByVal pvsTargetTableName As String, Optional ByVal pvbNoTrimPath As Boolean) As String
    gsProcName = "Construct Folder Paths"
    gsSQLTmpFolderPath = gsSQLTmpFolderPath_NewSQL(pvsSourceTableName, pvsTargetTableName, pvbNoTrimPath)
    'Not Used gsSQLTmpFolderPath = gsSQLTmpFolderPath_Oracle(pvsSourceTableName, pvsTargetTableName)
End Function

Public Function gsSQLTmpFolderPath_NewSQL(ByVal pvsSourceTableName As String, ByVal pvsTargetTableName As String, ByVal pvbNoTrimPath As Boolean) As String
'-- SQL tables: a. -> dssmdobjinfo
'               b. -> dssmdusracct
'               c. -> dssmdobjdepn
'               x1. -> #tmpSource_userid
'               x2. -> #tmpFolderPath_userid
'               x3. -> #tmpLastUse_userid
'
'-----------------------------------------------------------------------------------------------------------
'-- Input Temp Table
'o  #tmpSource_userid
'
'-- Output Temp table
'o  #tmpFolderPath_userid
'------------------------
'-----------------------------------------------------------------------------------------------------------
Dim sSqlSelect As String
Dim sSqlFrom As String
Dim sSqlTree As String

    '-- Get Folder Path using recursive CTE
    sSqlTree = _
            "WithR xFolderPath (" & _
            "                        FullPath, Original_id, object_id, Parent_ID, project_id) AS (" & _
            "    SELECT DISTINCT" & _
            "            a.object_name AS FullPath," & _
            "            a.object_id AS Original_id, " & _
            "            a.object_id," & _
            "            a.Parent_ID," & _
            "            a.project_id" & _
            "    FROM    " & pvsSourceTableName & " b" & _
            "        join      " & gtypSession.sDBPrefixMD & "dssmdobjinfo a " & _
            "            ON b.object_id = a.object_id" & _
            "               and b.project_id = a.project_id" & _
            "    UNION ALL "
            
    sSqlTree = sSqlTree & gsSQLFolderPathBuild("p.FullPath", "c.object_name")
                
    sSqlTree = sSqlTree & _
            "        p.Original_id," & _
            "        c.object_id, " & _
            "        c.Parent_ID, " & _
            "        c.project_id " & _
            "    FROM " & gtypSession.sDBPrefixMD & "dssmdobjinfo c" & _
            "    INNER JOIN xFolderPath p " & _
            "            ON p.Parent_ID = c.object_id " & _
            "               and p.project_id = c.project_id " & _
            "    WHERE c.object_id <> " & "'" & gtypSession.sMstrProjectRootFolderID & "'" & _
            "            and c.object_type = 8) "

    '-- Output Selection, also trim filename from fullpath
    sSqlSelect = "Select " & _
            " b.Original_id" & _
            " ,b.object_id " & _
            " ,b.Parent_ID " & _
            " ,b.project_id "
    
    If pvbNoTrimPath Then
        sSqlSelect = sSqlSelect & ",b.FullPath Folder_Path "
    Else
        sSqlSelect = sSqlSelect & gsSQLFolderPathTrim("b.FullPath")
    End If
    sSqlFrom = " FROM xFolderPath b Where b.Parent_ID = '" & gtypSession.sMstrProjectRootFolderID & "'"
             
'    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
'        sSqlFinal = sSqlTree & sSqlSelect & gsSqlTmpTableCreate(pvsTargetTableName) & sSqlFrom & ";"
'    ElseIf gtypSQLTmpTable.nDBID = nOracle Then
'        sSqlFinal = gkOracleRecursionSetting & gsSqlTmpTableCreate(pvsTargetTableName) & sSqlTree & sSqlSelect & sSqlFrom & ";"
'    End If
            
    gsSQLTmpFolderPath_NewSQL = gsSqlTmpTableCreationRecursion(pvsTargetTableName, sSqlSelect, sSqlFrom, sSqlTree, gkOracleRecursionSetting)
End Function

Public Function gsSQLTmpFolderPath_Oracle(ByVal pvsSourceTableName As String, ByVal pvsTargetTableName As String) As String
Dim sSqlSelect As String
Dim sSqlFrom As String

    '-- Note the Oracle version is different in
    '-- 1. object_id is not the last parent as in NewSql
    '-- 2. Parent_ID is not in selection list
    sSqlSelect = "Select distinct " & _
            "  a.object_id Original_id" & _
            " , a.object_id " & _
            " , a.project_id " & _
            " ,  substr(substr(d.Folder_path, 1, instr(d.Folder_path, '\', -1, 1)-1), instr(d.Folder_path, '\', 2, 1)) Folder_Path "
            
    sSqlFrom = _
        "FROM " & pvsSourceTableName & " a " & _
            " JOIN ( " & _
                " SELECT object_id, project_id " & _
                   " , sys_connect_by_path(y.object_name, '\' ) folder_path " & _
                " FROM  " & gtypSession.sDBPrefixMD & "dssmdobjinfo y " & _
                " CONNECT BY PRIOR y.object_id = y.Parent_ID " & _
                   " and y.project_id in (select distinct x.project_id from " & pvsSourceTableName & " x) " & _
                " START WITH y.object_id IN " & _
                    " ( " & _
                    " SELECT object_id " & _
                    " FROM " & gtypSession.sDBPrefixMD & "dssmdobjinfo " & _
                    " WHERE object_id  = '" & gtypSession.sMstrProjectRootFolderID & "' " & _
                       " and object_type = 8 " & _
                        " and project_id in (select distinct x.project_id from " & pvsSourceTableName & " x) " & _
                    " ) " & _
                    " and y.project_id in (select distinct x.project_id from " & pvsSourceTableName & " x) " & _
            " ) d " & _
        " ON a.object_id = d.object_id " & _
        " and a.project_id = d.project_id"

'    sSqlFinal = gkOracleRecursionSetting & gsSqlTmpTableCreate(pvsTargetTableName) & sSqlSelect & sSqlFrom & ";"

    gsSQLTmpFolderPath_Oracle = gsSqlTmpTableCreationRecursion(pvsTargetTableName, sSqlSelect, sSqlFrom, "", gkOracleRecursionSetting)
End Function

Public Function gsSQLtmpSourceSearchByObjects(ByVal pvsTargetTableName As String, ByVal pvlBatchRunId As Long, ByVal pvsSql As String, ByVal pvsSelectedFunctions As String) As String
'-- SQL tables: a. -> dssmdobjinfo
'               b. -> dssmdusracct
'               c. -> dssmdobjdepn
'               x1. -> #tmpSource_userid
'               x2. -> #tmpFolderPath_userid
'               x3. -> #tmpLastUse_userid
'
'-----------------------------------------------------------------------------------------------------------
'-- Input Temp Table
'
'-- Output Temp table
'o  #tmpSource_userid
'------------------------
'-----------------------------------------------------------------------------------------------------------
Dim sSqlSelect As String
Dim sSqlFrom As String

    gsProcName = "Object Search"
    If pvsSelectedFunctions = "" Then
        'Simple Select
        '-- name search will not match object name with Shortcut name as Shortcut name is natively blank
        '...
        sSqlSelect = _
                "select distinct a.project_id, a.object_id "
        sSqlFrom = _
                 " from " & gtypSession.sDBPrefixMD & "dssmdobjinfo a  " & _
                  "join " & gtypSession.sDBPrefixMD & "dssmdusracct b  " & _
                    "on a.owner_id = b.object_id " & _
             "left join " & gtypSession.sDBPrefixMD & "dssmdlnkitem L1 " & _
                    "on L1.object_id = a.object_id and L1.project_id = a.project_id " & _
                   "and a.object_type = 18 " & _
             "left join " & gtypSession.sDBPrefixMD & "dssmdlnkitem L2 " & _
                    "on L1.LINKITEM_ID = L2.LINKITEM_ID and L1.project_id = L2.project_id " & _
                   "and L2.object_type = 55 " & _
             "left join " & gtypSession.sDBPrefixMD & "dssmdobjinfo L3 " & _
                    "on L2.object_id = L3.object_id and L2.project_id = L3.project_id "
        sSqlFrom = sSqlFrom & _
                "where a.project_id = '" & gtypSession.sMstrProjectID & "' " & _
                pvsSql
    ElseIf pvsSelectedFunctions <> "" Then
        '-- Addtional join for Selected Functions
        sSqlSelect = _
                " select distinct a.project_id, a.object_id "
        sSqlFrom = _
                 " from " & gtypSession.sDBPrefixMD & "dssmdobjinfo a  " & _
                  "join " & gtypSession.sDBPrefixMD & "dssmdusracct b  " & _
                    "on a.owner_id = b.object_id " & _
                  "join " & gtypSession.sDBPrefixMD & "dssmdobjdepn c  " & _
                    "on a.object_id = c.object_id " & _
                   "and a.project_id = c.project_id " & _
             "left join " & gtypSession.sDBPrefixMD & "dssmdlnkitem L1 " & _
                    "on L1.object_id = a.object_id and L1.project_id = a.project_id " & _
                   "and a.object_type = 18 " & _
             "left join " & gtypSession.sDBPrefixMD & "dssmdlnkitem L2 " & _
                    "on L1.LINKITEM_ID = L2.LINKITEM_ID and L1.project_id = L2.project_id " & _
                   "and L2.object_type = 55 " & _
             "left join " & gtypSession.sDBPrefixMD & "dssmdobjinfo L3 " & _
                    "on L2.object_id = L3.object_id and L2.project_id = L3.project_id "
        sSqlFrom = sSqlFrom & _
                "where a.project_id = '" & gtypSession.sMstrProjectID & "' " & _
                "and c.DEPN_OBJID in (" & Mid(pvsSelectedFunctions, 2) & ") " & _
                pvsSql
    End If

     gsSQLtmpSourceSearchByObjects = gsSqlTmpTableCreation(pvsTargetTableName, sSqlSelect, sSqlFrom)
End Function

Public Function gsSQLTmpDupNames(ByVal pvsTargetTableName As String, ByVal pvsSourceTableName As String, ByVal pvbDupObjectType As Boolean) As String
Dim sSqlSelect As String
Dim sSqlFrom As String
 
    '-- v2.1r9c 4/25/18 find duplicates against the entire project, not just within the set
    '--Bug Note: in Object Finder if dup across type, the matching object could have types outside of type selections. This issue does not exist in
    sSqlSelect = _
            "select x.project_id, x.object_id "
    sSqlFrom = _
            "from " & gtypSession.sDBPrefixMD & "dssmdobjinfo x " & _
            "Join (select d.project_id, d.object_name, count(distinct d.object_id) DupTotal "
 
    If pvbDupObjectType Then
        sSqlFrom = sSqlFrom & _
                    ", d.object_type "
    End If
        sSqlFrom = sSqlFrom & _
            "from " & gtypSession.sDBPrefixMD & "dssmdobjinfo a  " & _
            "join " & pvsSourceTableName & " b  " & _
            "on a.object_id = b.object_id " & _
            "and a.project_id = b.project_id " & _
            "join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d " & _
            "on upper(a.object_name) = upper(d.object_name) " & _
            "and a.project_id = d.project_id "
 
    If pvbDupObjectType Then
        sSqlFrom = sSqlFrom & _
                    " and a.object_type = d.object_type "
    End If
        sSqlFrom = sSqlFrom & _
            "join " & gtypSession.sDBPrefixMD & "dssmdobjinfo f2 " & _
            "on d.Parent_ID = f2.object_id " & _
            "and d.project_id = f2.project_id " & _
            "and f2.object_name <> 'Managed Objects' " & _
            "join " & gtypSession.sDBPrefixMD & "dssmdobjinfo f3 " & _
            "on a.Parent_ID = f3.object_id " & _
            "and a.project_id = f3.project_id " & _
            "and f3.object_name <> 'Managed Objects' " & _
            "group by d.project_id, d.object_name "
    If pvbDupObjectType Then
        sSqlFrom = sSqlFrom & _
                    ", d.object_type "
    End If
        sSqlFrom = sSqlFrom & _
            "having count(distinct d.object_id) > 1) y " & _
            " on x.project_id = y.project_id and upper(x.object_name) = upper(y.object_name) "
 
    If pvbDupObjectType Then
        sSqlFrom = sSqlFrom & _
                    " and x.object_type = y.object_type "
    End If
 
    gsSQLTmpDupNames = gsSqlTmpTableCreation(pvsTargetTableName, sSqlSelect, sSqlFrom)
End Function

Public Function gsSQLtmpTreeUserGroup(ByVal pvsTargetTableName As String, ByVal pvsSourceTableName As String, ByVal pvbRecursion As Boolean, ByVal pvbGetMembers As Boolean, ByVal pvbUniqueUser As Boolean) As String
'----------------------------------------------------------------------------------------------------------
' Get Contact/Group Tree for v2.1r16d
' Returns d.object_id, d.object_type, d.subtype, d.extended_type, d.project_id, original_id
'
' pvbGetMembers = True --> find members for the group
'               = False --> find groups the contact belongs
'
' pvbUniqueUser = True --> only returns unique users, not include source object_id
'               = False --> returns duplicates, including source object_id
'
'-- Input Temp Table
'o  #tmpSource_userid
'
'-- Output Temp table
'o  #tmpTreeList_userid
'-----------------------------------------------------------------------------------------------------------
Dim sSqlSelect As String
Dim sSqlFrom As String
Dim sSqlTree As String
Dim sSqlLastUseExclusion As String

    gsProcName = "User Group Walker"    '-- v2.1r10b
    If Not pvbRecursion Then
        '-- Only travel one level
        '-------------------------------------------
        '-- Save tree to temp table #tmpTreeList_userid
        '-- note: NOT union with original source data
        '-------------------------------------------
        sSqlSelect = _
            "Select d.object_id, d.object_type, d.subtype, d.extended_type, d.project_id "

        If pvbUniqueUser Then
            sSqlSelect = sSqlSelect & ", " & gsSqlLiteralString(gsSql0GUIDNoQuote(), 36) & " original_id " & ", " & gsSqlLiteralString(gsSql0GUIDNoQuote(), 36) & " group_id "      '-- 36 is for SQL Server only
        Else
            sSqlSelect = sSqlSelect & ", a.recipient_object_id original_id, a.recipient_object_id group_id "
        End If

        '^^^ Need original_id to tie back to original contact group in web sub, Collection ID could be a nest group that does not exist in Web Sub list
        '^^^ Group Id is the where members reside
        
        sSqlFrom = "FROM " & _
                    pvsSourceTableName & " a " & _
                    "join " & gtypSession.sDBPrefixMD & "dssmdobjdepn b "
                    '*mod* v2.1r16e different project_id when calling get member from Web Sub ==> " on a.project_id = b.project_id "
           
        If pvbGetMembers Then
            sSqlFrom = sSqlFrom & _
            " on a.recipient_object_id = b.depn_objid "     '-- Up Level -> Dependency List
        Else
            sSqlFrom = sSqlFrom & _
            " on a.recipient_object_id = b.object_id "    '-- Down Level -> Component List
        End If
        
        sSqlFrom = sSqlFrom & _
            "    join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d " & _
            "    on b.project_id = d.project_id "
        
        If pvbGetMembers Then
            sSqlFrom = sSqlFrom & _
            " and b.object_id = d.object_id "     '-- Up Level -> Dependency List
        Else
            sSqlFrom = sSqlFrom & _
            " and b.depn_objid = d.object_id "    '-- Down Level -> Component List
        End If
        
        If pvbGetMembers Then
            sSqlFrom = sSqlFrom '& " WHERE d.object_type " & gkMstrObjectResultExclusion 'gkMstrObjectDependencyExclusion
        Else    '-- Components
            sSqlFrom = sSqlFrom '& " WHERE d.object_type " & pvsComponentResultExclusionFilter
        End If
        
'        sSqlFrom = sSqlFrom & _
'            " UNION " & _
'            "Select b.object_id original_id, d.object_id, d.object_type, d.subtype, d.extended_type, d.project_id, d.mod_time, 'Y' Original_Data, 0 TreeLevel " & _
'            "FROM " & _
'                    pvsSourceTableName & " b " & _
'            "    join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d " & _
'            "    ON b.object_id = d.object_id " & _
'            "    and b.project_id = d.project_id "
            
        gsSQLtmpTreeUserGroup = gsSqlTmpTableCreation(pvsTargetTableName, sSqlSelect, sSqlFrom)
        Exit Function
        '*** Short Circuit Exit ***
    End If
    
    '-------------------------------------------
    '-- Get Recursive Tree
    '-------------------------------------------
    sSqlTree = "WithR Tree_List( " & _
        "             object_id, depn_objid, object_type, subtype, extended_type, project_id, original_id, group_id "
    
    '^^^ Need original_id to tie back to original contact group in web sub, Collection ID could be a nest group that does not exist in Web Sub list
    '^^^ Group Id is the where members reside
              
    
    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
        sSqlTree = sSqlTree & " ,Sentinel "
    ElseIf gtypSQLTmpTable.nDBID = nOracle Then
        '-- **notwork no need** sSqlTree = sSqlTree & " ,Sentinel " "
    ElseIf gtypSQLTmpTable.nDBID = nMySql Or gtypSQLTmpTable.nDBID = nPostgreSQL Then
        sSqlTree = sSqlTree & " ,Sentinel "
    End If
    
    sSqlTree = sSqlTree & ") AS " & _
        "( " & _
        "    SELECT " & _
        "        a.object_id " & _
        "        ,a.depn_objid " & _
        "        ,d.object_type, d.subtype, d.extended_type " & _
        "        ,c.project_id " & _
        "        ,c.recipient_object_id original_id " & _
        "        ,c.recipient_object_id group_id "
     
    '-- Recursive Loop Init
    sSqlTree = sSqlTree & gsSqlRecursiveLoopInit("c.recipient_object_id")

    sSqlTree = sSqlTree & " FROM " & _
        "         " & gtypSession.sDBPrefixMD & "dssmdobjdepn a " & _
        "         join " & pvsSourceTableName & " c " & _
        "         ON a.depn_objid = c.recipient_object_id " & _
        "         join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d " & _
        "         ON a.object_id = d.object_id "
        '*mod* v2.1r16e different project_id when calling get member from Web Sub ==>  "         and a.project_id = c.project_id " & _

        '-- ^^^ Anchor
        '-- recursion
    sSqlTree = sSqlTree & _
        "   UNION ALL  SELECT " & _
        "        a.object_id " & _
        "        ,a.depn_objid " & _
        "        ,c.object_type, c.subtype, c.extended_type " & _
        "        ,a.project_id " & _
        "        ,p.original_id "

    If pvbGetMembers Then
        sSqlTree = sSqlTree & " ,a.depn_objid group_id "
    Else
        sSqlTree = sSqlTree & " ,a.object_id group_id "
    End If
    
    '-- Recursive Loop tracking
    sSqlTree = sSqlTree & gsSqlRecursiveLoopTracking("a.object_id")
        
    sSqlTree = sSqlTree & _
        "    FROM " & _
        "        Tree_List p " & _
        "        JOIN " & gtypSession.sDBPrefixMD & "dssmdobjdepn a "
        '*mod* v2.1r16e different project_id when calling get member from Web Sub ==>  " ON p.project_id = a.project_id " & _

    If pvbGetMembers Then
        sSqlTree = sSqlTree & _
        "  on p.object_id = a.depn_objid " & _
        "  and a.depnobj_type in (34) " '& gkMstrObjectDependencyExclusion       '-- Up Level -> Dependency List
    Else
        sSqlTree = sSqlTree & _
        "  on p.depn_objid = a.object_id " & _
        "  and a.object_type in (34) " '& pvsComponentExclusionFilter        '-- Down Level -> Component List
    End If
    
    sSqlTree = sSqlTree & _
        "        JOIN    " & gtypSession.sDBPrefixMD & "dssmdobjinfo c " & _
        "                ON a.object_id = c.object_id " & _
        "                and a.project_id = c.project_id "
        
    If pvbGetMembers Then
        '--*mod* v2.1o sSqlTree = sSqlTree & " WHERE c.object_type " & gkMstrObjectDependencyExclusion '--*mod* v2.1 cl 2/19/16 to make it work, we need to add to all dep exclusions '--& gkMstrObjectDependencyExclusionMore
        sSqlTree = sSqlTree & " WHERE a.depnobj_type in (34) " '(a.object_type not in (12, 13) or a.depnobj_type not in (12, 13)) "      '*mod* v2.1q ignore weak depdencies between attribute and fact (Fact entry level attributes)
    Else    '-- Components
        sSqlTree = sSqlTree & " WHERE a.object_type in (34) " '& pvsComponentExclusionFilter & _
                             '   " and (a.object_type not in (12, 13) or a.depnobj_type not in (12, 13)) "      '*mod* v2.1q ignore weak depdencies between attribute and fact (Fact entry level attributes)
    End If
   
    '-- Recursive Loop tracking
    sSqlTree = sSqlTree & gsSqlRecursiveLoopDetection("a.object_id", "")

    '-------------------------------------------
    '-- Save tree to temp table #tmpTreeList_userid
    '-------------------------------------------
    sSqlSelect = _
        "Select Distinct d.object_id, d.object_type, d.subtype, d.extended_type, d.project_id, d.mod_time, ' ' Original_Data, 0 TreeLevel "
    

    If pvbUniqueUser Then
        sSqlSelect = sSqlSelect & ", " & gsSqlLiteralString(gsSql0GUIDNoQuote(), 36) & " original_id " & ", " & gsSqlLiteralString(gsSql0GUIDNoQuote(), 36) & " group_id "      '-- 36 is for SQL Server only
    Else
        sSqlSelect = sSqlSelect & ", b.original_id, b.group_id "
    End If
    
    
    sSqlFrom = _
        " FROM " & _
        "    Tree_List b " & _
        "    join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d "
        
        '*mod* v2.1r16e different project_id when calling get member from Web Sub ==>  "         on b.project_id = d.project_id " & _

       
    If pvbGetMembers Then
        sSqlFrom = sSqlFrom & _
        " on b.object_id = d.object_id "         '-- Up Level -> Dependency List
    Else
        sSqlFrom = sSqlFrom & _
        " on b.depn_objid = d.object_id "        '-- Down Level -> Component List
        '*mod* v1.1
        '--Include lowest level - columns/functions
        '--" and b.depn_objid = d.object_id "        '-- Down Level -> Component List
        '--Exclude lowest level - columns/functions
        '--" and b.object_id = d.object_id "        '-- Down Level -> Component List
    End If
    
    If pvbGetMembers Then
        sSqlFrom = sSqlFrom & " WHERE d.object_type in (34) " '& gkMstrObjectResultExclusion '--gkMstrObjectDependencyExclusion
    Else    '-- Components
        sSqlFrom = sSqlFrom & " WHERE d.object_type in (34) " '& pvsComponentResultExclusionFilter & ""
    End If

    '-------------------------------------------
    '-- note: NOT union with original source data in case of leaf
    '-------------------------------------------
'    sSqlFrom = sSqlFrom & _
'        " UNION " & _
'        "Select Distinct b.object_id, d.object_id, d.object_type, d.subtype, d.extended_type, d.project_id, d.mod_time, 'Y' Original_Data, 0 TreeLevel " & _
'        "FROM " & _
'        "    " & pvsSourceTableName & " b " & _
'        "    join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d " & _
'        "    ON b.object_id = d.object_id " & _
'        "    and b.project_id = d.project_id "

'    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
'        sSqlFinal = sSqlTree & sSqlSelect & gsSqlTmpTableCreate(pvsTargetTableName) & sSqlFrom & ";"
'    ElseIf gtypSQLTmpTable.nDBID = nOracle Then
'        sSqlFinal = gkOracleRecursionSetting & gsSqlTmpTableCreate(pvsTargetTableName) & sSqlTree & sSqlSelect & sSqlFrom & ";"
'    End If
    
    gsSQLtmpTreeUserGroup = gsSqlTmpTableCreationRecursion(pvsTargetTableName, sSqlSelect, sSqlFrom, sSqlTree, gkOracleRecursionSetting)

End Function

Public Function gsSQLtmpTreeContactGroup(ByVal pvsTargetTableName As String, ByVal pvsSourceTableName As String, ByVal pvbRecursion As Boolean, ByVal pvbGetMembers As Boolean, ByVal pvbUniqueContact As Boolean) As String
'----------------------------------------------------------------------------------------------------------
' Get Contact/Group Tree for v2.1r16d
' Returns contact_id, Collection_id, Contact_type only
'
' pvbGetMembers = True --> find members for the group
'               = False --> find groups the contact belongs
'
' pvbUniqueContact = True --> only returns unique contacts, not include source contact_id
'                  = False --> returns duplicates, including source contact_id
'
'-- Input Temp Table
'o  #tmpSource_userid
'
'-- Output Temp table
'o  #tmpTreeList_userid
'-----------------------------------------------------------------------------------------------------------
Dim sSqlSelect As String
Dim sSqlFrom As String
Dim sSqlTree As String
Dim sSqlLastUseExclusion As String

    gsProcName = "Contact Group Walker"    '-- v2.1r10b
    If Not pvbRecursion Then
        '-- Only travel one level
        '-------------------------------------------
        '-- Save tree to temp table #tmpTreeList_userid
        '-- note: NOT union with original source data
        '-------------------------------------------
        sSqlSelect = _
            "Select Distinct c.contact_id, c.contact_type "

        If pvbUniqueContact Then
            sSqlSelect = sSqlSelect & ", " & gsSqlLiteralString(gsSql0PureGUIDNoQuote, 32) & " group_contact_id " & ", " & gsSqlLiteralString(gsSql0PureGUIDNoQuote, 32) & " original_id "
        Else
            sSqlSelect = sSqlSelect & ", b.COLLECTION_ID group_contact_id , a.recipient_object_id original_id "
        End If
        
        If pvbGetMembers Then
            sSqlFrom = "FROM " & _
                        pvsSourceTableName & " a " & _
                        " join " & gtypSession.sDBPrefixMD & "DSSCSRCOLCON b " & _
                           " on b.COLLECTION_ID = a.recipient_object_id " & _
                         " join " & gtypSession.sDBPrefixMD & "dsscscontact c " & _
                           " on b.contact_id = c.contact_id "
        Else
            sSqlFrom = "FROM " & _
                        pvsSourceTableName & " a " & _
                        " join " & gtypSession.sDBPrefixMD & "DSSCSRCOLCON b " & _
                           " on b.contact_id = a.recipient_object_id " & _
                         " join " & gtypSession.sDBPrefixMD & "dsscscontact c " & _
                           " on b.COLLECTION_ID = c.contact_id "
        End If
        
        gsSQLtmpTreeContactGroup = gsSqlTmpTableCreation(pvsTargetTableName, sSqlSelect, sSqlFrom)
        Exit Function
        '*** Short Circuit Exit ***
    End If
    
    '-------------------------------------------
    '-- Get Recursive Tree
    '-------------------------------------------
    sSqlTree = "WithR Tree_List( " & _
        "             contact_id, COLLECTION_ID, contact_type, original_id "
    '^^^ Need original_id to tie back to original contact group in web sub, Collection ID could be a nest group that does not exist in Web Sub list
    
    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
        sSqlTree = sSqlTree & " ,Sentinel "
    ElseIf gtypSQLTmpTable.nDBID = nOracle Then
        '-- **notwork no need** sSqlTree = sSqlTree & " ,Sentinel " "
    ElseIf gtypSQLTmpTable.nDBID = nMySql Or gtypSQLTmpTable.nDBID = nPostgreSQL Then
        sSqlTree = sSqlTree & " ,Sentinel "
    End If
    
    sSqlTree = sSqlTree & ") AS " & _
        "( " & _
        "    SELECT " & _
        "        a.contact_id " & _
        "        ,a.COLLECTION_ID " & _
        "        ,d.contact_type " & _
        "        ,c.recipient_object_id original_id "
      
    '-- Recursive Loop Init
    sSqlTree = sSqlTree & gsSqlRecursiveLoopInit("d.contact_id")

    If pvbGetMembers Then
        sSqlTree = sSqlTree & " FROM " & _
            "         " & gtypSession.sDBPrefixMD & "DSSCSRCOLCON a " & _
            "         join " & pvsSourceTableName & " c " & _
            "         ON a.COLLECTION_ID = c.recipient_object_id " & _
            "         join " & gtypSession.sDBPrefixMD & "dsscscontact d " & _
            "         ON a.contact_id = d.contact_id "
    Else
        sSqlTree = sSqlTree & " FROM " & _
            "         " & gtypSession.sDBPrefixMD & "DSSCSRCOLCON a " & _
            "         join " & pvsSourceTableName & " c " & _
            "         ON a.contact_id = c.recipient_object_id " & _
            "         join " & gtypSession.sDBPrefixMD & "dsscscontact d " & _
            "         ON a.COLLECTION_ID = d.contact_id "
    End If
    
        '-- ^^^ Anchor
        '-- recursion
    sSqlTree = sSqlTree & _
        "   UNION ALL  SELECT " & _
        "        a.contact_id " & _
        "        ,a.COLLECTION_ID " & _
        "        ,d.contact_type " & _
        "        ,p.original_id "
      
    '-- Recursive Loop tracking
    sSqlTree = sSqlTree & gsSqlRecursiveLoopTracking("d.contact_id")
        
    sSqlTree = sSqlTree & _
        "    FROM " & _
        "        Tree_List p " & _
        "        JOIN " & gtypSession.sDBPrefixMD & "DSSCSRCOLCON a "
    
    If pvbGetMembers Then
        sSqlTree = sSqlTree & _
        "  on p.contact_id = a.COLLECTION_ID " & _
        "  JOIN " & gtypSession.sDBPrefixMD & "dsscscontact d " & _
        "  on a.contact_id = d.contact_id "               '-- Down Level -> Component List
    Else
        sSqlTree = sSqlTree & _
        "  on p.COLLECTION_ID = a.contact_id " & _
        "  JOIN " & gtypSession.sDBPrefixMD & "dsscscontact d " & _
        "  on a.contact_id = d.contact_id "                '-- Up Level -> Dependency List
    End If
    '--sSqlTree = sSqlTree & " WHERE d.contact_type in (2) "

    '-- Recursive Loop tracking
    sSqlTree = sSqlTree & gsSqlRecursiveLoopDetection("d.contact_id", "")

    '-------------------------------------------
    '-- Save tree to temp table #tmpTreeList_userid
    '-------------------------------------------
    sSqlSelect = _
        "Select Distinct b.contact_id, b.contact_type "

    If pvbUniqueContact Then
        sSqlSelect = sSqlSelect & ", " & gsSqlLiteralString(gsSql0PureGUIDNoQuote, 32) & " group_contact_id " & ", " & gsSqlLiteralString(gsSql0PureGUIDNoQuote, 32) & " original_id "
    Else
        sSqlSelect = sSqlSelect & ", b.COLLECTION_ID group_contact_id, b.original_id "
    End If
    
    sSqlFrom = _
        " FROM " & _
        "    Tree_List b "
       
    gsSQLtmpTreeContactGroup = gsSqlTmpTableCreationRecursion(pvsTargetTableName, sSqlSelect, sSqlFrom, sSqlTree, gkOracleRecursionSetting)

End Function

Public Function gsSQLtmpTreeList4Components(ByVal pvsSourceTableName As String, ByVal pvsTargetTableName As String, ByVal pvsComponentExclusionFilter As String, ByVal pvsComponentResultExclusionFilter As String) As String
'----------------------------------------------------------------------------------------------------------
' Get Tree Hierarchy but not level and no sequence #
' This version use Max Component resolution. It is needed for Access Right's hierarchy tree
'Recursive for Components only. Depedents will not work
'-- Input Temp Table
'o  #tmpSource_userid
'
'-- Output Temp table
'o  #tmpTreeList_userid
'-----------------------------------------------------------------------------------------------------------
Dim sSqlSelect As String
Dim sSqlFrom As String
Dim sSqlTree As String
Dim sSqlLastUseExclusion As String

    gsProcName = "Tree Walker1"
    
    '-------------------------------------------
    '-- Get Recursive Tree
    '-------------------------------------------
    sSqlTree = "WithR Tree_List( " & _
        "            original_id, object_id, depn_objid, object_type, subtype, extended_type, project_id "
    
    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
        sSqlTree = sSqlTree & " ,Sentinel "
    ElseIf gtypSQLTmpTable.nDBID = nOracle Then
        '-- **notwork no need** sSqlTree = sSqlTree & " ,Sentinel " "
    ElseIf gtypSQLTmpTable.nDBID = nMySql Or gtypSQLTmpTable.nDBID = nPostgreSQL Then
        sSqlTree = sSqlTree & " ,Sentinel "
    End If
    
    sSqlTree = sSqlTree & ") AS " & _
        "( " & _
        "    SELECT " & _
        "        c.object_id Original_id " & _
        "        ,c.object_id " & _
        "        ,Coalesce(L2.object_id, a.depn_objid) " & _
        "        ,d.object_type, d.subtype, d.extended_type " & _
        "        ,c.project_id "
        
    '-- Recursive Loop Init
    sSqlTree = sSqlTree & gsSqlRecursiveLoopInit("c.object_id")

    sSqlTree = sSqlTree & " FROM " & _
            pvsSourceTableName & " c " & _
            "left join " & gtypSession.sDBPrefixMD & "dssmdlnkitem L1 " & _
              "ON L1.object_id = c.object_id and L1.project_id = c.project_id " & _
             "and L1.object_type = 18 " & _
            "left join " & gtypSession.sDBPrefixMD & "dssmdlnkitem L2 " & _
              "ON L1.LINKITEM_ID = L2.LINKITEM_ID and L1.project_id = L2.project_id " & _
             "and L2.object_type = 55 " & _
            "left join " & gtypSession.sDBPrefixMD & "dssmdobjdepn a " & _
              "ON a.object_id = c.object_id " & _
             "and a.project_id = c.project_id " & _
            "join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d " & _
              "ON c.object_id = d.object_id and c.project_id = d.project_id " & _
           "where (a.object_type Is Null or a.object_type not in (12, 13) or a.depnobj_type not in (12, 13)) "      '*mod* v2.1q ignore weak depdencies between attribute and fact (Fact entry level attributes)
        '-- ^^^ Anchor
        '*mod* v2.1r11a Shortcut used in Library need to get components from Link table
                        
        '-- recursion
    sSqlTree = sSqlTree & _
        "   UNION ALL  SELECT " & _
        "        p.Original_id " & _
        "        ,a.object_id " & _
        "        ,a.depn_objid " & _
        "        ,c.object_type, c.subtype, c.extended_type " & _
        "        ,a.project_id "
        
    '-- Recursive Loop tracking
    sSqlTree = sSqlTree & gsSqlRecursiveLoopTracking("a.object_id")
        
    sSqlTree = sSqlTree & _
        "    FROM " & _
        "        Tree_List p " & _
        "        JOIN " & gtypSession.sDBPrefixMD & "dssmdobjdepn a " & _
        "            ON p.project_id = a.project_id "
    
    sSqlTree = sSqlTree & _
        "        JOIN    " & gtypSession.sDBPrefixMD & "dssmdobjinfo c " & _
        "                ON a.object_id = c.object_id " & _
        "                and a.project_id = c.project_id "
        

    sSqlTree = sSqlTree & _
        "  and p.depn_objid = a.object_id " & _
        "  and ((c.object_type " & pvsComponentExclusionFilter
                                
        '*mod* v2.1r10c
        '"  and a.object_type " & gsMstrObjectComponentExclusion        '-- Down Level -> Component List
        '*mod* v2.1r10c include FFSQL tables
        sSqlTree = sSqlTree & ") or (c.object_type in (15,53) and c.subtype in (3840,13568) and c.extended_type in (3) "
        'sSqlTree = sSqlTree & " and a2.depnobj_type = 10 "
        sSqlTree = sSqlTree & ")) "

    sSqlTree = sSqlTree & " WHERE (a.object_type not in (12, 13) or a.depnobj_type not in (12, 13)) "      '*mod* v2.1q ignore weak depdencies between attribute and fact (Fact entry level attributes)
   
   
    '-- Recursive Loop tracking
    sSqlTree = sSqlTree & gsSqlRecursiveLoopDetection("a.object_id", "")

    '-------------------------------------------
    '-- Save tree to temp table #tmpTreeList_userid
    '-------------------------------------------
    sSqlSelect = _
        "Select Distinct b.original_id, d.object_id, d.object_type, d.subtype, d.extended_type, d.project_id, d.mod_time, ' ' Original_Data, 0 TreeLevel "
    
    sSqlFrom = _
        " FROM " & _
        "    Tree_List b " & _
        "    join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d " & _
        "    on b.project_id = d.project_id "
       

        sSqlFrom = sSqlFrom & _
        " and b.depn_objid = d.object_id "        '-- Down Level -> Component List
        '*mod* v1.1
        '--Include lowest level - columns/functions
        '--" and b.depn_objid = d.object_id "        '-- Down Level -> Component List
        '--Exclude lowest level - columns/functions
        '--" and b.object_id = d.object_id "        '-- Down Level -> Component List
    

        sSqlFrom = sSqlFrom & " WHERE d.object_type " & pvsComponentResultExclusionFilter
        '*mod* v2.1r10e -- For Facts, get logical
        '*mod* v2.1r10g include all tables that mapped to attribute(previously only main table is included)
        If gnComponentDetail <> nComponentDetailMin And gbIncludeSourceTableComponentSearch() Then             '-- Skip if component detail is Min or not specified in option
            sSqlFrom = sSqlFrom & " UNION " & sSqlSelect '-- & " + 1 TreeLevel "
            sSqlFrom = sSqlFrom & _
                " FROM " & _
                "  Tree_List b " & _
                "    join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d " & _
                "    on b.project_id = d.project_id " & _
                "    JOIN " & gtypSession.sDBPrefixMD & "dssmdobjdepn c " & _
                "        on b.project_id = c.project_id " & _
                "        and (b.depn_objid = c.depn_objid or b.original_id = c.depn_objid) " & _
                "        and c.object_id = d.object_id "
            sSqlFrom = sSqlFrom & " WHERE c.depnobj_type in (12) and d.object_type = 15 "

    End If

    '-------------------------------------------
    '-- note: union with original source data in case of leaf
    '-------------------------------------------
    sSqlFrom = sSqlFrom & _
        " UNION " & _
        "Select Distinct b.object_id, d.object_id, d.object_type, d.subtype, d.extended_type, d.project_id, d.mod_time, 'Y' Original_Data, 0 TreeLevel " & _
        "FROM " & _
        "    " & pvsSourceTableName & " b " & _
        "    join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d " & _
        "    ON b.object_id = d.object_id " & _
        "    and b.project_id = d.project_id "


    gsSQLtmpTreeList4Components = gsSqlTmpTableCreationRecursion(pvsTargetTableName, sSqlSelect, sSqlFrom, sSqlTree, gkOracleRecursionSetting)

End Function

Public Function gsSQLtmpTreeNoHieararchy(ByVal pvsSourceTableName As String, ByVal pvsTargetTableName As String, ByVal pvbDependency As Boolean, ByVal pvbRecursion As Boolean, Optional ByVal pvsLastUseDate As String, Optional ByVal pvsLastUseTurboDate As String) As String
' Get Tree Hierarchy but no level and no sequence #
' Used implicitly in several functions
'
    gsProcName = "Tree Walker2"
    gsSQLtmpTreeNoHieararchy = gsSQLtmpTreeNoHieararchy_NewSQL(pvsSourceTableName, pvsTargetTableName, pvbDependency, pvbRecursion, pvsLastUseDate, pvsLastUseTurboDate)

End Function

Public Function gsSQLtmpTreeNoHieararchy_NewSQL(ByVal pvsSourceTableName As String, ByVal pvsTargetTableName As String, ByVal pvbDependency As Boolean, ByVal pvbRecursion As Boolean, Optional ByVal pvsLastUseDate As String, Optional ByVal pvsLastUseTurboDate As String) As String
'----------------------------------------------------------------------------------------------------------
'If there is last use date input, use it to filter out the tree (original_id)
'Recursive for Components only. Depedents will not work
'
'-- Input Temp Table
'o  #tmpSource_userid
'
'-- Output Temp table
'o  #tmpTreeList_userid
'-----------------------------------------------------------------------------------------------------------
Dim sSqlSelect As String
Dim sSqlFrom As String
Dim sSqlTree As String
Dim sSqlLastUseExclusion As String

    If Not pvbRecursion Then
        '-- Only travel one level
        '-------------------------------------------
        '-- Save tree to temp table #tmpTreeList_userid
        '-- note: union with original source data
        '-------------------------------------------
        sSqlSelect = _
            "Select a.object_id original_id, d.object_id, d.object_type, d.subtype, d.extended_type, d.project_id, d.mod_time, ' ' Original_Data, 0 TreeLevel "

        sSqlFrom = "FROM " & _
                    pvsSourceTableName & " a " & _
                    "join " & gtypSession.sDBPrefixMD & "dssmdobjdepn b " & _
                    " on a.project_id = b.project_id "
           
        If pvbDependency Then
            sSqlFrom = sSqlFrom & _
            " and a.object_id = b.depn_objid "     '-- Up Level -> Dependency List
        Else
            sSqlFrom = sSqlFrom & _
            " and a.object_id = b.object_id "    '-- Down Level -> Component List
        End If
        
        sSqlFrom = sSqlFrom & _
            "    join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d " & _
            "    on b.project_id = d.project_id "
        
        If pvbDependency Then
            sSqlFrom = sSqlFrom & _
            " and b.object_id = d.object_id "     '-- Up Level -> Dependency List
        Else
            sSqlFrom = sSqlFrom & _
            " and b.depn_objid = d.object_id "    '-- Down Level -> Component List
        End If
        
        If pvbDependency Then
            If pvsLastUseTurboDate <> "" Then
                '-- For Turbo Mode, only include Reports and Doc
                sSqlFrom = sSqlFrom & " WHERE d.object_type IN (3, 55)"
            Else
                sSqlFrom = sSqlFrom & " WHERE d.object_type " & gkMstrObjectResultExclusion 'gkMstrObjectDependencyExclusion
            End If
            
            '*mod* v2.1r11a Include shortcut used in Library from original source
            sSqlFrom = sSqlFrom & " UNION Select Distinct b.object_id original_id, d.object_id, d.object_type, d.subtype, d.extended_type, d.project_id, d.mod_time, ' ' Original_Data, 0 TreeLevel "
            sSqlFrom = sSqlFrom & _
                " FROM " & _
                pvsSourceTableName & " b " & _
                "join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d " & _
                  "on b.project_id = d.project_id " & _
                "join " & gtypSession.sDBPrefixMD & "dssmdlnkitem L1 " & _
                  "on L1.object_id = d.object_id and L1.project_id = d.project_id " & _
                 "and L1.object_type = 18 " & _
                "join " & gtypSession.sDBPrefixMD & "dssmdlnkitem L2 " & _
                  "on L1.LINKITEM_ID = L2.LINKITEM_ID and L1.project_id = L2.project_id " & _
                 "and L2.object_type = 55 " & _
                 "and L2.object_id = b.object_id and L2.project_id = b.project_id "
            sSqlFrom = sSqlFrom & " WHERE d.object_type " & gkMstrObjectResultExclusion
            
            If gbIncludeSourceTableDependentSearch() Then
                '*mod* v2.1r11d Table dependents search should include attributes that maps to source table which is not Lookup table (note: dssmdobjdepn only contains Attribute dependents for Lookup source table)
                sSqlFrom = sSqlFrom & " UNION Select Distinct b.object_id original_id, d.object_id, d.object_type, d.subtype, d.extended_type, d.project_id, d.mod_time, ' ' Original_Data, 0 TreeLevel "
                sSqlFrom = sSqlFrom & _
                    " FROM " & _
                    pvsSourceTableName & " b " & _
                    "    join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d " & _
                    "    on b.project_id = d.project_id " & _
                    "    JOIN " & gtypSession.sDBPrefixMD & "dssmdobjdepn c " & _
                    "        on b.project_id = c.project_id " & _
                    "        and b.object_id = c.object_id " & _
                    "        and c.depn_objid = d.object_id "
                sSqlFrom = sSqlFrom & " WHERE c.object_type in (15) and d.object_type in (12) "
            End If
        Else    '-- Components
            sSqlFrom = sSqlFrom & " WHERE d.object_type " & gsMstrObjectComponentResultExclusion
            
            '*mod* v2.1r11a Shortcut used in Library need to get components from Link table
            sSqlFrom = sSqlFrom & " UNION Select Distinct b.object_id original_id, d.object_id, d.object_type, d.subtype, d.extended_type, d.project_id, d.mod_time, ' ' Original_Data, 0 TreeLevel "
            sSqlFrom = sSqlFrom & _
                " FROM " & _
                pvsSourceTableName & " b " & _
                "join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d " & _
                  "on b.project_id = d.project_id " & _
                "join " & gtypSession.sDBPrefixMD & "dssmdlnkitem L1 " & _
                  "on L1.object_id = b.object_id and L1.project_id = b.project_id " & _
                 "and L1.object_type = 18 " & _
                "join " & gtypSession.sDBPrefixMD & "dssmdlnkitem L2 " & _
                  "on L1.LINKITEM_ID = L2.LINKITEM_ID and L1.project_id = L2.project_id " & _
                 "and L2.object_type = 55 " & _
                 "and L2.object_id = d.object_id and L2.project_id = d.project_id "
            sSqlFrom = sSqlFrom & " WHERE d.object_type " & gsMstrObjectComponentResultExclusion
        
            If gnComponentDetail <> nComponentDetailMin And gbIncludeSourceTableComponentSearch() Then             '-- Skip if component detail is Min or not specified in option
                '*mod* v2.1r11d component of attribute include all tables that mapped to attribute(previously only main table is included)
                sSqlFrom = sSqlFrom & " UNION Select Distinct b.object_id original_id, d.object_id, d.object_type, d.subtype, d.extended_type, d.project_id, d.mod_time, ' ' Original_Data, 1 TreeLevel "
                sSqlFrom = sSqlFrom & _
                    " FROM " & _
                    pvsSourceTableName & " b " & _
                    "    join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d " & _
                    "    on b.project_id = d.project_id " & _
                    "    JOIN " & gtypSession.sDBPrefixMD & "dssmdobjdepn c " & _
                    "        on b.project_id = c.project_id " & _
                    "        and b.object_id = c.depn_objid " & _
                    "        and c.object_id = d.object_id "
                sSqlFrom = sSqlFrom & " WHERE c.depnobj_type in (12) and d.object_type in (15)"
            End If
        End If
        
        sSqlFrom = sSqlFrom & _
            " UNION " & _
            "Select b.object_id original_id, d.object_id, d.object_type, d.subtype, d.extended_type, d.project_id, d.mod_time, 'Y' Original_Data, 0 TreeLevel " & _
            "FROM " & _
                    pvsSourceTableName & " b " & _
            "    join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d " & _
            "    ON b.object_id = d.object_id " & _
            "    and b.project_id = d.project_id "
            
        gsSQLtmpTreeNoHieararchy_NewSQL = gsSqlTmpTableCreation(pvsTargetTableName, sSqlSelect, sSqlFrom)
        Exit Function
        '*** Short Circuit Exit ***
    End If
    
    '-------------------------------------------
    '-- Get Recursive Tree
    '-------------------------------------------
    sSqlTree = "WithR Tree_List( " & _
        "            original_id, object_id, depn_objid, object_type, subtype, extended_type, project_id "
    
    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
        sSqlTree = sSqlTree & " ,Sentinel "
    ElseIf gtypSQLTmpTable.nDBID = nOracle Then
        '-- **notwork no need** sSqlTree = sSqlTree & " ,Sentinel " "
    ElseIf gtypSQLTmpTable.nDBID = nMySql Or gtypSQLTmpTable.nDBID = nPostgreSQL Then
        sSqlTree = sSqlTree & " ,Sentinel "
    End If
    
    sSqlTree = sSqlTree & ") AS " & _
        "( " & _
        "    SELECT " & _
        "        c.object_id Original_id " & _
        "        ,d.object_id "
    If pvbDependency Then
        sSqlTree = sSqlTree & "        ,d.object_id "
    Else
        sSqlTree = sSqlTree & "        ,Coalesce(L2.object_id, a.depn_objid) "
    End If
    sSqlTree = sSqlTree & _
        "        ,d.object_type, d.subtype, d.extended_type " & _
        "        ,c.project_id "
        
    '-- Recursive Loop Init
    sSqlTree = sSqlTree & gsSqlRecursiveLoopInit("c.object_id")

    If pvbDependency Then   '-- start from the next level : depn_objid looking for Object_ID
        If Not gbIncludeSourceTableDependentSearch() Then
            sSqlTree = sSqlTree & " FROM " & _
                "         " & gtypSession.sDBPrefixMD & "dssmdobjdepn a "
        Else
            '*mod* v2.1r11d Table dependents search should include attributes that maps to source table which is not Lookup table (note: dssmdobjdepn only contains Attribute dependents for Lookup source table)
            sSqlTree = sSqlTree & " FROM " & _
                "       (Select a.project_id, a.object_id, a.object_type, a.depn_objid, a.depnobj_type From " & gtypSession.sDBPrefixMD & "dssmdobjdepn a " & _
                "         join " & pvsSourceTableName & " c " & _
                "         ON a.depn_objid = c.object_id " & _
                "         And a.project_id = c.project_id " & _
                "       Union Select a.project_id, a.depn_objid object_id, a.depnobj_type object_type, a.object_id depn_objid, a.object_type depnobj_type From " & gtypSession.sDBPrefixMD & "dssmdobjdepn a " & _
                "         join " & pvsSourceTableName & " c " & _
                "         ON a.object_id = c.object_id " & _
                "         And a.project_id = c.project_id " & _
                "           WHERE a.object_type in (15) and a.depnobj_type in (12)) a "
        End If
        sSqlTree = sSqlTree & _
            "         join " & pvsSourceTableName & " c " & _
            "         ON a.depn_objid = c.object_id " & _
            "         and a.project_id = c.project_id " & _
            "         join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d " & _
            "         ON a.object_id = d.object_id " & _
            "         and c.project_id = d.project_id " & _
            "         where (a.object_type not in (12, 13, 15) or a.depnobj_type not in (12, 13)) "      '*mod* v2.1q ignore weak depdencies between attribute and fact (Fact entry level attributes)
            '*mod* v2.1r11d exclude logical table
            '"         where (a.object_type not in (12, 13) or a.depnobj_type not in (12, 13)) "      '*mod* v2.1q ignore weak depdencies between attribute and fact (Fact entry level attributes)
            '-- ^^^ Anchor
    
    Else
        sSqlTree = sSqlTree & " FROM " & _
                pvsSourceTableName & " c " & _
                "left join " & gtypSession.sDBPrefixMD & "dssmdlnkitem L1 " & _
                  "ON L1.object_id = c.object_id and L1.project_id = c.project_id " & _
                 "and L1.object_type = 18 " & _
                "left join " & gtypSession.sDBPrefixMD & "dssmdlnkitem L2 " & _
                  "ON L1.LINKITEM_ID = L2.LINKITEM_ID and L1.project_id = L2.project_id " & _
                 "and L2.object_type = 55 " & _
                "left join " & gtypSession.sDBPrefixMD & "dssmdobjdepn a " & _
                  "ON a.object_id = c.object_id " & _
                 "and a.project_id = c.project_id " & _
                "join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d " & _
                  "ON c.object_id = d.object_id and c.project_id = d.project_id " & _
               "where (a.object_type Is Null or a.object_type not in (12, 13) or a.depnobj_type not in (12, 13)) "      '*mod* v2.1q ignore weak depdencies between attribute and fact (Fact entry level attributes)
            '-- ^^^ Anchor
            '*mod* v2.1r11a Shortcut used in Library need to get components from Link table
            
    End If
    
    '-- recursion
    sSqlTree = sSqlTree & _
        "   UNION ALL  SELECT " & _
        "        p.Original_id " & _
        "        ,a.object_id " & _
        "        ,a.depn_objid " & _
        "        ,c.object_type, c.subtype, c.extended_type " & _
        "        ,a.project_id "
        
    '-- Recursive Loop tracking
    sSqlTree = sSqlTree & gsSqlRecursiveLoopTracking("a.object_id")
        
    sSqlTree = sSqlTree & _
        "    FROM " & _
        "        Tree_List p " & _
        "        JOIN " & gtypSession.sDBPrefixMD & "dssmdobjdepn a " & _
        "            ON p.project_id = a.project_id "
    
    sSqlTree = sSqlTree & _
        "        JOIN    " & gtypSession.sDBPrefixMD & "dssmdobjinfo c " & _
        "                ON a.object_id = c.object_id " & _
        "                and a.project_id = c.project_id "

    If pvbDependency Then
        
        '*mod* v2.1r10c use for FFSQL tables checking
        sSqlTree = sSqlTree & _
            "        JOIN    " & gtypSession.sDBPrefixMD & "dssmdobjinfo d " & _
            "                ON a.depn_objid = d.object_id " & _
            "                and a.project_id = d.project_id "
                      
    '        sSqlTree = sSqlTree & _
    '            "        JOIN    " & gtypSession.sDBPrefixMD & "dssmdobjdepn a2 " & _
    '            "                ON a.depn_objid = a2.object_id " & _
    '            "                and a.project_id = a2.project_id "
            sSqlTree = sSqlTree & _
            "  and p.object_id = a.depn_objid " & _
            "  and ((a.depnobj_type " & gkMstrObjectDependencyExclusion       '-- Up Level -> Dependency List
            '*mod* v2.1r10c include FFSQL tables
            sSqlTree = sSqlTree & ") or (d.object_type in (15,53) and d.subtype in (3840,13568) and d.extended_type in (3) "
            'sSqlTree = sSqlTree & " and a2.depnobj_type = 10 "
            sSqlTree = sSqlTree & ")) "
    Else
'        sSqlTree = sSqlTree & _
'            "        JOIN    " & gtypSession.sDBPrefixMD & "dssmdobjdepn a2 " & _
'            "                ON a.depn_objid = a2.object_id " & _
'            "                and a.project_id = a2.project_id "
        sSqlTree = sSqlTree & _
            "  and p.depn_objid = a.object_id " & _
            "  and ((c.object_type " & gsMstrObjectComponentExclusion & gkMstrObjectComponentExclusionMore
                                    
            '*mod* v2.1r10c
            '"  and a.object_type " & gsMstrObjectComponentExclusion        '-- Down Level -> Component List
            '*mod* v2.1r10c include FFSQL tables
            sSqlTree = sSqlTree & ") or (c.object_type in (15,53) and c.subtype in (3840,13568) and c.extended_type in (3) "
            'sSqlTree = sSqlTree & " and a2.depnobj_type = 10 "
            sSqlTree = sSqlTree & ")) "
    End If

    If pvbDependency Then
        '--*mod* v2.1o sSqlTree = sSqlTree & " WHERE c.object_type " & gkMstrObjectDependencyExclusion '--*mod* v2.1 cl 2/19/16 to make it work, we need to add to all dep exclusions '--& gkMstrObjectDependencyExclusionMore
        sSqlTree = sSqlTree & " WHERE (a.object_type not in (12, 13) or a.depnobj_type not in (12, 13)) "      '*mod* v2.1q ignore weak depdencies between attribute and fact (Fact entry level attributes)
    Else    '-- Components
        sSqlTree = sSqlTree & " WHERE (a.object_type not in (12, 13) or a.depnobj_type not in (12, 13)) "      '*mod* v2.1q ignore weak depdencies between attribute and fact (Fact entry level attributes)
    End If

    '-- Exclude object that are >= Last Use Date
    '*mod* v2.1d cl 3/5/16 logic not right. Can't filter base on Mod_time without checking EM data, ie. mod_time out of range but EM date could be in range.
'    If pvsLastUseDate <> "" Then
'
'        '-- Exclude object that are >= Last Use Date
'        If gtypSession.sDBPrefixEM = "N/A" Then
'            '-- Exclude object whose mod_time are >= Last Use Date
'            sSqlTree = sSqlTree & " and (c.mod_time < " & gsSQLDateConvert(pvsLastUseDate) & ") "
'        ElseIf 1 = 0 Then
'            '--** ^^^ BYPASSS because takes too long to run.  Filter out EM later
'            '-- Exclude object that are >= Execution Time
'            sSqlTree = sSqlTree & _
'                " and (c.mod_time < " & gsSQLDateConvert(pvsLastUseDate) & ") " & _
'                    " or " & _
'                    " (c.object_type = 55 and NOT Exists(select * " & _
'                        " FROM   " & gtypSession.sDBPrefixEM & "IS_DOC_FACT k " & _
'                        " join " & gtypSession.sDBPrefixEM & "IS_DOC a11a " & _
'                        " on (a11a.IS_DOC_ID = k.IS_DOC_ID) " & _
'                        " and (a11a.IS_PROJ_ID = k.IS_PROJ_ID) " & _
'                        " join " & gtypSession.sDBPrefixEM & "IS_PROJ a13 " & _
'                        " on (k.IS_PROJ_ID = a13.IS_PROJ_ID) " & _
'                        " where c.object_id = a11a.is_doc_guid and c.project_id = a13.IS_PROJ_GUID and k.IS_DOC_EXEC_ST_TS >= " & gsSQLDateConvert(pvsLastUseDate) & " " & _
'                        ")) " & _
'                    " or " & _
'                    " (c.object_type = 3 and NOT Exists(select * " & _
'                        " FROM   " & gtypSession.sDBPrefixEM & "IS_REP_FACT k " & _
'                        " join " & gtypSession.sDBPrefixEM & "IS_REP a11a " & _
'                        " on (a11a.IS_REP_ID = k.IS_REP_ID) " & _
'                        " and (a11a.IS_PROJ_ID = k.IS_PROJ_ID) " & _
'                        " join " & gtypSession.sDBPrefixEM & "IS_PROJ a13 " & _
'                        " on (k.IS_PROJ_ID = a13.IS_PROJ_ID) " & _
'                        " where c.object_id = a11a.IS_REP_guid and c.project_id = a13.IS_PROJ_GUID and k.IS_REP_EXEC_ST_TS >= " & gsSQLDateConvert(pvsLastUseDate) & " " & _
'                        "))) "
'        Else
'            sSqlTree = sSqlTree & " and (c.mod_time < " & gsSQLDateConvert(pvsLastUseDate) & ") "
'        End If
'    End If
    
    '-- Recursive Loop tracking
    sSqlTree = sSqlTree & gsSqlRecursiveLoopDetection("a.object_id", "")

    '-------------------------------------------
    '-- Save tree to temp table #tmpTreeList_userid
    '-------------------------------------------
    sSqlSelect = _
        "Select Distinct b.original_id, d.object_id, d.object_type, d.subtype, d.extended_type, d.project_id, d.mod_time, ' ' Original_Data, 0 TreeLevel "
    
    sSqlFrom = _
        " FROM " & _
        "    Tree_List b " & _
        "    join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d " & _
        "    on b.project_id = d.project_id "
       
    If pvbDependency Then
        sSqlFrom = sSqlFrom & _
        " and b.object_id = d.object_id "         '-- Up Level -> Dependency List
    Else
        sSqlFrom = sSqlFrom & _
        " and b.depn_objid = d.object_id "        '-- Down Level -> Component List
        '*mod* v1.1
        '--Include lowest level - columns/functions
        '--" and b.depn_objid = d.object_id "        '-- Down Level -> Component List
        '--Exclude lowest level - columns/functions
        '--" and b.object_id = d.object_id "        '-- Down Level -> Component List
    End If
    
    If pvbDependency Then
        If pvsLastUseTurboDate <> "" Then
            '-- For Turbo Mode, only include Reports and Doc
            sSqlFrom = sSqlFrom & " WHERE d.object_type IN (3, 55)"
        Else
            sSqlFrom = sSqlFrom & " WHERE d.object_type " & gkMstrObjectResultExclusion '--gkMstrObjectDependencyExclusion
        End If
        
        '*mod* v2.1r11a Include shortcut used in Library from Tree
        sSqlFrom = sSqlFrom & " UNION " & sSqlSelect '-- & " + 1 TreeLevel "
        sSqlFrom = sSqlFrom & _
            " FROM " & _
            "  Tree_List b " & _
            "    join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d " & _
            "    on b.project_id = d.project_id " & _
                "join " & gtypSession.sDBPrefixMD & "dssmdlnkitem L1 " & _
                    "on L1.object_id = d.object_id and L1.project_id = d.project_id " & _
                   "and L1.object_type = 18 " & _
                "join " & gtypSession.sDBPrefixMD & "dssmdlnkitem L2 " & _
                    "on L1.LINKITEM_ID = L2.LINKITEM_ID and L1.project_id = L2.project_id " & _
                   "and L2.object_type = 55 " & _
                   "and L2.object_id = b.object_id and L2.project_id = b.project_id "
        sSqlFrom = sSqlFrom & " WHERE d.object_type " & gkMstrObjectResultExclusion

        '*mod* v2.1r11a Include shortcut used in Library from original source
        sSqlFrom = sSqlFrom & " UNION Select Distinct b.object_id original_id, d.object_id, d.object_type, d.subtype, d.extended_type, d.project_id, d.mod_time, ' ' Original_Data, 0 TreeLevel "
        sSqlFrom = sSqlFrom & _
            " FROM " & _
            pvsSourceTableName & " b " & _
            "    join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d " & _
            "    on b.project_id = d.project_id " & _
                "join " & gtypSession.sDBPrefixMD & "dssmdlnkitem L1 " & _
                    "on L1.object_id = d.object_id and L1.project_id = d.project_id " & _
                   "and L1.object_type = 18 " & _
                "join " & gtypSession.sDBPrefixMD & "dssmdlnkitem L2 " & _
                    "on L1.LINKITEM_ID = L2.LINKITEM_ID and L1.project_id = L2.project_id " & _
                   "and L2.object_type = 55 " & _
                   "and L2.object_id = b.object_id and L2.project_id = b.project_id "
        sSqlFrom = sSqlFrom & " WHERE d.object_type " & gkMstrObjectResultExclusion
        
    Else    '-- Components
        sSqlFrom = sSqlFrom & " WHERE d.object_type " & gsMstrObjectComponentResultExclusion
        '*mod* v2.1r10e -- For Facts, get logical
        '*mod* v2.1r10g include all tables that mapped to attribute(previously only main table is included)
        If gnComponentDetail <> nComponentDetailMin And gbIncludeSourceTableComponentSearch() Then             '-- Skip if component detail is Min or not specified in option
            sSqlFrom = sSqlFrom & " UNION " & sSqlSelect '-- & " + 1 TreeLevel "
            sSqlFrom = sSqlFrom & _
                " FROM " & _
                "  Tree_List b " & _
                "    join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d " & _
                "    on b.project_id = d.project_id " & _
                "    JOIN " & gtypSession.sDBPrefixMD & "dssmdobjdepn c " & _
                "        on b.project_id = c.project_id " & _
                "        and (b.depn_objid = c.depn_objid or b.original_id = c.depn_objid) " & _
                "        and c.object_id = d.object_id "
            sSqlFrom = sSqlFrom & " WHERE c.depnobj_type in (12) and d.object_type = 15 "
        End If
                            
        '-- Physical Table -- not needed as physical table is inlcuded in later pass
'        sSqlFrom = sSqlFrom & " UNION " & sSqlSelect
'        sSqlFrom = sSqlFrom & _
'            " FROM " & _
'            "  Tree_List b " & _
'            "    JOIN " & gtypSession.sDBPrefixMD & "dssmdobjdepn c " & _
'            "        on b.project_id = c.project_id " & _
'            "        and b.depn_objid = c.object_id " & _
'            "    JOIN " & gtypSession.sDBPrefixMD & "dssmdobjdepn c1 " & _
'            "        on c.project_id = c1.project_id " & _
'            "        and c.depn_objid = c1.object_id " & _
'            "    join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d " & _
'            "    on c1.project_id = d.project_id " & _
'            "    and c1.depn_objid = d.object_id "
'        sSqlFrom = sSqlFrom & " WHERE c.object_type = 13 and c1.object_type = 15 and d.object_type = 53 and d.object_type " & gsMstrObjectComponentResultExclusion
    End If

    '-------------------------------------------
    '-- note: union with original source data in case of no leafs
    '-------------------------------------------
    sSqlFrom = sSqlFrom & _
        " UNION " & _
        "Select Distinct b.object_id, d.object_id, d.object_type, d.subtype, d.extended_type, d.project_id, d.mod_time, 'Y' Original_Data, 0 TreeLevel " & _
        "FROM " & _
        "    " & pvsSourceTableName & " b " & _
        "    join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d " & _
        "    ON b.object_id = d.object_id " & _
        "    and b.project_id = d.project_id "
    
    gsSQLtmpTreeNoHieararchy_NewSQL = gsSqlTmpTableCreationRecursion(pvsTargetTableName, sSqlSelect, sSqlFrom, sSqlTree, gkOracleRecursionSetting)

End Function

Public Function gsSQLtmpTreeHierarchy(ByVal pvsSourceTableName As String, ByVal pvsTargetTableName As String, ByVal pvbDependency As Boolean, ByVal pvbRecursion As Boolean) As String
    gsProcName = "Tree Walker3"
    gsSQLtmpTreeHierarchy = gsSQLtmpTreeHierarchy_SQL(pvsSourceTableName, pvsTargetTableName, pvbDependency, pvbRecursion)
End Function

Public Function gsSQLtmpTreeHierarchy_SQL(ByVal pvsSourceTableName As String, ByVal pvsTargetTableName As String, ByVal pvbDependency As Boolean, ByVal pvbRecursion As Boolean) As String
'----------------------------------------------------------------------------------------------------------
'Get Tree Hierarchy level and sequence #
'For both Recursive and non-recursive, must call gsSQLtmpTreeResult to determine parent object is widow or has children
'For recursive search, the gsSQLtmpTreeResult also get the top level row only; note this SQL returns duplicate rows because of sequence #
'
'-- Input Temp Table
'o  #tmpSource_userid
'o  #tmpTreeList_userid
'o  pvsDependencyTableName
'
'-- Output Temp table
'
'-----------------------------------------------------------------------------------------------------------
Dim sSqlSelect As String
Dim sSqlFrom As String
Dim sSqlTree As String

    If Not pvbRecursion Then
        '-- Only travel one level
        '-------------------------------------------
        '-- Save tree to temp table #tmpTreeList_userid
        '-- note: union with original source data
        '-------------------------------------------
 
        If pvbDependency Then
            sSqlSelect = _
                "Select a.object_id original_id, d.object_id, d.object_type, d.subtype, d.extended_type, d.project_id, d.mod_time, ' ' Original_Data, 1 TreeLevel "
    
            sSqlFrom = "FROM " & _
                        pvsSourceTableName & " a " & _
                        "join " & gtypSession.sDBPrefixMD & "dssmdobjdepn b " & _
                        " on a.project_id = b.project_id " & _
                        " and a.object_id = b.depn_objid "     '-- Up Level -> Dependency List : depn_objid looking for Object_ID
            sSqlFrom = sSqlFrom & _
                        "    join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d " & _
                        "    on b.project_id = d.project_id " & _
                        " and b.object_id = d.object_id "     '-- Up Level -> Dependency List
            sSqlFrom = sSqlFrom & " WHERE d.object_type " & gkMstrObjectResultExclusion 'gkMstrObjectDependencyExclusion
            
            '*mod* v2.1r11a Include shortcut used in Library from original source
            sSqlFrom = sSqlFrom & " UNION Select Distinct b.object_id original_id, d.object_id, d.object_type, d.subtype, d.extended_type, d.project_id, d.mod_time, ' ' Original_Data, 1 TreeLevel "
            sSqlFrom = sSqlFrom & _
                " FROM " & _
                pvsSourceTableName & " b " & _
                "join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d " & _
                  "on b.project_id = d.project_id " & _
                "join " & gtypSession.sDBPrefixMD & "dssmdlnkitem L1 " & _
                  "on L1.object_id = d.object_id and L1.project_id = d.project_id " & _
                 "and L1.object_type = 18 " & _
                "join " & gtypSession.sDBPrefixMD & "dssmdlnkitem L2 " & _
                  "on L1.LINKITEM_ID = L2.LINKITEM_ID and L1.project_id = L2.project_id " & _
                 "and L2.object_type = 55 " & _
                 "and L2.object_id = b.object_id and L2.project_id = b.project_id "
            sSqlFrom = sSqlFrom & " WHERE d.object_type " & gkMstrObjectResultExclusion
            
            If gbIncludeSourceTableDependentSearch() Then
                '*mod* v2.1r11d Table dependents search should include attributes that maps to source table which is not Lookup table (note: dssmdobjdepn only contains Attribute dependents for Lookup source table)
                sSqlFrom = sSqlFrom & " UNION Select Distinct b.object_id original_id, d.object_id, d.object_type, d.subtype, d.extended_type, d.project_id, d.mod_time, ' ' Original_Data, 1 TreeLevel "
                sSqlFrom = sSqlFrom & _
                    " FROM " & _
                    pvsSourceTableName & " b " & _
                    "    join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d " & _
                    "    on b.project_id = d.project_id " & _
                    "    JOIN " & gtypSession.sDBPrefixMD & "dssmdobjdepn c " & _
                    "        on b.project_id = c.project_id " & _
                    "        and b.object_id = c.object_id " & _
                    "        and c.depn_objid = d.object_id "
                sSqlFrom = sSqlFrom & " WHERE c.object_type in (15) and d.object_type in (12) "
            End If
        Else    '-- Components
            sSqlSelect = _
                "Select a.object_id original_id, d.object_id, d.object_type, d.subtype, d.extended_type, d.project_id, d.mod_time, ' ' Original_Data, 1 TreeLevel "
    
            sSqlFrom = "FROM " & _
                        pvsSourceTableName & " a " & _
                        "join " & gtypSession.sDBPrefixMD & "dssmdobjdepn b " & _
                        " on a.project_id = b.project_id " & _
                        " and a.object_id = b.object_id "    '-- Down Level -> Component List : Object_ID looking for depn_objid
            sSqlFrom = sSqlFrom & _
                        "    join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d " & _
                        "    on b.project_id = d.project_id " & _
                        " and b.depn_objid = d.object_id "    '-- Down Level -> Component List
            sSqlFrom = sSqlFrom & " WHERE d.object_type " & gsMstrObjectComponentResultExclusion
            
            '*mod* v2.1r11a Shortcut used in Library need to get components from Link table
            sSqlFrom = sSqlFrom & " UNION Select Distinct b.object_id original_id, d.object_id, d.object_type, d.subtype, d.extended_type, d.project_id, d.mod_time, ' ' Original_Data, 1 TreeLevel "
            sSqlFrom = sSqlFrom & _
                " FROM " & _
                pvsSourceTableName & " b " & _
                "join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d " & _
                  "on b.project_id = d.project_id " & _
                "join " & gtypSession.sDBPrefixMD & "dssmdlnkitem L1 " & _
                  "on L1.object_id = b.object_id and L1.project_id = b.project_id " & _
                 "and L1.object_type = 18 " & _
                "join " & gtypSession.sDBPrefixMD & "dssmdlnkitem L2 " & _
                  "on L1.LINKITEM_ID = L2.LINKITEM_ID and L1.project_id = L2.project_id " & _
                 "and L2.object_type = 55 " & _
                 "and L2.object_id = d.object_id and L2.project_id = d.project_id "
            sSqlFrom = sSqlFrom & " WHERE d.object_type " & gsMstrObjectComponentResultExclusion
        
            If gnComponentDetail <> nComponentDetailMin And gbIncludeSourceTableComponentSearch() Then             '-- Skip if component detail is Min or not specified in option
                '*mod* v2.1r11d component of attribute include all tables that mapped to attribute(previously only main table is included)
                sSqlFrom = sSqlFrom & " UNION Select Distinct b.object_id original_id, d.object_id, d.object_type, d.subtype, d.extended_type, d.project_id, d.mod_time, ' ' Original_Data, 1 TreeLevel "
                sSqlFrom = sSqlFrom & _
                    " FROM " & _
                    pvsSourceTableName & " b " & _
                    "    join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d " & _
                    "    on b.project_id = d.project_id " & _
                    "    JOIN " & gtypSession.sDBPrefixMD & "dssmdobjdepn c " & _
                    "        on b.project_id = c.project_id " & _
                    "        and b.object_id = c.depn_objid " & _
                    "        and c.object_id = d.object_id "
                sSqlFrom = sSqlFrom & " WHERE c.depnobj_type in (12) and d.object_type in (15)"
            End If
        End If
        
'*mod* v2.1e 3/6/16 cl: Must call gsSQLtmpTreeResult to determine TreeLevel = 0 or -1 (Has children or Widow)
'        sSqlFrom = sSqlFrom & _
'            " UNION " & _
'            "Select b.object_id original_id, d.object_id, d.object_type, d.subtype, d.extended_type, d.project_id, d.mod_time, 'Y' Original_Data, 0 TreeLevel " & _
'            "FROM " & _
'                    pvsSourceTableName & " b " & _
'            "    join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d " & _
'            "    ON b.object_id = d.object_id " & _
'            "    and b.project_id = d.project_id "
'
            
        gsSQLtmpTreeHierarchy_SQL = gsSqlTmpTableCreation(pvsTargetTableName, sSqlSelect, sSqlFrom)
        Exit Function
        '*** Short Circuit Exit ***
    End If
    
    '-------------------------------------------
    '-- Get Recursive Tree
    '-------------------------------------------
    sSqlTree = "WithR Tree_List( " & _
        "            TreeLevel, original_id, object_id, depn_objid, object_type, subtype, extended_type, project_id "
    
    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
        sSqlTree = sSqlTree & " ,Sentinel "
    ElseIf gtypSQLTmpTable.nDBID = nOracle Then
        '-- **notwork no need** sSqlTree = sSqlTree & " ,Sentinel " "
    ElseIf gtypSQLTmpTable.nDBID = nMySql Or gtypSQLTmpTable.nDBID = nPostgreSQL Then
        sSqlTree = sSqlTree & " ,Sentinel "
    End If
    
    sSqlTree = sSqlTree & ") AS " & _
        "( " & _
        "    SELECT " & _
        "        1 AS TreeLevel, c.object_id Original_id " & _
        "        ,d.object_id "
        '-- Starting Object ID
    If pvbDependency Then
        sSqlTree = sSqlTree & "        ,d.object_id "
    Else
        sSqlTree = sSqlTree & "        ,Coalesce(L2.object_id, a.depn_objid) "
    End If
        '-- Starting Object Type
    sSqlTree = sSqlTree & _
        "        ,d.object_type, d.subtype, d.extended_type " & _
        "        ,c.project_id "
        
    '-- Recursive Loop Init
    sSqlTree = sSqlTree & gsSqlRecursiveLoopInit("c.object_id")
    
    If pvbDependency Then   '-- start from the next level : depn_objid looking for Object_ID
        If Not gbIncludeSourceTableDependentSearch() Then
            sSqlTree = sSqlTree & " FROM " & _
                "         " & gtypSession.sDBPrefixMD & "dssmdobjdepn a "
        Else
            '*mod* v2.1r11d Table dependents search should include attributes that maps to source table which is not Lookup table (note: dssmdobjdepn only contains Attribute dependents for Lookup source table)
            sSqlTree = sSqlTree & " FROM " & _
                "       (Select a.project_id, a.object_id, a.object_type, a.depn_objid, a.depnobj_type From " & gtypSession.sDBPrefixMD & "dssmdobjdepn a " & _
                "         join " & pvsSourceTableName & " c " & _
                "         ON a.depn_objid = c.object_id " & _
                "         And a.project_id = c.project_id " & _
                "       Union Select a.project_id, a.depn_objid object_id, a.depnobj_type object_type, a.object_id depn_objid, a.object_type depnobj_type From " & gtypSession.sDBPrefixMD & "dssmdobjdepn a " & _
                "         join " & pvsSourceTableName & " c " & _
                "         ON a.object_id = c.object_id " & _
                "         And a.project_id = c.project_id " & _
                "           WHERE a.object_type in (15) and a.depnobj_type in (12)) a "
        End If

        sSqlTree = sSqlTree & _
            "         join " & pvsSourceTableName & " c " & _
            "         ON a.depn_objid = c.object_id " & _
            "         and a.project_id = c.project_id " & _
            "         join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d " & _
            "         ON a.object_id = d.object_id " & _
            "         and c.project_id = d.project_id " & _
            "         where (a.object_type not in (12, 13, 15) or a.depnobj_type not in (12, 13)) "      '*mod* v2.1q ignore weak depdencies between attribute and fact (Fact entry level attributes)
            '*mod* v2.1r11d exclude logical table
            '"         where (a.object_type not in (12, 13) or a.depnobj_type not in (12, 13)) "      '*mod* v2.1q ignore weak depdencies between attribute and fact (Fact entry level attributes)
            '-- ^^^ Anchor
    Else
        sSqlTree = sSqlTree & " FROM " & _
                pvsSourceTableName & " c " & _
                "left join " & gtypSession.sDBPrefixMD & "dssmdlnkitem L1 " & _
                  "ON L1.object_id = c.object_id and L1.project_id = c.project_id " & _
                 "and L1.object_type = 18 " & _
                "left join " & gtypSession.sDBPrefixMD & "dssmdlnkitem L2 " & _
                  "ON L1.LINKITEM_ID = L2.LINKITEM_ID and L1.project_id = L2.project_id " & _
                 "and L2.object_type = 55 " & _
                "left join " & gtypSession.sDBPrefixMD & "dssmdobjdepn a " & _
                  "ON a.object_id = c.object_id " & _
                 "and a.project_id = c.project_id " & _
                "join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d " & _
                  "ON c.object_id = d.object_id and c.project_id = d.project_id " & _
               "where (a.object_type Is Null or a.object_type not in (12, 13) or a.depnobj_type not in (12, 13)) "      '*mod* v2.1q ignore weak depdencies between attribute and fact (Fact entry level attributes)
            '-- ^^^ Anchor
            '*mod* v2.1r11a Shortcut used in Library need to get components from Link table
            
    End If
        '-- recursion
    sSqlTree = sSqlTree & _
        " UNION ALL  SELECT " & _
        "        p.TreeLevel + 1, p.Original_id " & _
        "        ,a.object_id " & _
        "        ,a.depn_objid " & _
        "        ,c.object_type, c.subtype, c.extended_type " & _
        "        ,a.project_id "
    
    '-- Recursive Loop tracking
    sSqlTree = sSqlTree & gsSqlRecursiveLoopTracking("a.object_id")
        
    sSqlTree = sSqlTree & _
        "    FROM " & _
        "        Tree_List p " & _
        "        JOIN " & gtypSession.sDBPrefixMD & "dssmdobjdepn a " & _
        "            ON p.project_id = a.project_id "
    
    sSqlTree = sSqlTree & _
        "        JOIN    " & gtypSession.sDBPrefixMD & "dssmdobjinfo c " & _
        "                ON a.object_id = c.object_id " & _
        "                and a.project_id = c.project_id "
        
    If pvbDependency Then
        
        '*mod* v2.1r10c use for FFSQL tables checking
        sSqlTree = sSqlTree & _
            "        JOIN    " & gtypSession.sDBPrefixMD & "dssmdobjinfo d " & _
            "                ON a.depn_objid = d.object_id " & _
            "                and a.project_id = d.project_id "
                      
    '        sSqlTree = sSqlTree & _
    '            "        JOIN    " & gtypSession.sDBPrefixMD & "dssmdobjdepn a2 " & _
    '            "                ON a.depn_objid = a2.object_id " & _
    '            "                and a.project_id = a2.project_id "
            sSqlTree = sSqlTree & _
            "  and p.object_id = a.depn_objid " & _
            "  and ((a.depnobj_type " & gkMstrObjectDependencyExclusion       '-- Up Level -> Dependency List
            '*mod* v2.1r10c include FFSQL tables
            sSqlTree = sSqlTree & ") or (d.object_type in (15,53) and d.subtype in (3840,13568) and d.extended_type in (3) "
            'sSqlTree = sSqlTree & " and a2.depnobj_type = 10 "
            sSqlTree = sSqlTree & ")) "
    Else
'        sSqlTree = sSqlTree & _
'            "        JOIN    " & gtypSession.sDBPrefixMD & "dssmdobjdepn a2 " & _
'            "                ON a.depn_objid = a2.object_id " & _
'            "                and a.project_id = a2.project_id "
        sSqlTree = sSqlTree & _
            "  and p.depn_objid = a.object_id " & _
            "  and ((c.object_type " & gsMstrObjectComponentExclusion & gkMstrObjectComponentExclusionMore
                                    
            '*mod* v2.1r10c
            '"  and a.object_type " & gsMstrObjectComponentExclusion        '-- Down Level -> Component List
            '*mod* v2.1r10c include FFSQL tables
            sSqlTree = sSqlTree & ") or (c.object_type in (15,53) and c.subtype in (3840,13568) and c.extended_type in (3) "
            'sSqlTree = sSqlTree & " and a2.depnobj_type = 10 "
            sSqlTree = sSqlTree & ")) "
    End If

    If pvbDependency Then
        '--*mod* v2.1o sSqlTree = sSqlTree & " WHERE c.object_type " & gkMstrObjectDependencyExclusion '--*mod* v2.1 cl 2/19/16 to make it work, we need to add to all dep exclusions '--& gkMstrObjectDependencyExclusionMore
        sSqlTree = sSqlTree & " WHERE (a.object_type not in (12, 13) or a.depnobj_type not in (12, 13)) "      '*mod* v2.1q ignore weak depdencies between attribute and fact (Fact entry level attributes)
    Else    '-- Components
        sSqlTree = sSqlTree & " WHERE (a.object_type not in (12, 13) or a.depnobj_type not in (12, 13)) "      '*mod* v2.1q ignore weak depdencies between attribute and fact (Fact entry level attributes)
    End If

    '-- Recursive Loop tracking
    sSqlTree = sSqlTree & gsSqlRecursiveLoopDetection("a.object_id", "p.treelevel")

    '-------------------------------------------
    '-- Save tree to temp table #tmpTreeList_userid
    '-------------------------------------------
    sSqlSelect = _
        "Select Distinct b.original_id, d.object_id, d.object_type, d.subtype, d.extended_type, d.project_id, d.mod_time, ' ' Original_Data, b.TreeLevel "
    sSqlFrom = _
        " FROM " & _
        "    Tree_List b " & _
        "    join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d " & _
        "    on b.project_id = d.project_id "
       
    If pvbDependency Then
        sSqlFrom = sSqlFrom & _
        " and b.object_id = d.object_id "         '-- Up Level -> Dependency List
    Else
        sSqlFrom = sSqlFrom & _
        " and b.depn_objid = d.object_id "        '-- Down Level -> Component List
        '*mod* v1.1
        '--Include lowest level - columns/functions
        '--" and b.depn_objid = d.object_id "        '-- Down Level -> Component List
        '--Exclude lowest level - columns/functions
        '--" and b.object_id = d.object_id "        '-- Down Level -> Component List
    End If
    
    If pvbDependency Then
        sSqlFrom = sSqlFrom & " WHERE d.object_type " & gkMstrObjectResultExclusion '--gkMstrObjectDependencyExclusion

        '*mod* v2.1r11a Include shortcut used in Library from Tree
        sSqlFrom = sSqlFrom & " UNION " & sSqlSelect & " + 1 TreeLevel "
        sSqlFrom = sSqlFrom & _
            " FROM " & _
            "  Tree_List b " & _
            "    join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d " & _
            "    on b.project_id = d.project_id " & _
                "join " & gtypSession.sDBPrefixMD & "dssmdlnkitem L1 " & _
                    "on L1.object_id = d.object_id and L1.project_id = d.project_id " & _
                   "and L1.object_type = 18 " & _
                "join " & gtypSession.sDBPrefixMD & "dssmdlnkitem L2 " & _
                    "on L1.LINKITEM_ID = L2.LINKITEM_ID and L1.project_id = L2.project_id " & _
                   "and L2.object_type = 55 " & _
                   "and L2.object_id = b.object_id and L2.project_id = b.project_id "
        sSqlFrom = sSqlFrom & " WHERE d.object_type " & gkMstrObjectResultExclusion

        '*mod* v2.1r11a Include shortcut used in Library from original source
        sSqlFrom = sSqlFrom & " UNION Select Distinct b.object_id original_id, d.object_id, d.object_type, d.subtype, d.extended_type, d.project_id, d.mod_time, ' ' Original_Data, 1 TreeLevel "
        sSqlFrom = sSqlFrom & _
            " FROM " & _
            pvsSourceTableName & " b " & _
            "    join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d " & _
            "    on b.project_id = d.project_id " & _
                "join " & gtypSession.sDBPrefixMD & "dssmdlnkitem L1 " & _
                    "on L1.object_id = d.object_id and L1.project_id = d.project_id " & _
                   "and L1.object_type = 18 " & _
                "join " & gtypSession.sDBPrefixMD & "dssmdlnkitem L2 " & _
                    "on L1.LINKITEM_ID = L2.LINKITEM_ID and L1.project_id = L2.project_id " & _
                   "and L2.object_type = 55 " & _
                   "and L2.object_id = b.object_id and L2.project_id = b.project_id "
        sSqlFrom = sSqlFrom & " WHERE d.object_type " & gkMstrObjectResultExclusion
        
    Else    '-- Components
        sSqlFrom = sSqlFrom & " WHERE d.object_type " & gsMstrObjectComponentResultExclusion
        '*mod* v2.1r10e -- For Facts, get logical
        '*mod* v2.1r10g include all tables that mapped to attribute(previously only main table is included)
        If gnComponentDetail <> nComponentDetailMin And gbIncludeSourceTableComponentSearch() Then             '-- Skip if component detail is Min or not specified in option
            sSqlFrom = sSqlFrom & " UNION " & sSqlSelect & " + 1 TreeLevel "
            sSqlFrom = sSqlFrom & _
                " FROM " & _
                "  Tree_List b " & _
                "    join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d " & _
                "    on b.project_id = d.project_id " & _
                "    JOIN " & gtypSession.sDBPrefixMD & "dssmdobjdepn c " & _
                "        on b.project_id = c.project_id " & _
                "        and (b.depn_objid = c.depn_objid or b.original_id = c.depn_objid) " & _
                "        and c.object_id = d.object_id "
            sSqlFrom = sSqlFrom & " WHERE c.depnobj_type in (12) and d.object_type = 15 "

        End If

        '-- Physical Table -- not needed as physical table is inlcuded in later pass
'        sSqlFrom = sSqlFrom & " UNION " & sSqlSelect & " + 2 TreeLevel "
'        sSqlFrom = sSqlFrom & _
'            " FROM " & _
'            "  Tree_List b " & _
'            "    JOIN " & gtypSession.sDBPrefixMD & "dssmdobjdepn c " & _
'            "        on b.project_id = c.project_id " & _
'            "        and b.depn_objid = c.object_id " & _
'            "    JOIN " & gtypSession.sDBPrefixMD & "dssmdobjdepn c1 " & _
'            "        on c.project_id = c1.project_id " & _
'            "        and c.depn_objid = c1.object_id " & _
'            "    join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d " & _
'            "    on c1.project_id = d.project_id " & _
'            "    and c1.depn_objid = d.object_id "
'        sSqlFrom = sSqlFrom & " WHERE c.object_type = 13 and c1.object_type = 15 and d.object_type = 53 and d.object_type " & gsMstrObjectComponentResultExclusion
    End If

    '-- note: moved below Union logic to TreeResult
    '-------------------------------------------
    '-- note: union with original source data in case of no leafs
    '-------------------------------------------
    
    gsSQLtmpTreeHierarchy_SQL = gsSqlTmpTableCreationRecursion(pvsTargetTableName, sSqlSelect, sSqlFrom, sSqlTree, gkOracleRecursionSetting)
End Function

Public Function gsSQLtmpTreeUpdate(ByVal pvsTableName As String) As String
'----------------------------------------------------------------------------------------------------------
'Update tree as follows
'*mod* v2.1r9k components should include DBTable
'
'-- Input Temp Table
'o  pvsTableName  - Tree table
'
'-- Output Temp table
'o  pvsTableName
'-----------------------------------------------------------------------------------------------------------
Dim sSqlSelect As String
Dim sSqlFrom As String

    gsProcName = "Tree Update"
    '*mod* v2.1r9k components should include DBTable
    sSqlSelect = sSqlFrom & _
        " INSERT INTO " & pvsTableName & _
        " Select Distinct c.original_id, d.object_id, d.object_type, d.subtype, d.extended_type, d.project_id, d.mod_time, ' ' Original_Data, c.TreeLevel+1 TreeLevel " & _
        " FROM " & _
        "         " & gtypSession.sDBPrefixMD & "dssmdobjdepn a " & _
        "         join " & pvsTableName & " c " & _
        "         ON a.object_id = c.object_id " & _
        "         and a.project_id = c.project_id " & _
        "         join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d " & _
        "         ON a.depn_objid = d.object_id " & _
        "         and c.project_id = d.project_id " & _
        "         where c.object_type = 15 and d.object_type = 53 "
gsSQLtmpTreeUpdate = sSqlSelect
End Function


Public Function gsSQLtmpTreeResult(ByVal pvsSourceTableName As String, ByVal pvsTargetTableName As String, ByVal pvsIntermTableName As String, ByVal pvbDependency As Boolean) As String
'----------------------------------------------------------------------------------------------------------
'Consolidate Tree Hierarchy level and sequence #
'Note that the result could still contain dup by design if orginal object is also a dependent/component
'
'-- Input Temp Table
'o  pvsSourceTableName  - original source
'o  pvsIntermTableName  - dependency tree
'
'-- Output Temp table
'o  pvsTargetTableName
'
'-----------------------------------------------------------------------------------------------------------
Dim sSqlSelect As String
Dim sSqlFrom As String

    gsProcName = "Tree Result"
    '*mod* v2.1p sSqlSelect = "select a.original_id, a.object_id, a.object_type, a.subtype, a.extended_type, a.project_id, a.mod_time, a.Original_Data "
    sSqlSelect = "select a.object_id, a.object_type, a.subtype, a.extended_type, a.project_id, a.mod_time, a.Original_Data "
    If pvbDependency Then
        sSqlSelect = sSqlSelect & ", MAX(a.TreeLevel) TreeLevel "
    Else
        sSqlSelect = sSqlSelect & ", MIN(a.TreeLevel) TreeLevel "
    End If
    sSqlFrom = sSqlFrom & _
        " from " & pvsIntermTableName & " a " & _
        " group by a.object_id, a.object_type, a.subtype, a.extended_type, a.project_id, a.mod_time, a.Original_Data "
        
'        " group by a.original_id, a.object_id, a.object_type, a.subtype, a.extended_type, a.project_id, a.mod_time, a.Original_Data "
'*mod* v2.1p
'        "Select Distinct b.object_id, d.object_id, d.object_type, d.subtype, d.extended_type, d.project_id, d.mod_time, 'Y' Original_Data, 0 TreeLevel  " & _

    '*mod* v2.1e 3/6/16 cl: TreeLevel = 0 --> original object has children
    sSqlFrom = sSqlFrom & _
        " UNION " & _
        "Select Distinct d.object_id, d.object_type, d.subtype, d.extended_type, d.project_id, d.mod_time, 'Y' Original_Data, 0 TreeLevel  " & _
        "FROM " & _
        "    " & pvsSourceTableName & " b " & _
        "    join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d " & _
        "    ON b.object_id = d.object_id " & _
        "    and b.project_id = d.project_id " & _
        "    join " & pvsIntermTableName & " e " & _
        "    ON e.original_id = b.object_id "

    '*mod* v2.1e 3/6/16 cl: TreeLevel = -1 --> original object is a widow
    sSqlFrom = sSqlFrom & _
        " UNION " & _
        "Select Distinct d.object_id, d.object_type, d.subtype, d.extended_type, d.project_id, d.mod_time, 'Y' Original_Data, -1 TreeLevel  " & _
        "FROM " & _
        "    " & pvsSourceTableName & " b " & _
        "    join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d " & _
        "    ON b.object_id = d.object_id " & _
        "    and b.project_id = d.project_id " & _
        "    left join " & pvsIntermTableName & " e " & _
        "    ON e.original_id = b.object_id " & _
        "WHERE e.original_id IS NULL "
        
    gsSQLtmpTreeResult = gsSqlTmpTableCreation(pvsTargetTableName, sSqlSelect, sSqlFrom)
    
End Function

Public Function gsSQLtmpTreeResultNetNotUsed(ByVal pvsSourceTableName As String, ByVal pvsTargetTableName As String, ByVal pvsIntermTableName As String, ByVal pvbDependency As Boolean) As String
'----------------------------------------------------------------------------------------------------------
'Consolidate Tree Hierarchy level and sequence #
'Note that the result contain no dup because original object is removed if it is also a dependent/component
'
'-- Input Temp Table
'o  pvsSourceTableName  - original source
'o  pvsIntermTableName  - dependency tree
'
'-- Output Temp table
'o  pvsTargetTableName
'
'-----------------------------------------------------------------------------------------------------------
Dim sSqlSelect As String
Dim sSqlFrom As String

    gsProcName = "Tree Sorting"
    '*mod* v2.1v don't include original object if it is in the dependency tree
    
    '*mod* v2.1p sSqlSelect = "select a.original_id, a.object_id, a.object_type, a.subtype, a.extended_type, a.project_id, a.mod_time, a.Original_Data "
    sSqlSelect = "select a.object_id, a.object_type, a.subtype, a.extended_type, a.project_id, a.mod_time, MAX(a.Original_Data) Original_Data "
    If pvbDependency Then
        sSqlSelect = sSqlSelect & ", MAX(a.TreeLevel) TreeLevel "
    Else
        sSqlSelect = sSqlSelect & ", MIN(a.TreeLevel) TreeLevel "
    End If
    sSqlFrom = "from (select a.object_id, a.object_type, a.subtype, a.extended_type, a.project_id, a.mod_time, a.Original_Data, a.TreeLevel "
    sSqlFrom = sSqlFrom & _
        " from " & pvsIntermTableName & " a "
'        " group by a.original_id, a.object_id, a.object_type, a.subtype, a.extended_type, a.project_id, a.mod_time, a.Original_Data "
'*mod* v2.1p
'        "Select Distinct b.object_id, d.object_id, d.object_type, d.subtype, d.extended_type, d.project_id, d.mod_time, 'Y' Original_Data, 0 TreeLevel  " & _

    '*mod* v2.1e 3/6/16 cl: TreeLevel = 0 --> original object has children
    sSqlFrom = sSqlFrom & _
        " UNION " & _
        "Select Distinct d.object_id, d.object_type, d.subtype, d.extended_type, d.project_id, d.mod_time, 'Y' Original_Data, 0 TreeLevel  " & _
        "FROM " & _
        "    " & pvsSourceTableName & " b " & _
        "    join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d " & _
        "    ON b.object_id = d.object_id " & _
        "    and b.project_id = d.project_id " & _
        "    join " & pvsIntermTableName & " e " & _
        "    ON e.original_id = b.object_id "

    '*mod* v2.1e 3/6/16 cl: TreeLevel = -1 --> original object is a widow
    sSqlFrom = sSqlFrom & _
        " UNION " & _
        "Select Distinct d.object_id, d.object_type, d.subtype, d.extended_type, d.project_id, d.mod_time, 'Y' Original_Data, -1 TreeLevel  " & _
        "FROM " & _
        "    " & pvsSourceTableName & " b " & _
        "    join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d " & _
        "    ON b.object_id = d.object_id " & _
        "    and b.project_id = d.project_id " & _
        "    left join " & pvsIntermTableName & " e " & _
        "    ON e.original_id = b.object_id " & _
        "WHERE e.original_id IS NULL "
    
    sSqlFrom = sSqlFrom & _
        ") a group by a.object_id, a.object_type, a.subtype, a.extended_type, a.project_id, a.mod_time "

    gsSQLtmpTreeResultNetNotUsed = gsSqlTmpTableCreation(pvsTargetTableName, sSqlSelect, sSqlFrom)
    
End Function

Public Function gsSQLtmpTreeNoHieararchy_Oracle_Notused(ByVal pvsSourceTableName As String, ByVal pvsTargetTableName As String, ByVal pvbDependency As Boolean, ByVal pvbRecursion As Boolean, Optional ByVal pvsLastUseDate As String) As String
Dim sSqlSelect As String
Dim sSqlFrom As String

    '-- Note the Oracle version is different in
    '-- 1. object_id is not the last parent as in NewSql
    '-- 2. Parent_ID is not in selection list
    sSqlSelect = "Select distinct " & _
            "  a.object_id Original_id" & _
            " , a.object_id " & _
            " , a.project_id " & _
            " ,  substr(substr(d.Folder_path, 1, instr(d.Folder_path, '\', -1, 1)-1), instr(d.Folder_path, '\', 2, 1)) Folder_Path "
            
    sSqlFrom = _
        "FROM " & pvsSourceTableName & " a " & _
            " JOIN ( " & _
                " SELECT object_id, project_id " & _
                   " , sys_connect_by_path(y.object_name, '\' ) folder_path " & _
                " FROM  " & gtypSession.sDBPrefixMD & "dssmdobjinfo y " & _
                " CONNECT BY PRIOR y.object_id = y.Parent_ID " & _
                   " and y.project_id in (select distinct x.project_id from " & pvsSourceTableName & " x) " & _
                " START WITH y.object_id IN " & _
                    " ( " & _
                    " SELECT object_id " & _
                    " FROM " & gtypSession.sDBPrefixMD & "dssmdobjinfo " & _
                    " WHERE object_id  = '" & gtypSession.sMstrProjectRootFolderID & "' " & _
                       " and object_type = 8 " & _
                        " and project_id in (select distinct x.project_id from " & pvsSourceTableName & " x) " & _
                    " ) " & _
                    " and y.project_id in (select distinct x.project_id from " & pvsSourceTableName & " x) " & _
            " ) d " & _
        " ON a.object_id = d.object_id " & _
        " and a.project_id = d.project_id"

'    sSqlFinal = gkOracleRecursionSetting & gsSqlTmpTableCreate(pvsTargetTableName) & sSqlSelect & sSqlFrom & ";"
        
    gsSQLtmpTreeNoHieararchy_Oracle_Notused = gsSqlTmpTableCreationRecursion(pvsTargetTableName, sSqlSelect, sSqlFrom, "", gkOracleRecursionSetting)
End Function

Public Function gsSQLtmpSibling(ByVal pvsSourceTableName As String, ByVal pvsTargetTableName As String, ByVal pvbRecursion As Boolean) As String
    gsProcName = "Get Sibling Objects"
    gsSQLtmpSibling = gsSQLtmpSibling_NewSQL(pvsSourceTableName, pvsTargetTableName, pvbRecursion)
End Function

Public Function gsSQLtmpSibling_NewSQL(ByVal pvsSourceTableName As String, ByVal pvsTargetTableName As String, ByVal pvbRecursion As Boolean) As String
'-- Input Temp Table
'o  #tmpSource_userid
'
'-- Output Temp table
'o  #tmpTreeList_userid
'-----------------------------------------------------------------------------------------------------------
Dim sSqlSelect As String
Dim sSqlFrom As String
Dim sSqlTree As String
    
    If Not pvbRecursion Then
        '-- Only travel one level
        '-------------------------------------------
        '-- Save tree to target temp table
        '-- note: NOT union with original source data
        '-------------------------------------------
        sSqlSelect = _
            " Select distinct a.object_id original_id, d.object_id, d.object_type, d.subtype, d.extended_type, d.project_id, d.mod_time, ' ' Original_Data, 0 TreeLevel "
        
        sSqlFrom = _
            " FROM " & _
                pvsSourceTableName & " a " & _
                "join " & gtypSession.sDBPrefixMD & "dssmdobjinfo c " & _
                "on a.project_id = c.project_id " & _
                "and a.object_id = c.object_id " & _
                "join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d " & _
                "on c.project_id = d.project_id " & _
                "and c.Parent_ID = d.Parent_ID " & _
            "WHERE   d.object_type " & gkMstrObjectResultExclusion

        gsSQLtmpSibling_NewSQL = gsSqlTmpTableCreation(pvsTargetTableName, sSqlSelect, sSqlFrom)
        Exit Function
        '*** Short Circuit Exit ***
    End If

    '-------------------------------------------
    '-- Get Recursive Tree
    '-------------------------------------------
    sSqlTree = "WithR Tree_List( " & _
        "            Parent_ID, project_id) AS " & _
        "( " & _
        "    SELECT distinct " & _
        "        a.Parent_ID, " & _
        "        c.project_id " & _
        "    FROM " & _
        "         " & gtypSession.sDBPrefixMD & "dssmdobjinfo a " & _
        "         join " & pvsSourceTableName & " c " & _
        "         ON a.object_id = c.object_id " & _
        "         and a.project_id = c.project_id " & _
        "    UNION ALL "
        '-- ^^^ Anchor - get all subfolders
        '-- recursion
    sSqlTree = sSqlTree & _
        "    SELECT " & _
        "        a.object_id Parent_ID, " & _
        "        a.project_id " & _
        "    FROM " & _
        "        Tree_List p " & _
        "        JOIN " & gtypSession.sDBPrefixMD & "dssmdobjinfo a " & _
        "            ON p.project_id = a.project_id " & _
        "               and p.Parent_ID = a.Parent_ID " & _
        "        WHERE   a.object_type =8" & _
        ") "
    '-------------------------------------------
    '-- Save tree to target temp table
    '-- note: NOT union with original source data in case of leaf
    '-------------------------------------------
    sSqlSelect = _
        "Select d.object_id original_id, d.object_id, d.object_type, d.subtype, d.extended_type, d.project_id, d.mod_time, ' ' Original_Data, 0 TreeLevel "
        
    sSqlFrom = _
        " FROM " & _
        "    Tree_List b " & _
        "    join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d " & _
        "    on b.project_id = d.project_id " & _
        "    and b.Parent_ID = d.Parent_ID " & _
        " WHERE   d.object_type " & gkMstrObjectResultExclusion
         
'-- '*mod* v1.1 12/10/2015 cl save Original_Data flag as 1 in Level1_Dep_Num column
'  to add support for Source, we need to union with original data.  This also means duplicates with source data.
'...
         
'    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
'        sSqlFinal = sSqlTree & sSqlSelect & gsSqlTmpTableCreate(pvsTargetTableName) & sSqlFrom & ";"
'    ElseIf gtypSQLTmpTable.nDBID = nOracle Then
'        sSqlFinal = gkOracleRecursionSetting & gsSqlTmpTableCreate(pvsTargetTableName) & sSqlTree & sSqlSelect & sSqlFrom & ";"
'    End If
                
    gsSQLtmpSibling_NewSQL = gsSqlTmpTableCreationRecursion(pvsTargetTableName, sSqlSelect, sSqlFrom, sSqlTree, gkOracleRecursionSetting)
End Function

Public Function gsSQLtmpParentFolderObjectsGet(ByVal pvsSourceTableName As String, ByVal pvsTargetTableName As String, ByVal pvbRecursion As Boolean) As String
'-- Get Parent folder objects but also include all objects in Source table
'-- Input Temp Table
'o  #tmpSource_userid
'
'-- Output Temp table
'o  #tmpTreeList_userid
'-----------------------------------------------------------------------------------------------------------
Dim sSqlSelect As String
Dim sSqlFrom As String
Dim sSqlTree As String
    
    gsProcName = "Get Parent Objects"
    If Not pvbRecursion Then
        '-- Only travel one level
        '-------------------------------------------
        '-- Save tree to target temp table
        '-- note: union with original source data
        '-------------------------------------------
        sSqlSelect = _
            " Select distinct a.object_id original_id, d.object_id, d.object_type, d.subtype, d.extended_type, d.project_id, d.mod_time, ' ' Original_Data, 0 TreeLevel "
        
        sSqlFrom = _
            " FROM " & _
                pvsSourceTableName & " a " & _
                "join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d1 " & _
                "on a.project_id = d1.project_id " & _
                "and a.object_id = d1.object_id " & _
                "join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d " & _
                "on d1.project_id = d.project_id " & _
                "and d1.Parent_ID = d.object_id " & _
            "WHERE   d.object_type " & gkMstrObjectResultExclusion

        sSqlFrom = sSqlFrom & _
                " UNION " & _
                "Select b.object_id, d.object_id, d.object_type, d.subtype, d.extended_type, d.project_id, d.mod_time, 'Y' Original_Data, 0 TreeLevel " & _
                "FROM " & _
                "    " & pvsSourceTableName & " b " & _
                "    join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d " & _
                "    ON b.object_id = d.object_id " & _
                "    and b.project_id = d.project_id; "
                
        gsSQLtmpParentFolderObjectsGet = gsSqlTmpTableCreation(pvsTargetTableName, sSqlSelect, sSqlFrom)
        Exit Function
        '*** Short Circuit Exit ***
    End If
End Function

Public Function gsSQLtmpChildFolderObjectsGet(ByVal pvsSourceTableName As String, ByVal pvsTargetTableName As String, ByVal pvbRecursion As Boolean, pvbFodlersOnly As Boolean) As String
'-- Get objects in folder, also include all objects in Source table
'-- Input Temp Table
'o  #tmpSource_userid
'
'-- Output Temp table
'o  #tmpTreeList_userid
'-----------------------------------------------------------------------------------------------------------
Dim sSqlSelect As String
Dim sSqlFrom As String
Dim sSqlTree As String
Dim sResultExclusion As String
    
    If pvbFodlersOnly Then
        sResultExclusion = gkMstrObjectResultFoldersOnly
    Else
        sResultExclusion = gkMstrObjectResultExclusion
    End If
    
    gsProcName = "Get Children Objects"
    If Not pvbRecursion Then
        '-- Only travel one level
        '-------------------------------------------
        '-- Save tree to target temp table
        '-- note: union with original source data
        '-------------------------------------------
        sSqlSelect = _
            " Select distinct a.object_id original_id, d.object_id, d.object_type, d.subtype, d.extended_type, d.project_id, d.mod_time, ' ' Original_Data, 0 TreeLevel "
        
        sSqlFrom = _
            " FROM " & _
                pvsSourceTableName & " a " & _
                "join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d " & _
                "on a.project_id = d.project_id " & _
                "and a.object_id = d.Parent_ID " & _
            "WHERE   d.object_type " & sResultExclusion
        
        sSqlFrom = sSqlFrom & _
                " UNION " & _
                "Select b.object_id, d.object_id, d.object_type, d.subtype, d.extended_type, d.project_id, d.mod_time, 'Y' Original_Data, 0 TreeLevel " & _
                "FROM " & _
                "    " & pvsSourceTableName & " b " & _
                "    join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d " & _
                "    ON b.object_id = d.object_id " & _
                "    and b.project_id = d.project_id; "
                
        gsSQLtmpChildFolderObjectsGet = gsSqlTmpTableCreation(pvsTargetTableName, sSqlSelect, sSqlFrom)
        Exit Function
        '*** Short Circuit Exit ***
    End If

    '-------------------------------------------
    '-- Get Recursive Tree
    '-------------------------------------------
    sSqlTree = "WithR Tree_List( " & _
        "            Parent_ID, project_id) AS " & _
        "( " & _
        "    SELECT distinct " & _
        "        a.object_id Parent_ID, " & _
        "        a.project_id " & _
        "    FROM " & pvsSourceTableName & " a " & _
        "    UNION ALL "
        '-- ^^^ Anchor - get all subfolders
        '-- recursion
    sSqlTree = sSqlTree & _
        "    SELECT " & _
        "        a.object_id Parent_ID, " & _
        "        a.project_id " & _
        "    FROM " & _
        "        Tree_List p " & _
        "        JOIN " & gtypSession.sDBPrefixMD & "dssmdobjinfo a " & _
        "            ON p.project_id = a.project_id " & _
        "               and p.Parent_ID = a.Parent_ID " & _
        "        WHERE   a.object_type =8" & _
        ") "
    '-------------------------------------------
    '-- Save tree to target temp table
    '-- note: union with original source data in case of leaf
    '-------------------------------------------
    sSqlSelect = _
        "Select d.object_id original_id, d.object_id, d.object_type, d.subtype, d.extended_type, d.project_id, d.mod_time, ' ' Original_Data, 0 TreeLevel "
        
    sSqlFrom = _
        " FROM " & _
        "    Tree_List b " & _
        "    join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d " & _
        "    on b.project_id = d.project_id " & _
        "    and b.Parent_ID = d.Parent_ID " & _
        " WHERE   d.object_type " & sResultExclusion

'    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
'        sSqlFinal = sSqlTree & sSqlSelect & gsSqlTmpTableCreate(pvsTargetTableName) & sSqlFrom
'    ElseIf gtypSQLTmpTable.nDBID = nOracle Then
'        sSqlFinal = gkOracleRecursionSetting & gsSqlTmpTableCreate(pvsTargetTableName) & sSqlTree & sSqlSelect & sSqlFrom
'    End If
    
    sSqlFrom = sSqlFrom & _
            " UNION " & _
            "Select b.object_id, d.object_id, d.object_type, d.subtype, d.extended_type, d.project_id, d.mod_time, 'Y' Original_Data, 0 TreeLevel " & _
            "FROM " & _
            "    " & pvsSourceTableName & " b " & _
            "    join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d " & _
            "    ON b.object_id = d.object_id " & _
            "    and b.project_id = d.project_id "
                          
    gsSQLtmpChildFolderObjectsGet = gsSqlTmpTableCreationRecursion(pvsTargetTableName, sSqlSelect, sSqlFrom, sSqlTree, gkOracleRecursionSetting)
End Function

Public Function gsSQLtmpEmptyFoldersGet(ByVal pvsSourceTableName As String, ByVal pvsTargetTableName As String) As String
'-- Gets empty folders only
'-- Input Temp Table
'o  none
'
'-- Output Temp table
'o  none
'-----------------------------------------------------------------------------------------------------------
Dim sSqlSelect As String
Dim sSqlFrom As String
    
    sSqlSelect = _
        " Select a.* "
    
    sSqlFrom = _
        " FROM " & _
            pvsSourceTableName & " a " & _
            "join " & gtypSession.sDBPrefixMD & "dssmdobjinfo b " & _
            "on a.project_id = b.project_id " & _
            "and a.object_id = b.object_id " & _
            "left join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d " & _
            "on b.project_id = d.project_id " & _
            "and b.object_id = d.Parent_ID " & _
        "WHERE b.object_type=8 and d.object_id IS NULL "

    gsSQLtmpEmptyFoldersGet = gsSqlTmpTableCreation(pvsTargetTableName, sSqlSelect, sSqlFrom)

End Function

Public Function gsSQLChildrenCountSql(ByVal pvsParentID As String, ByVal pvsProjectID As String) As String
'-- Generate sql to count total children in all subfolders for a given folder
'-----------------------------------------------------------------------------------------------------------
Dim sSqlSelect As String
Dim sSqlTree As String
    
    gsProcName = "Count Children Objects"
    '-------------------------------------------
    '-- Get Recursive Tree
    '-------------------------------------------
    sSqlTree = "WithR Tree_List( " & _
        "            Parent_ID, project_id) AS " & _
        "( "
    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
         sSqlTree = sSqlTree & " SELECT cast('" & gsPadGUIDdataForSQL(pvsParentID) & "' as UniqueIdentifier) Parent_ID, cast('" & pvsProjectID & "' as UniqueIdentifier) project_id "
    ElseIf gtypSQLTmpTable.nDBID = nOracle Then
        sSqlTree = sSqlTree & " SELECT '" & pvsParentID & "' Parent_ID, '" & pvsProjectID & "' project_id From DUAL "
    ElseIf gtypSQLTmpTable.nDBID = nMySql Or gtypSQLTmpTable.nDBID = nPostgreSQL Then
        sSqlTree = sSqlTree & " SELECT '" & pvsParentID & "' Parent_ID, '" & pvsProjectID & "' project_id "
    End If
        
    sSqlTree = sSqlTree & _
        "    UNION ALL "
        '-- ^^^ Anchor - get all subfolders
        '-- recursion
    sSqlTree = sSqlTree & _
        "    SELECT " & _
        "        a.object_id Parent_ID, " & _
        "        a.project_id " & _
        "    FROM " & _
        "        Tree_List p " & _
        "        JOIN " & gtypSession.sDBPrefixMD & "dssmdobjinfo a " & _
        "            ON p.project_id = a.project_id " & _
        "               and p.Parent_ID = a.Parent_ID " & _
        "        WHERE   a.object_type =8" & _
        ") "

    sSqlSelect = sSqlTree & _
                " Select count(*) FROM Tree_List"

     gsSQLChildrenCountSql = sSqlSelect
End Function

Public Function gsSQLtmpLatestEM(ByVal pvsSourceTableName As String, ByVal pvsTargetTableName As String, ByVal pvsLastUseTurboDate As String, ByVal pvbFromLastUse As Boolean, Optional ByVal pvdtpLastUseOptToDate As String, Optional ByVal pvchkLastUseOptIMExclusion As Integer, Optional ByVal pvtxtLastUseOptUserExclusion As String, Optional ByVal pvtxtLastUseOptUserInclusion As String, Optional ByVal pvdtpLastUseOptFromDate As String, Optional ByVal pvchkLastUseOptActiveUsers As Integer) As String
    gsProcName = "Get Latest EM Data"
    If gtypSession.sDBPrefixEM <> "N/A" Then
        If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then '-- Use Outer Apply syntax
                gsSQLtmpLatestEM = msSQLtmpLatestEMSqlServer(pvsSourceTableName, pvsTargetTableName, pvsLastUseTurboDate, pvbFromLastUse, pvdtpLastUseOptToDate, pvchkLastUseOptIMExclusion, pvtxtLastUseOptUserExclusion, pvtxtLastUseOptUserInclusion, pvdtpLastUseOptFromDate, pvchkLastUseOptActiveUsers)
        ElseIf gtypSQLTmpTable.nDBID = nOracle Or gtypSQLTmpTable.nDBID = nMySql Or gtypSQLTmpTable.nDBID = nPostgreSQL Then
                gsSQLtmpLatestEM = msSQLtmpLatestEMOracle(pvsSourceTableName, pvsTargetTableName, pvsLastUseTurboDate, pvbFromLastUse, pvdtpLastUseOptToDate, pvchkLastUseOptIMExclusion, pvtxtLastUseOptUserExclusion, pvtxtLastUseOptUserInclusion, pvdtpLastUseOptFromDate, pvchkLastUseOptActiveUsers)
        End If
    End If
End Function

Public Function gsSQLtmpLastUseByEM(ByVal pvsSourceTableName As String, ByVal pvsTargetTableName As String, ByVal pvsTreeTableName As String, ByVal pvsEMTableName As String, ByVal pvsLastUseDate As String) As String
    gsProcName = "Get Last Use Data"
    If gtypSession.sDBPrefixEM <> "N/A" Then
        If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then '-- Use Outer Apply syntax
                gsSQLtmpLastUseByEM = msSQLtmpLastUseByEMSqlServer(pvsSourceTableName, pvsTargetTableName, pvsTreeTableName, pvsEMTableName, pvsLastUseDate)
        ElseIf gtypSQLTmpTable.nDBID = nOracle Or gtypSQLTmpTable.nDBID = nMySql Or gtypSQLTmpTable.nDBID = nPostgreSQL Then
                gsSQLtmpLastUseByEM = msSQLtmpLastUseByEMOracle(pvsSourceTableName, pvsTargetTableName, pvsTreeTableName, pvsEMTableName, pvsLastUseDate)
        End If
    End If
End Function

Public Function gsSQLtmpLastUseByChange(ByVal pvsSourceTableName As String, ByVal pvsTargetTableName As String, ByVal pvsTreeTableName As String, ByVal pvsEMTableName As String) As String
    gsProcName = "Get Last Change Data"
    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then '-- Use Outer Apply syntax
            gsSQLtmpLastUseByChange = msSQLtmpLastUseByChangeSqlServer(pvsSourceTableName, pvsTargetTableName, pvsTreeTableName, pvsEMTableName)
    ElseIf gtypSQLTmpTable.nDBID = nOracle Or gtypSQLTmpTable.nDBID = nMySql Or gtypSQLTmpTable.nDBID = nPostgreSQL Then
            gsSQLtmpLastUseByChange = msSQLtmpLastUseByChangeOracle(pvsSourceTableName, pvsTargetTableName, pvsTreeTableName, pvsEMTableName)
    End If
End Function

Public Function gsSQLtmpLastUseByChangeCIA(ByVal pvsSourceTableName As String, ByVal pvsTargetTableName As String, ByVal pvsTreeTableName As String, ByVal pvsEMTableName As String) As String
    gsProcName = "Get Last Change Data"
    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then '-- Use Outer Apply syntax
            gsSQLtmpLastUseByChangeCIA = msSQLtmpLastUseByChangeSqlServerCIA(pvsSourceTableName, pvsTargetTableName, pvsTreeTableName, pvsEMTableName)
    ElseIf gtypSQLTmpTable.nDBID = nOracle Or gtypSQLTmpTable.nDBID = nMySql Or gtypSQLTmpTable.nDBID = nPostgreSQL Then
            gsSQLtmpLastUseByChangeCIA = msSQLtmpLastUseByChangeOracleCIA(pvsSourceTableName, pvsTargetTableName, pvsTreeTableName, pvsEMTableName)
    End If
End Function

Public Function gsSQLtmpLastUseByChangeObjectFinder(ByVal pvsSourceTableName As String, ByVal pvsTargetTableName As String, ByVal pvsTreeTableName As String, ByVal pvsEMTableName As String, ByVal pvsLastModifiedDate As String) As String
    gsProcName = "Get Last Change Data"
    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then '-- Use Outer Apply syntax
            gsSQLtmpLastUseByChangeObjectFinder = msSQLtmpLastUseByChangeObjectFinderSqlServer(pvsSourceTableName, pvsTargetTableName, pvsTreeTableName, pvsEMTableName, pvsLastModifiedDate)
    ElseIf gtypSQLTmpTable.nDBID = nOracle Or gtypSQLTmpTable.nDBID = nMySql Or gtypSQLTmpTable.nDBID = nPostgreSQL Then
            gsSQLtmpLastUseByChangeObjectFinder = msSQLtmpLastUseByChangeObjectFinderOracle(pvsSourceTableName, pvsTargetTableName, pvsTreeTableName, pvsEMTableName, pvsLastModifiedDate)
    End If
End Function

Public Function gsSQLtmpTurboLastUse(ByVal pvsSourceTableName As String, ByVal pvsTargetTableName As String, ByVal pvsEMTableName As String) As String
Dim sSqlSelect As String
Dim sSqlFrom As String

    '-- Final Select Clause
    sSqlSelect = _
            " select distinct x1.* "
            '", a.object_name Last_Use_Object_Name, x3.last_Use_User_Name, x3.Last_Use_Time, x3.last_Use_Object_ID " & _
            '", a.object_type last_Use_Object_Type_Num, a.subtype last_Use_Object_SubType_Num, a.extended_type last_Use_Extended_Type_Num "
    '-- Final From Clause
    sSqlFrom = " from " & pvsSourceTableName & " x1 " & _
            " left join " & pvsEMTableName & " x3 on x1.object_id = x3.original_id and x1.project_id = x3.project_id " & _
            " where x3.original_id IS NULL "
            '" join " & gtypSession.sDBPrefixMD & "dssmdobjinfo a on a.object_id = x3.object_id and a.project_id = x3.project_id"

    gsSQLtmpTurboLastUse = gsSqlTmpTableCreation(pvsTargetTableName, sSqlSelect, sSqlFrom)
End Function

Public Function gsSQLtmpTurboEM(ByVal pvsSourceTableName As String, ByVal pvsTargetTableName As String, ByVal pvsLastUseTurboDate As String) As String
Dim sSqlFrom As String
Dim sSqlSelect As String

        gsProcName = "Get Last Use (Turbo) Data"
        '-------------------------------------------
        '-- Save Report/Doc >= turbo date into #tmpEM_userid
        '-------------------------------------------
        '-- Trim tree for reports >= Last Use Date
        '*mod* v2.1r7t - make sure to convert GUID Object IDs for Sql Server
        sSqlSelect = "SELECT * "
        sSqlFrom = _
            "FROM (" & _
            "select  DISTINCT c.* " & _
            "from    " & gtypSession.sDBPrefixEM & "IS_REP a11 " & _
            "        join " & gtypSession.sDBPrefixEM & "IS_REP_FACT x " & _
            "         on  a11.IS_REP_ID = x.IS_REP_ID and x.IS_PROJ_ID = a11.IS_PROJ_ID " & _
             "       join  " & gtypSession.sDBPrefixEM & "IS_PROJ    a13 " & _
            "        on    (a11.IS_PROJ_ID = a13.IS_PROJ_ID) " & _
            "        JOIN  " & pvsSourceTableName & " c " & _
            "        on   a11.IS_REP_GUID = " & gsPurifyGUIDsqlFromSQL("c.object_id") & _
            "        and c.object_type = 3 " & _
            "        and a13.IS_PROJ_GUID = " & gsPurifyGUIDsqlFromSQL("c.project_id") & _
            "        and x.day_id2 >= " & gsSQLDateConvert(pvsLastUseTurboDate)

        '-- Trim tree for documents >= Last Use Date
        '*mod* v2.1r7t - make sure to convert GUID Object IDs for Sql Server
        sSqlFrom = sSqlFrom & _
            "UNION " & _
            "select  DISTINCT c.* " & _
            "from    " & gtypSession.sDBPrefixEM & "IS_DOC a11 " & _
            "        join " & gtypSession.sDBPrefixEM & "IS_DOC_FACT x " & _
            "        on  a11.IS_DOC_ID = x.IS_DOC_ID and x.IS_PROJ_ID = a11.IS_PROJ_ID " & _
            "        join  " & gtypSession.sDBPrefixEM & "IS_PROJ a13 " & _
            "        on    (a11.IS_PROJ_ID = a13.IS_PROJ_ID) " & _
            "        JOIN  " & pvsSourceTableName & " c " & _
            "        on   a11.IS_DOC_GUID = " & gsPurifyGUIDsqlFromSQL("c.object_id") & _
            "        and c.object_type = 55 " & _
            "        and a13.IS_PROJ_GUID = " & gsPurifyGUIDsqlFromSQL("c.project_id") & _
            "        and x.day_id2 >= " & gsSQLDateConvert(pvsLastUseTurboDate) & _
            ") x"
        
    gsSQLtmpTurboEM = gsSqlTmpTableCreation(pvsTargetTableName, sSqlSelect, sSqlFrom)
End Function

Public Function gsSQLtmpRangeEM(ByVal pvsSourceTableName As String, ByVal pvsTargetTableName As String, ByVal pvsReportRunDateFrom As String, ByVal pvsReportRunDateTo As String) As String
'*mod* v2.1r9k
' No source table if user does not input any filtering criteria; in that case, take reports base on execution date
'
Dim sSqlFrom As String
Dim sSqlSelect As String

        gsProcName = "Get EM Data"
        '-------------------------------------------
        '-- Save Report/Doc >= turbo date into #tmpEM_userid
        '-------------------------------------------
        '-- Trim tree for reports >= Last Use Date
        '    "        --and c.object_type = 3 " & _
        '
        '*mod* v2.1r7t - make sure to convert GUID Object IDs for Sql Server
        sSqlSelect = "SELECT * "
        sSqlFrom = _
            "FROM (" & _
            "select  DISTINCT " & gsPadGUIDsqlForSQL("a11.IS_REP_GUID") & " object_id, " & gsPadGUIDsqlForSQL("a13.IS_PROJ_GUID") & " project_id  " & _
            "from    " & gtypSession.sDBPrefixEM & "IS_REP a11 " & _
            "        join " & gtypSession.sDBPrefixEM & "IS_REP_FACT x " & _
            "         on  a11.IS_REP_ID = x.IS_REP_ID and x.IS_PROJ_ID = a11.IS_PROJ_ID " & _
             "       join  " & gtypSession.sDBPrefixEM & "IS_PROJ    a13 " & _
            "        on    (a11.IS_PROJ_ID = a13.IS_PROJ_ID) "
            '*mod* v2.1r9k
            If pvsSourceTableName <> "" Then
                sSqlFrom = sSqlFrom & _
                    "        JOIN  " & pvsSourceTableName & " c " & _
                    "        on   a11.IS_REP_GUID = " & gsPurifyGUIDsqlFromSQL("c.object_id") & _
                    "        and a13.IS_PROJ_GUID = " & gsPurifyGUIDsqlFromSQL("c.project_id")
            End If
            If pvsReportRunDateFrom <> "" Then
                sSqlFrom = sSqlFrom & _
                    "        and x.day_id2 >= " & gsSQLDateConvert(pvsReportRunDateFrom)
            End If
            If pvsReportRunDateTo <> "" Then
                sSqlFrom = sSqlFrom & _
                    " and x.day_id2 <= " & gsSQLDateConvert(pvsReportRunDateTo)
            End If
        '-- Trim tree for documents >= Last Use Date
        '            "        and c.object_type = 55 " & _
        '
        '*mod* v2.1r7t - make sure to convert GUID Object IDs for Sql Server
        sSqlFrom = sSqlFrom & _
            "UNION " & _
            "select  DISTINCT " & gsPadGUIDsqlForSQL("a11.IS_DOC_GUID") & " object_id, " & gsPadGUIDsqlForSQL("a13.IS_PROJ_GUID") & " project_id " & _
            "from    " & gtypSession.sDBPrefixEM & "IS_DOC a11 " & _
            "        join " & gtypSession.sDBPrefixEM & "IS_DOC_FACT x " & _
            "        on  a11.IS_DOC_ID = x.IS_DOC_ID and x.IS_PROJ_ID = a11.IS_PROJ_ID " & _
            "        join  " & gtypSession.sDBPrefixEM & "IS_PROJ a13 " & _
            "        on    (a11.IS_PROJ_ID = a13.IS_PROJ_ID) "
            '*mod* v2.1r9k
            If pvsSourceTableName <> "" Then
                sSqlFrom = sSqlFrom & _
                    "        JOIN  " & pvsSourceTableName & " c " & _
                    "        on   a11.IS_DOC_GUID = " & gsPurifyGUIDsqlFromSQL("c.object_id") & _
                    "        and a13.IS_PROJ_GUID = " & gsPurifyGUIDsqlFromSQL("c.project_id")
            End If
            If pvsReportRunDateFrom <> "" Then
                sSqlFrom = sSqlFrom & _
                    "        and x.day_id2 >= " & gsSQLDateConvert(pvsReportRunDateFrom)
            End If
            If pvsReportRunDateTo <> "" Then
                sSqlFrom = sSqlFrom & _
                    " and x.day_id2 <= " & gsSQLDateConvert(pvsReportRunDateTo)
            End If
            sSqlFrom = sSqlFrom & _
                ") x"
        
    gsSQLtmpRangeEM = gsSqlTmpTableCreation(pvsTargetTableName, sSqlSelect, sSqlFrom)
End Function
Public Function gsSQLtmpEMusage(ByVal pvsSourceTableName As String, ByVal pvsTargetTableName As String, Optional ByVal pvdtpLastUseOptToDate As String, Optional ByVal pvchkLastUseOptIMExclusion As Integer, Optional ByVal pvtxtLastUseOptUserExclusion As String, Optional ByVal pvtxtLastUseOptUserInclusion As String, Optional ByVal pvdtpLastUseOptFromDate As String, Optional ByVal pvchkLastUseOptActiveUsers As Integer) As String
Dim sSqlEM As String
Dim sSqlEMDocFrom As String
Dim sSqlEMRepFrom As String
Dim sSqlEMSession As String
Dim sSqlEMRepSelect As String
Dim sSqlEMDocSelect As String

    '--v2.1r11g
    gsProcName = "Get EM Usage Data"
    '-------------------------------------------
    '-- Save Report/Doc >= turbo date into #tmpEM_userid
    '-------------------------------------------
    '-- Trim tree for reports >= Last Use Date
    '    "        --and c.object_type = 3 " & _
    '
    '*mod* v2.1r7t - make sure to convert GUID Object IDs for Sql Server

    sSqlEMRepSelect = " select  DISTINCT a11.IS_REP_ID  IS_OBJ_ID " & _
        "    , a11.IS_REP_NAME  IS_REP_NAME " & _
        "    , a14.EM_USER_NAME  EM_USER_NAME " & _
        "    , k.IS_REP_EXEC_ST_TS  IS_REP_EXEC_ST_TS " & _
        "    , a11.IS_REP_GUID IS_GUID " & _
        "    , a13.IS_PROJ_GUID IS_PROJ_GUID "
        
    '*mod* v2.1r7t - make sure to convert GUID Object IDs for Sql Server
    sSqlEMRepFrom = sSqlEMRepFrom & _
        "from    " & gtypSession.sDBPrefixEM & "IS_REP a11 " & _
        "        join " & gtypSession.sDBPrefixEM & "IS_REP_FACT k " & _
        "         on  a11.IS_REP_ID = k.IS_REP_ID and k.IS_PROJ_ID = a11.IS_PROJ_ID " & _
         "       join  " & gtypSession.sDBPrefixEM & "IS_PROJ    a13 " & _
        "        on    (a11.IS_PROJ_ID = a13.IS_PROJ_ID) " & _
        "        JOIN  " & pvsSourceTableName & " c " & _
        "        on   a11.IS_REP_GUID = " & gsPurifyGUIDsqlFromSQL("c.object_id") & _
        "        and a13.IS_PROJ_GUID = " & gsPurifyGUIDsqlFromSQL("c.project_id") & _
        "    join    " & gtypSession.sDBPrefixEM & "EM_USER    a14 " & _
        "      on    (k.EM_USER_ID = a14.EM_USER_ID) "
        
    Dim sFromLastUseSQL As String
    sFromLastUseSQL = ""
    If Nz(pvdtpLastUseOptToDate) <> "" Then
        sFromLastUseSQL = sFromLastUseSQL & _
            " k.day_id2 <= " & gsSQLDateConvert(pvdtpLastUseOptToDate) & " And "
            '--" k.IS_REP_EXEC_ST_TS <= TO_DATE('" & pvdtpLastUseOptToDate & " 12:59:59 pm', 'mm-dd-yyyy hh:mi:ss pm') And "
    End If
    If Nz(pvdtpLastUseOptFromDate) <> "" Then
        sFromLastUseSQL = sFromLastUseSQL & _
            " k.day_id2 >= " & gsSQLDateConvert(pvdtpLastUseOptFromDate) & " And "
            '--" k.IS_REP_EXEC_ST_TS >= TO_DATE('" & pvdtpLastUseOptFromDate & "',  'mm-dd-yyyy') And "
    End If
    If Nz(pvchkLastUseOptIMExclusion) <> 0 Then
        sSqlEMSession = _
            "           left join " & gtypSession.sDBPrefixEM & "IS_SESSION a15 " & _
            "           on (k.IS_SESSION_ID = a15.IS_SESSION_ID " & _
            "           and k.DAY_ID2 = a15.DAY_ID) "
    
        sFromLastUseSQL = sFromLastUseSQL & _
            " (a15.EM_CONNECT_SOURCE <> 26 or a15.EM_CONNECT_SOURCE IS NULL) and "
    End If
    If Nz(pvtxtLastUseOptUserExclusion) <> "" And Nz(pvtxtLastUseOptUserInclusion) = "" Then
        sFromLastUseSQL = sFromLastUseSQL & _
            " upper(a14.EM_USER_ABBREV) not in (" & UCase(gsTokenizeCommaList(pvtxtLastUseOptUserExclusion)) & ") And "
    End If
    If Nz(pvtxtLastUseOptUserInclusion) <> "" Then
        sFromLastUseSQL = sFromLastUseSQL & _
            " upper(a14.EM_USER_ABBREV)  in (" & UCase(gsTokenizeCommaList(pvtxtLastUseOptUserInclusion)) & ") And "
    End If
    If Nz(pvchkLastUseOptActiveUsers) <> 0 Then
        sFromLastUseSQL = sFromLastUseSQL & _
            " a14.EM_ENABLED = 1 and "
    End If
    
    sSqlEMRepFrom = sSqlEMRepFrom & sSqlEMSession
    If sFromLastUseSQL <> "" Then
        sSqlEMRepFrom = sSqlEMRepFrom & " where " & Left(sFromLastUseSQL, Len(sFromLastUseSQL) - 4)
    End If

    sSqlEMDocFrom = sSqlEMRepFrom
    sSqlEMDocFrom = Replace(sSqlEMDocFrom, "IS_REP", "IS_DOC")
    '--v2.1r11g sSqlEMDocFrom = Replace(sSqlEMDocFrom, "c.object_type = 3", "c.object_type = 55")
    sSqlEMDocSelect = sSqlEMRepSelect
    sSqlEMDocSelect = Replace(sSqlEMDocSelect, "a11.IS_REP", "a11.IS_DOC")
    sSqlEMDocSelect = Replace(sSqlEMDocSelect, "a12.IS_REP", "a12.IS_DOC")
    sSqlEMDocSelect = Replace(sSqlEMDocSelect, "k.IS_REP", "k.IS_DOC")
    
    sSqlEM = " from ( " & sSqlEMRepSelect & sSqlEMRepFrom & _
    "UNION " & _
    sSqlEMDocSelect & sSqlEMDocFrom & ") x "
            
    gsSQLtmpEMusage = gsSqlTmpTableCreation(pvsTargetTableName, "Select * ", sSqlEM)
End Function

Private Function msSQLtmpLatestEMSqlServer(ByVal pvsSourceTableName As String, ByVal pvsTargetTableName As String, ByVal pvsLastUseTurboDate As String, ByVal pvbFromLastUse As Boolean, Optional ByVal pvdtpLastUseOptToDate As String, Optional ByVal pvchkLastUseOptIMExclusion As Integer, Optional ByVal pvtxtLastUseOptUserExclusion As String, Optional ByVal pvtxtLastUseOptUserInclusion As String, Optional ByVal pvdtpLastUseOptFromDate As String, Optional ByVal pvchkLastUseOptActiveUsers As Integer) As String
'v2.1r9e Added following Last Use options
'  As Of Date
'  IM Exclusion
'  User Exclusion
'
'-- Input Temp Table
'o  #tmpSource_userid
'
'-- Output Temp table
'o  #tmpEM_userid
'o  #tmpLastUse_userid
'-----------------------------------------------------------------------------------------------------------
Dim sSqlEM As String
Dim sSqlEMDocFrom As String
Dim sSqlEMRepFrom As String
Dim sSqlEMSession As String
Dim sSqlEMRepSelect As String
Dim sSqlEMDocSelect As String

    '-------------------------------------------
    '-- Save Report/Doc last execution info #tmpEM_userid
    '-------------------------------------------
    '-- get last report execution date
    '*mod* v2.1r7t - make sure to convert GUID Object IDs for Sql Server
    sSqlEMRepSelect = _
        "select  DISTINCT a11.IS_REP_ID  IS_OBJ_ID " & _
        "    , a11.IS_REP_NAME  IS_REP_NAME " & _
        "    , x.EM_USER_NAME  EM_USER_NAME " & _
        "    , x.IS_REP_EXEC_ST_TS  IS_REP_EXEC_ST_TS " & _
        "    , a11.IS_REP_GUID IS_GUID " & _
        "    , a13.IS_PROJ_GUID IS_PROJ_GUID "
        
    sSqlEMRepFrom = _
        "from    " & gtypSession.sDBPrefixEM & "IS_REP a11 " & _
        " OUTER APPLY (SELECT TOP 1 x.IS_REP_ID, x.IS_PROJ_ID, x.IS_REP_JOB_ID, a14.EM_USER_NAME, x.IS_REP_EXEC_ST_TS " & _
                     " FROM " & gtypSession.sDBPrefixEM & "IS_REP_FACT x " & _
                     "     join    " & gtypSession.sDBPrefixEM & "EM_USER    a14 " & _
                     "       on    (x.EM_USER_ID = a14.EM_USER_ID) "

        Dim sFromLastUseSQL As String
        sFromLastUseSQL = ""
        If pvbFromLastUse Then
            If Nz(pvdtpLastUseOptToDate) <> "" Then
                sFromLastUseSQL = sFromLastUseSQL & _
                    " x.day_id2 <= " & gsSQLDateConvert(pvdtpLastUseOptToDate) & " And "
            End If
            If Nz(pvdtpLastUseOptFromDate) <> "" Then
                sFromLastUseSQL = sFromLastUseSQL & _
                    " x.day_id2 >= " & gsSQLDateConvert(pvdtpLastUseOptFromDate) & " And "
            End If
            If Nz(pvchkLastUseOptIMExclusion) <> 0 Then
                sSqlEMSession = _
                    "           left join " & gtypSession.sDBPrefixEM & "IS_SESSION a15 " & _
                    "           on (x.IS_SESSION_ID = a15.IS_SESSION_ID " & _
                    "           and x.DAY_ID2 = a15.DAY_ID) "
            
                sFromLastUseSQL = sFromLastUseSQL & _
                    " (a15.EM_CONNECT_SOURCE <> 26 or a15.EM_CONNECT_SOURCE IS NULL) and "
            End If
            If Nz(pvtxtLastUseOptUserExclusion) <> "" And Nz(pvtxtLastUseOptUserInclusion) = "" Then
                sFromLastUseSQL = sFromLastUseSQL & _
                    " upper(a14.EM_USER_ABBREV) not in (" & UCase(gsTokenizeCommaList(pvtxtLastUseOptUserExclusion)) & ") And "
            End If
            If Nz(pvtxtLastUseOptUserInclusion) <> "" Then
                sFromLastUseSQL = sFromLastUseSQL & _
                    " upper(a14.EM_USER_ABBREV) in (" & UCase(gsTokenizeCommaList(pvtxtLastUseOptUserInclusion)) & ") And "
            End If
            
            If Nz(pvchkLastUseOptActiveUsers) <> 0 Then
                sFromLastUseSQL = sFromLastUseSQL & _
                    " a14.EM_ENABLED = 1 and "
            End If
        End If
    
        If pvsLastUseTurboDate <> "" Then
                sSqlEMRepFrom = sSqlEMRepFrom & sSqlEMSession & " where x.day_id2 > " & gsSQLDateConvert(pvsLastUseTurboDate) & " and " & sFromLastUseSQL
        Else
                sSqlEMRepFrom = sSqlEMRepFrom & sSqlEMSession & " where " & sFromLastUseSQL
        End If
        sSqlEMRepFrom = sSqlEMRepFrom & _
                         " a11.IS_REP_ID = x.IS_REP_ID and x.IS_PROJ_ID = a11.IS_PROJ_ID "

    '*mod* v2.1r7t - make sure to convert GUID Object IDs for Sql Server
    sSqlEMRepFrom = sSqlEMRepFrom & _
        "           order by x.IS_REP_EXEC_ST_TS DESC " & _
        "       ) x " & _
        "        join  " & gtypSession.sDBPrefixEM & "IS_PROJ    a13 " & _
        "        on    (a11.IS_PROJ_ID = a13.IS_PROJ_ID) " & _
        "        JOIN  " & pvsSourceTableName & " c " & _
        "        on   a11.IS_REP_GUID = " & gsPurifyGUIDsqlFromSQL("c.object_id") & _
        "        and c.object_type = 3 " & _
        "        and a13.IS_PROJ_GUID = " & gsPurifyGUIDsqlFromSQL("c.project_id")

    sSqlEMDocFrom = sSqlEMRepFrom
    sSqlEMDocFrom = Replace(sSqlEMDocFrom, "IS_REP", "IS_DOC")
    sSqlEMDocFrom = Replace(sSqlEMDocFrom, "c.object_type = 3", "c.object_type = 55")
    sSqlEMDocSelect = sSqlEMRepSelect
    sSqlEMDocSelect = Replace(sSqlEMDocSelect, "a11.IS_REP", "a11.IS_DOC")
    sSqlEMDocSelect = Replace(sSqlEMDocSelect, "x.IS_REP", "x.IS_DOC")
    
    sSqlEM = _
        " SELECT * INTO " & pvsTargetTableName & " FROM (" & _
             sSqlEMRepSelect & sSqlEMRepFrom & _
                "UNION " & _
             sSqlEMDocSelect & sSqlEMDocFrom & ") z "
             
    msSQLtmpLatestEMSqlServer = sSqlEM

End Function
 
Private Function msSQLtmpLastUseByEMSqlServer(ByVal pvsSourceTableName As String, ByVal pvsTargetTableName As String, ByVal pvsTreeTableName As String, ByVal pvsEMTableName As String, ByVal pvsLastUseDate As String) As String
Dim sSqlLastUse As String
        '-------------------------------------------
        '-- Save last execution info #tmpLastUse_userid
        '-------------------------------------------
        '-- create Last Use table with EM data
        '*mod* v2.1t Added last use date check to reduce resultset, Target table does not contain objects that have no EM or not qualify for Last Use Date
        '*mod* v2.1w v2.1t is wrong
        '*mod* v2.1r7t - make sure to convert GUID Object IDs for Sql Server

        sSqlLastUse = _
            " SELECT a.*, b.Last_Use_Object_Name, b.last_Use_User_Name, b.Last_Use_Time " & _
                    ", b.Last_Use_Object_ID, b.Last_Use_Project_ID " & _
                    "INTO " & pvsTargetTableName & " FROM " & pvsSourceTableName & " a " & _
                    "OUTER APPLY (SELECT TOP 1  b.IS_REP_NAME Last_Use_Object_Name, ' ' + b.EM_USER_NAME last_Use_User_Name, b.IS_REP_EXEC_ST_TS Last_Use_Time " & _
                                ", " & gsPadGUIDsqlForSQL("b.IS_GUID") & " Last_Use_Object_ID, " & gsPadGUIDsqlForSQL("b.IS_PROJ_GUID") & " Last_Use_Project_ID " & _
                                "FROM " & pvsEMTableName & " b " & _
                                "join " & pvsTreeTableName & " c " & _
                                "on b.IS_GUID = " & gsPurifyGUIDsqlFromSQL("c.object_id") & " and b.IS_PROJ_GUID = " & gsPurifyGUIDsqlFromSQL("c.project_id") & _
                                "WHERE c.original_id = a.Object_ID And c.Project_ID = a.Project_ID " & _
                                "order by b.IS_REP_EXEC_ST_TS DESC " & _
                            ") b where b.Last_Use_Time is not null;"
                            '*mod* v2.1t b.Last_Use_Time is not null
                            '*mod* v2.1w is wrong. Need return all -- ") b where b.Last_Use_Time < " & gsSQLDateConvert(pvsLastUseDate) & "; "
    msSQLtmpLastUseByEMSqlServer = sSqlLastUse
    
End Function

Private Function msSQLtmpLastUseByChangeSqlServerCIA(ByVal pvsSourceTableName As String, ByVal pvsTargetTableName As String, ByVal pvsTreeTableName As String, ByVal pvsEMTableName As String) As String
'-- Input Temp Table
'o  #tmpSource_userid
'
'-- Output Temp table
'o  #tmpEM_userid
'o  #tmpLastUse_userid
'-----------------------------------------------------------------------------------------------------------
Dim sSqlLastUse As String

    If gtypSession.sDBPrefixEM <> "N/A" Then

        '-------------------------------------------
        '-- Add Last Modified Date info for those missing EM data
        '-------------------------------------------
        '*mod* v2.1r16a Must hardcode Source Data to n; otherwise, gets NOT NULL error in SQLServer
        sSqlLastUse = "INSERT INTO " & pvsTargetTableName & "(object_id, project_id, Last_Use_Object_Name, last_Use_User_Name, Last_Use_Time, Last_Use_Object_ID, Last_Use_Project_ID, Original_Data) " & _
            " SELECT a.object_id, a.project_id, c.object_name Last_Use_Object_Name, '~' + d.object_name last_Use_User_Name, b.Last_Use_Time " & _
                    ", b.Last_Use_Object_ID, b.Last_Use_Project_ID, 'n' " & _
                    "FROM " & pvsSourceTableName & " a " & _
                    "Left Join " & pvsTargetTableName & " x on a.object_id = x.object_id and a.project_id = x.project_id " & _
                    "OUTER APPLY (SELECT TOP 1  b1.mod_time Last_Use_Time " & _
                                ", b1.object_id Last_Use_Object_ID, b1.project_id Last_Use_Project_ID " & _
                                "FROM " & pvsTreeTableName & " b1 " & _
                                "WHERE b1.original_id = a.Object_ID And b1.Project_ID = a.Project_ID " & _
                                    "order by b1.mod_time DESC " & _
            ") b " & _
            "join " & gtypSession.sDBPrefixMD & "dssmdobjinfo c " & _
            "on b.Last_Use_Object_ID = c.object_id and b.Last_Use_Project_ID = c.project_id " & _
            "join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d  " & _
            "on c.owner_id = d.object_id " & _
            "WHERE x.Last_Use_Time IS NULL; "
            '--^^ use modified date if no data found in EM
    Else
        '-------------------------------------------
        '-- Save last modified info #tmpLastUse_userid
        '-------------------------------------------
        sSqlLastUse = _
            " SELECT a.object_id, a.project_id, c.object_name Last_Use_Object_Name, '~' + d.object_name last_Use_User_Name, b.Last_Use_Time " & _
                    ", b.Last_Use_Object_ID, b.Last_Use_Project_ID " & _
                    "INTO " & pvsTargetTableName & " FROM " & pvsSourceTableName & " a " & _
                    "OUTER APPLY (SELECT TOP 1  b1.mod_time Last_Use_Time " & _
                                ", b1.object_id Last_Use_Object_ID, b1.project_id Last_Use_Project_ID " & _
                                "FROM " & pvsTreeTableName & " b1 " & _
                                "WHERE b1.original_id = a.Object_ID And b1.Project_ID = a.Project_ID " & _
                                "order by b1.mod_time DESC " & _
            ") b " & _
            "join " & gtypSession.sDBPrefixMD & "dssmdobjinfo c " & _
            "on b.Last_Use_Object_ID = c.object_id and b.Last_Use_Project_ID = c.project_id " & _
            "join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d  " & _
            "on c.owner_id = d.object_id ;"

    End If

    msSQLtmpLastUseByChangeSqlServerCIA = sSqlLastUse

End Function

Private Function msSQLtmpLastUseByChangeSqlServer(ByVal pvsSourceTableName As String, ByVal pvsTargetTableName As String, ByVal pvsTreeTableName As String, ByVal pvsEMTableName As String) As String
'-- Input Temp Table
'o  #tmpSource_userid
'
'-- Output Temp table
'o  #tmpEM_userid
'o  #tmpLastUse_userid
'-----------------------------------------------------------------------------------------------------------
Dim sSqlLastUse As String

    If gtypSession.sDBPrefixEM <> "N/A" Then

        '-------------------------------------------
        '-- Add Last Modified Date info for those missing EM data
        '-------------------------------------------
        sSqlLastUse = "INSERT INTO " & pvsTargetTableName & "(id, object_id, project_id, Last_Use_Object_Name, last_Use_User_Name, Last_Use_Time, Last_Use_Object_ID, Last_Use_Project_ID) " & _
            " SELECT a.id, a.object_id, a.project_id, c.object_name Last_Use_Object_Name, '~' + d.object_name last_Use_User_Name, b.Last_Use_Time " & _
                    ", b.Last_Use_Object_ID, b.Last_Use_Project_ID " & _
                    "FROM " & pvsSourceTableName & " a " & _
                    "Left Join " & pvsTargetTableName & " x on a.object_id = x.object_id and a.project_id = x.project_id " & _
                    "OUTER APPLY (SELECT TOP 1  b1.mod_time Last_Use_Time " & _
                                ", b1.object_id Last_Use_Object_ID, b1.project_id Last_Use_Project_ID " & _
                                "FROM " & pvsTreeTableName & " b1 " & _
                                "WHERE b1.original_id = a.Object_ID And b1.Project_ID = a.Project_ID " & _
                                    "order by b1.mod_time DESC " & _
            ") b " & _
            "join " & gtypSession.sDBPrefixMD & "dssmdobjinfo c " & _
            "on b.Last_Use_Object_ID = c.object_id and b.Last_Use_Project_ID = c.project_id " & _
            "join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d  " & _
            "on c.owner_id = d.object_id " & _
            "WHERE x.Last_Use_Time IS NULL; "
            '--^^ use modified date if no data found in EM
    Else
        '-------------------------------------------
        '-- Save last modified info #tmpLastUse_userid
        '-------------------------------------------
        sSqlLastUse = _
            " SELECT a.*, c.object_name Last_Use_Object_Name, '~' + d.object_name last_Use_User_Name, b.Last_Use_Time " & _
                    ", b.Last_Use_Object_ID, b.Last_Use_Project_ID " & _
                    "INTO " & pvsTargetTableName & " FROM " & pvsSourceTableName & " a " & _
                    "OUTER APPLY (SELECT TOP 1  b1.mod_time Last_Use_Time " & _
                                ", b1.object_id Last_Use_Object_ID, b1.project_id Last_Use_Project_ID " & _
                                "FROM " & pvsTreeTableName & " b1 " & _
                                "WHERE b1.original_id = a.Object_ID And b1.Project_ID = a.Project_ID " & _
                                "order by b1.mod_time DESC " & _
            ") b " & _
            "join " & gtypSession.sDBPrefixMD & "dssmdobjinfo c " & _
            "on b.Last_Use_Object_ID = c.object_id and b.Last_Use_Project_ID = c.project_id " & _
            "join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d  " & _
            "on c.owner_id = d.object_id ;"

    End If

    msSQLtmpLastUseByChangeSqlServer = sSqlLastUse

End Function

Private Function msSQLtmpLastUseByChangeObjectFinderSqlServer(ByVal pvsSourceTableName As String, ByVal pvsTargetTableName As String, ByVal pvsTreeTableName As String, ByVal pvsEMTableName As String, ByVal pvsLastModifiedDate As String) As String
'-- Input Temp Table
'o  #tmpSource_userid
'
'-- Output Temp table
'o  #tmpEM_userid
'o  #tmpLastUse_userid
'-----------------------------------------------------------------------------------------------------------
Dim sSqlLastUse As String

    If gtypSession.sDBPrefixEM <> "N/A" Then

        '-------------------------------------------
        '-- Add Last Modified Date info for those missing EM data
        '-------------------------------------------
        '*mod* v2.1t If object exists in EM, then don't use Mod Time
        '*mod* v2.1v v2.1t not work in case reports used as filter.  Add objects not in EM and not in Target. Note there may be objects in EM but not qualified (and need to exclude here).
        '--"Left Join " & pvsEMTableName & " x on a.object_id = x.is_guid and a.project_id = x.is_proj_guid "
        sSqlLastUse = "INSERT INTO " & pvsTargetTableName & " (object_id, project_id, object_type, Last_Use_Object_Name, last_Use_User_Name, Last_Use_Time, Last_Use_Object_ID, Last_Use_Project_ID) " & _
            " SELECT a.object_id, a.project_id, a.object_type, c.object_name Last_Use_Object_Name, '~' + d.object_name last_Use_User_Name, b.Last_Use_Time " & _
                    ", b.Last_Use_Object_ID, b.Last_Use_Project_ID " & _
                    "FROM " & pvsSourceTableName & " a " & _
                    "Left Join " & pvsEMTableName & " x on " & gsPurifyGUIDsqlFromSQL("a.object_id") & " = x.is_guid and " & gsPurifyGUIDsqlFromSQL("a.project_id") & " = x.is_proj_guid " & _
                    "Left Join " & pvsTargetTableName & " x2 on a.object_id = x2.object_id and a.project_id = x2.project_id " & _
                    "OUTER APPLY (SELECT TOP 1  b1.mod_time Last_Use_Time " & _
                                ", b1.object_id Last_Use_Object_ID, b1.project_id Last_Use_Project_ID " & _
                                "FROM " & pvsTreeTableName & " b1 " & _
                                "WHERE b1.original_id = a.Object_ID And b1.Project_ID = a.Project_ID " & _
                                    "order by b1.mod_time DESC " & _
            ") b " & _
            "join " & gtypSession.sDBPrefixMD & "dssmdobjinfo c " & _
            "on b.Last_Use_Object_ID = c.object_id and b.Last_Use_Project_ID = c.project_id " & _
            "join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d  " & _
            "on c.owner_id = d.object_id " & _
            "WHERE x.is_guid IS NULL and x2.object_id IS NULL and a.object_type <> 18;" '--no need==> b.Last_Use_Time < " & gsSQLDateConvert(pvsLastModifiedDate) & "; "
            '--^^ use modified date if no data found in Target table
    Else
        '-------------------------------------------
        '-- Save last modified info #tmpLastUse_userid
        '-------------------------------------------
        sSqlLastUse = _
            " SELECT a.object_id, a.project_id, a.object_type, c.object_name Last_Use_Object_Name, '~' + d.object_name last_Use_User_Name, b.Last_Use_Time " & _
                    ", b.Last_Use_Object_ID, b.Last_Use_Project_ID " & _
                    "INTO " & pvsTargetTableName & " FROM " & pvsSourceTableName & " a " & _
                    "OUTER APPLY (SELECT TOP 1  b1.mod_time Last_Use_Time " & _
                                ", b1.object_id Last_Use_Object_ID, b1.project_id Last_Use_Project_ID " & _
                                "FROM " & pvsTreeTableName & " b1 " & _
                                "WHERE b1.original_id = a.Object_ID And b1.Project_ID = a.Project_ID " & _
                                "order by b1.mod_time DESC " & _
            ") b " & _
            "join " & gtypSession.sDBPrefixMD & "dssmdobjinfo c " & _
            "on b.Last_Use_Object_ID = c.object_id and b.Last_Use_Project_ID = c.project_id " & _
            "join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d  " & _
            "on c.owner_id = d.object_id " & _
            "WHERE a.object_type <> 18;" '--no need==> b.Last_Use_Time < " & gsSQLDateConvert(pvsLastModifiedDate) & "; "
    End If

    msSQLtmpLastUseByChangeObjectFinderSqlServer = sSqlLastUse

End Function

Public Function gsSQLtmpMergeDependents(ByVal pvsTargetTableName As String, ByVal pvsTreeTableName As String) As String
'--, ByVal pvsEMTableName As String, ByVal pvsLastUseDate As String, ByVal pvsLastModifiedDate As String) As String
'-- Need to include all dependents of delete objects
'-- Update Last Use data
'-- Insert back to Target table
Dim sSqlSelect As String

        gsProcName = "Get Dependents Data"
        '-- Get dependents into source table with Original ID in order to get Last Use data (and make sure dependents are not already in Target table)
'        sSqlSelect = "INSERT INTO " & pvsTargetTableName & " (object_id, project_id, Last_Use_Object_Name, last_Use_User_Name, Last_Use_Time, Last_Use_Object_ID, Last_Use_Project_ID) " & _
'            " SELECT DISTINCT b.object_id, b.project_id, a.Last_Use_Object_Name, a.last_Use_User_Name, a.Last_Use_Time " & _
'                    ", a.Last_Use_Object_ID, a.Last_Use_Project_ID " & _
'                    "FROM " & pvsTargetTableName & " a " & _
'                    "Inner Join " & pvsTreeTableName & " b on a.object_id = b.original_id and a.project_id = b.project_id " & _
'                    "Left Join " & pvsTargetTableName & " x on x.object_id = b.object_id and x.project_id = b.project_id " & _
'                    "WHERE x.object_id IS NULL;"
    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
        sSqlSelect = " SELECT distinct b.object_id, b.project_id, a.Last_Use_Object_Name, a.last_Use_User_Name, a.Last_Use_Time, a.Last_Use_Object_ID, a.Last_Use_Project_ID " & _
        " FROM (SELECT DISTINCT b.original_id, b.object_id, b.project_id " & _
                "FROM " & pvsTargetTableName & " a " & _
                "Inner Join " & pvsTreeTableName & " b on a.object_id = b.original_id and a.project_id = b.project_id " & _
                "Left Join " & pvsTargetTableName & " x on x.object_id = b.object_id and x.project_id = b.project_id " & _
                "WHERE x.object_id IS NULL) b " & _
                "OUTER APPLY (SELECT TOP 1 a.Last_Use_Object_Name, a.last_Use_User_Name, a.Last_Use_Time, a.Last_Use_Object_ID, a.Last_Use_Project_ID " & _
                            "FROM " & pvsTargetTableName & " a " & _
                            "WHERE a.object_id = b.original_id And a.Project_ID = b.Project_ID " & _
                            "order by a.Last_Use_Time DESC) a "

    ElseIf gtypSQLTmpTable.nDBID = nOracle Or gtypSQLTmpTable.nDBID = nMySql Or gtypSQLTmpTable.nDBID = nPostgreSQL Then   'MySql v8.0 supports this syntax
            sSqlSelect = " SELECT distinct b.object_id, b.project_id, a.Last_Use_Object_Name, a.last_Use_User_Name, a.Last_Use_Time, a.Last_Use_Object_ID, a.Last_Use_Project_ID " & _
            " FROM (SELECT DISTINCT b.original_id, b.object_id, b.project_id " & _
                    "FROM " & pvsTargetTableName & " a " & _
                    "Inner Join " & pvsTreeTableName & " b on a.object_id = b.original_id and a.project_id = b.project_id " & _
                    "Left Join " & pvsTargetTableName & " x on x.object_id = b.object_id and x.project_id = b.project_id " & _
                    "WHERE x.object_id IS NULL) b " & _
                    "join (SELECT b2.Object_ID, b2.Project_ID, b2.Last_Use_Object_Name, b2.last_Use_User_Name, b2.Last_Use_Time, b2.Last_Use_Object_ID, b2.Last_Use_Project_ID " & _
                        "From (SELECT b1.Object_ID, b1.Project_ID, b1.Last_Use_Object_Name, b1.last_Use_User_Name, b1.Last_Use_Time " & _
                            ", b1.Last_Use_Object_ID, b1.Last_Use_Project_ID " & _
                            ", row_number() over (partition by b1.object_id order by b1.Last_Use_Time desc) rn " & _
                            "FROM " & pvsTargetTableName & " b1 " & _
                            ") b2 " & _
                        "WHERE rn <=1 " & _
                        ") a " & _
                    "on b.original_id = a.Object_ID And b.Project_ID = a.Project_ID "
    End If
    sSqlSelect = "INSERT INTO " & pvsTargetTableName & " (object_id, project_id, Last_Use_Object_Name, last_Use_User_Name, Last_Use_Time, Last_Use_Object_ID, Last_Use_Project_ID) " & _
                sSqlSelect
                
    gsSQLtmpMergeDependents = sSqlSelect
End Function

Public Function gsSQLtmpGetUnqualifiedObjects(ByVal pvsTargetTableName As String, ByVal pvsSourceTableName As String, ByVal pvsEMTableName As String, ByVal pvsLastUseDate As String, ByVal pvsLastModifiedDate As String) As String
'--Get unqualifed objects
Dim sSqlSelect As String
Dim sSqlFrom As String

    gsProcName = "Get Unqualified Data"
    sSqlSelect = " SELECT distinct a.object_id, a.project_id "
    '*mod* v2.1r7t...?? - make sure to convert GUID Object IDs for Sql Server
    sSqlFrom = "from " & pvsSourceTableName & " a " & _
                "join " & gtypSession.sDBPrefixMD & "dssmdobjinfo b " & _
                "on b.object_id = a.object_id and b.project_id = a.project_id " & _
                "left join " & pvsEMTableName & " c " & _
                "on c.IS_GUID = " & gsPurifyGUIDsqlFromSQL("a.object_id") & " " & _
                "where b.object_type <> 18 and (case when c.IS_REP_EXEC_ST_TS is null then " & gsSQLDateConvert(#1/1/1900#) & " else c.IS_REP_EXEC_ST_TS end >= " & gsSQLDateConvert(pvsLastUseDate) & " or b.mod_time >= " & gsSQLDateConvert(pvsLastModifiedDate) & ")"

    gsSQLtmpGetUnqualifiedObjects = gsSqlTmpTableCreation(pvsTargetTableName, sSqlSelect, sSqlFrom)
End Function

Public Function gsSQLtmpGetQualified(ByVal pvsTargetTableName As String, ByVal pvsSourceTableName As String, ByVal pvsEMTableName As String) As String
'--Get unqualifed objects
Dim sSqlSelect As String
Dim sSqlFrom As String

    '*mod* v2.1w Check to make sure Original still exist (for Dependents, if original object is deleted, they should be removed also)
    '           Cannot set last use in Obsolete object output. It will cause duplicates for objects in multiple dependent search paths
    
    gsProcName = "Get Qualified Data"
    sSqlSelect = " SELECT distinct a.object_id, a.project_id, b.object_type "
    sSqlFrom = "from " & pvsSourceTableName & " a " & _
            "join " & pvsSourceTableName & " a1 " & _
            "on a1.object_id = a.original_id " & _
            "join " & gtypSession.sDBPrefixMD & "dssmdobjinfo b " & _
            "on b.object_id = a.object_id " & _
            "and b.project_id = a.project_id "
'*mod* v2.1w below not used.  Need to regenerate Dependent Tree and get latest EM there
'    sSqlSelect = " SELECT distinct a.object_id, a.project_id, a.object_id Last_Use_Object_ID, a.project_id Last_Use_Project_ID, c.IS_REP_NAME Last_Use_Object_Name " & _
'                ", case when c.IS_REP_EXEC_ST_TS is null then b.mod_time else c.IS_REP_EXEC_ST_TS end Last_Use_Time " & _
'                ", b.object_type " & _
'                ", c.IS_REP_EXEC_ST_TS "    '-- Use as EM marker
'
'    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
'        sSqlSelect = sSqlSelect & ", case when c.IS_REP_EXEC_ST_TS Is Null then d.object_name else ' * ' + c.EM_USER_NAME end last_Use_User_Name "
'    ElseIf gtypSQLTmpTable.nDBID = nOracle Then
'        sSqlSelect = sSqlSelect & ", case when c.IS_REP_EXEC_ST_TS Is Null then d.object_name else N' * ' || c.EM_USER_NAME end last_Use_User_Name "
'    End If
'
'    sSqlFrom = "from " & pvsSourceTableName & " a " & _
'                "join " & pvsSourceTableName & " a1 " & _
'                "on a1.object_id = a.original_id " & _
'                "join " & gtypSession.sDBPrefixMD & "dssmdobjinfo b " & _
'                "on b.object_id = a.object_id  " & _
'                "join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d  " & _
'                "on b.owner_id = d.object_id " & _
'                "left join " & pvsEMTableName & " c " & _
'                "on c.IS_GUID = a.object_id "
                    
    gsSQLtmpGetQualified = gsSqlTmpTableCreation(pvsTargetTableName, sSqlSelect, sSqlFrom)
End Function

Public Function gsSQLtmpUpdateLastUse(ByVal pvsTargetTableName As String, ByVal pvsSourceTableName As String, ByVal pvsEMTableName As String) As String
'--Get unqualifed objects
Dim sSqlFinal As String
Dim sSqlSelect As String
Dim sSqlFrom As String


    gsProcName = "Update Last Use Time"

    '*mod* v2.1w Last Use is populated by all objects on the same path. If an object is farther down the dependent path and latest execution time is by an object in upper path, the Last Use for later object is using the same execution time which is not right
    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then

        sSqlSelect = "UPDATE a SET " & _
                    "  Last_Use_Object_ID = c.Last_Use_Object_ID " & _
                    ", Last_Use_Project_ID = c.Last_Use_Project_ID " & _
                    ", Last_Use_Object_Name = c.Last_Use_Object_Name" & _
                    ", last_Use_User_Name = c.last_Use_User_Name " & _
                    ", IS_REP_EXEC_ST_TS = c.Last_Use_Time " & _
                    ", Last_Use_Time = c.Last_Use_Time "
               
        sSqlFrom = "from " & pvsTargetTableName & " a " & _
                    "CROSS APPLY (SELECT TOP 1  b1.IS_REP_NAME Last_Use_Object_Name, ' ' + b1.EM_USER_NAME last_Use_User_Name, b1.IS_REP_EXEC_ST_TS Last_Use_Time " & _
                                ", " & gsPadGUIDsqlForSQL("b1.IS_GUID") & " Last_Use_Object_ID, " & gsPadGUIDsqlForSQL("b1.IS_PROJ_GUID") & " Last_Use_Project_ID " & _
                                "FROM " & pvsEMTableName & " b1 " & _
                                "join " & pvsSourceTableName & " c1 " & _
                                "on b1.IS_GUID = " & gsPurifyGUIDsqlFromSQL("c1.object_id") & " " & _
                                "join " & pvsSourceTableName & " d1 " & _
                                "on d1.original_id = c1.original_id " & _
                                "WHERE d1.object_id = a.object_id " & _
                                "order by b1.IS_REP_EXEC_ST_TS DESC " & _
                            ") c " '--where c.Last_Use_Time is not null

    ElseIf gtypSQLTmpTable.nDBID = nOracle Or gtypSQLTmpTable.nDBID = nMySql Or gtypSQLTmpTable.nDBID = nPostgreSQL Then
    '"         , row_number() over (partition by c2.original_id order by b2.IS_REP_EXEC_ST_TS desc) rn "
        sSqlSelect = "UPDATE " & pvsTargetTableName & " a SET (" & _
                    "  Last_Use_Object_ID " & _
                    ", Last_Use_Object_Name " & _
                    ", last_Use_User_Name " & _
                    ", Last_Use_Time, IS_REP_EXEC_ST_TS) " & _
                    " = (Select " & _
                    "  Coalesce(c.Last_Use_Object_ID, a.Last_Use_Object_ID) Last_Use_Object_ID " & _
                    ", Coalesce(c.Last_Use_Object_Name, a.Last_Use_Object_Name) Last_Use_Object_Name " & _
                    ", Coalesce(c.last_Use_User_Name, a.last_Use_User_Name) last_Use_User_Name " & _
                    ", Coalesce(c.Last_Use_Time, a.Last_Use_Time) Last_Use_Time, Coalesce(c.Last_Use_Time, a.Last_Use_Time) IS_REP_EXEC_ST_TS "
                    
        sSqlFrom = " from ( " & _
                    "    SELECT object_id, Last_Use_Object_Name, last_Use_User_Name, Last_Use_Time, Last_Use_Object_ID, Last_Use_Project_ID " & _
                    "    FROM    ( " & _
                    "     SELECT cc2.object_id, b2.IS_REP_NAME Last_Use_Object_Name, Conact(N' ', b2.EM_USER_NAME) last_Use_User_Name, b2.IS_REP_EXEC_ST_TS Last_Use_Time " & _
                    "         , b2.IS_GUID Last_Use_Object_ID, b2.IS_PROJ_GUID Last_Use_Project_ID " & _
                    "         , row_number() over (order by b2.IS_REP_EXEC_ST_TS desc) rn " & _
                    "     FROM  " & pvsEMTableName & " b2 " & _
                    "        JOIN    " & pvsSourceTableName & " c2 " & _
                    "         on b2.IS_GUID = c2.object_id " & _
                    "        JOIN    " & pvsSourceTableName & " cc2 " & _
                    "         on cc2.original_id = c2.original_id " & _
                    "     ) " & _
                    "    WHERE rn <= 1 " & _
                    "    ) c " & _
                    "   where c.object_id = a.object_id) "
    End If
    sSqlFrom = sSqlFrom & " where a.IS_REP_EXEC_ST_TS is NULL "
    
    sSqlFinal = sSqlSelect & sSqlFrom & " and a.object_type not in (55, 18);" '-- Doc and Shortcut. Will update shortcut on in another process
    'sSqlFinal = sSqlSelect & sSqlFrom & "and a.object_id = b.object_id and a.project_id = b.project_id and b.object_type not in (55, 18);" '-- Doc and Shortcut. Will update shortcut on in another process
    gsSQLtmpUpdateLastUse = sSqlFinal
End Function

Public Function gsSQLtmpUpdateShortcut(ByVal pvsTargetTableName As String, ByVal pvsSourceTableName As String, ByVal pvsEMTableName As String) As String
'--Get unqualifed objects
Dim sSqlFinal As String
Dim sSqlSelect As String
Dim sSqlFrom As String

    gsProcName = "Update Shortcuts"

    '*mod* v2.1w Below does not work because Shortcut does not exist in Target table
'    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
'
'        sSqlSelect = "UPDATE a SET " & _
'                    "  Last_Use_Object_ID = e.Last_Use_Object_ID " & _
'                    ", Last_Use_Object_Name = e.Last_Use_Object_Name" & _
'                    ", last_Use_User_Name = e.last_Use_User_Name " & _
'                    ", Last_Use_Time = e.Last_Use_Time "
'
'        sSqlFrom = "from " & pvsTargetTableName & " a " & _
'                        "join " & gtypSession.sDBPrefixMD & "dssmdobjinfo b " & _
'                        "on a.object_id = b.object_id and a.project_id = b.project_id " & _
'                        "join " & gtypSession.sDBPrefixMD & "dssmdobjdepn d " & _
'                        "on a.object_id = d.object_id and a.project_id = d.project_id " & _
'                        "join " & pvsTargetTableName & " e " & _
'                        "on d.DEPN_OBJID = e.object_id and d.DEPN_PRJID = e.project_id " & _
'                        "where b.object_type = 18 "
'
'    ElseIf gtypSQLTmpTable.nDBID = nOracle Then
'
'        sSqlSelect = "UPDATE " & pvsTargetTableName & " a SET (" & _
'                    "  Last_Use_Object_ID " & _
'                    ", Last_Use_Object_Name " & _
'                    ", last_Use_User_Name " & _
'                    ", Last_Use_Time) " & _
'                    " = (Select " & _
'                    "  e.Last_Use_Object_ID " & _
'                    ", e.Last_Use_Object_Name " & _
'                    ", e.last_Use_User_Name " & _
'                    ", e.Last_Use_Time "
'
'        sSqlFrom = "from " & gtypSession.sDBPrefixMD & "dssmdobjdepn d " & _
'                        "join " & pvsTargetTableName & " e " & _
'                        "on d.DEPN_OBJID = e.object_id and d.DEPN_PRJID = e.project_id " & _
'                        "where a.object_id = d.object_id and a.project_id = d.project_id) " & _
'                        "where (a.object_id, a.project_id) in (select b.object_id, b.project_id from " & gtypSession.sDBPrefixMD & "dssmdobjinfo b " & _
'                        "where a.object_id = b.object_id and a.project_id = b.project_id and b.object_type = 18 "
'    End If

    '*mod* v2.1w Insert Shortcuts into Target table

        sSqlFinal = "INSERT INTO " & pvsTargetTableName & " (object_id, project_id, object_type, Last_Use_Object_Name, last_Use_User_Name, Last_Use_Time, Last_Use_Object_ID, Last_Use_Project_ID) " & _
            " SELECT distinct a.object_id, a.project_id, a.object_type, e.Last_Use_Object_Name, e.last_Use_User_Name, e.Last_Use_Time " & _
                    ", e.Last_Use_Object_ID, e.Last_Use_Project_ID " & _
                    "FROM " & pvsSourceTableName & " a " & _
                        "join " & gtypSession.sDBPrefixMD & "dssmdobjdepn d " & _
                        "on a.object_id = d.object_id and a.project_id = d.project_id " & _
                        "join " & pvsTargetTableName & " e " & _
                        "on d.DEPN_OBJID = e.object_id and d.DEPN_PRJID = e.project_id " & _
                        "where a.object_type = 18; "
    gsSQLtmpUpdateShortcut = sSqlFinal
End Function

Public Function gsSQLtmpCreateEMTable(ByVal pvsEMTableName As String) As String
'--Get unqualifed objects
Dim sSqlFinal As String

    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
        sSqlFinal = " SELECT 0 IS_REP_ID, 0 IS_OBJ_ID, '' IS_REP_NAME, '' EM_USER_NAME, " & gsSQLDateConvert(Date) & " IS_REP_EXEC_ST_TS, '' IS_GUID, '' IS_PROJ_GUID " & gsSqlTmpTableCreate(pvsEMTableName) & ";"
    ElseIf gtypSQLTmpTable.nDBID = nOracle Then
        sSqlFinal = gsSqlTmpTableCreate(pvsEMTableName) & " SELECT 0 IS_REP_ID, 0 IS_OBJ_ID, chr('') IS_REP_NAME, chr('') EM_USER_NAME, " & gsSQLDateConvert(Date) & " IS_REP_EXEC_ST_TS, chr('') IS_GUID, chr('') IS_PROJ_GUID From Dual;"
    ElseIf gtypSQLTmpTable.nDBID = nMySql Or gtypSQLTmpTable.nDBID = nPostgreSQL Then
        sSqlFinal = gsSqlTmpTableCreate(pvsEMTableName) & " SELECT 0 IS_REP_ID, 0 IS_OBJ_ID, '' IS_REP_NAME, '' EM_USER_NAME, " & gsSQLDateConvert(Date) & " IS_REP_EXEC_ST_TS, '' IS_GUID, '' IS_PROJ_GUID;"
    End If
    
    gsSQLtmpCreateEMTable = sSqlFinal
End Function

Public Function gsSQLtmpGetUnqualifiedObjectID(ByVal pvsTargetTableName As String, ByVal pvsSourceTableName1 As String, ByVal pvsSourceTableName2 As String) As String
'--Delete objects (including Shortcut of objects) from target
Dim sSqlSelect As String
Dim sSqlFrom As String

    gsProcName = "Get Unqualified Objects and Components"
    sSqlSelect = " select object_id "
    sSqlFrom = " from " & pvsSourceTableName2 & " " & _
        " union select b.object_id from " & pvsSourceTableName2 & " a " & _
            "join " & gtypSession.sDBPrefixMD & "dssmdobjdepn b " & _
            "on b.DEPN_OBJID = a.object_id and b.DEPN_PRJID = a.project_id " & _
            "join " & pvsSourceTableName1 & " c " & _
            "on b.object_id = c.object_id and b.project_id = c.project_id " & _
        "where b.object_type = 18;"       '-- Remove Shortcut also
                
    gsSQLtmpGetUnqualifiedObjectID = gsSqlTmpTableCreation(pvsTargetTableName, sSqlSelect, sSqlFrom)
End Function
Public Function gsSQLtmpDeleteUnqualified(ByVal pvsTargetTableName As String, ByVal pvsSourceTableName As String) As String
'--Delete objects (including Shortcut of objects) from target
Dim sSqlSelect As String

    gsProcName = "Delete Unqualified Objects and Components"
    sSqlSelect = "Delete From " & pvsTargetTableName & " where object_id in (select object_id from " & pvsSourceTableName & "); "
    gsSQLtmpDeleteUnqualified = sSqlSelect
End Function

Public Function gsSQLtmpLastUseCmdFinal(ByVal pvsSourceTableName As String, ByVal pvsTargetTableName As String, ByVal pvlUserId As Long) As String
'-- Need User ID in result set for loading into Access share temp table
'-- SQL tables: a. -> dssmdobjinfo
'               b. -> dssmdusracct
'               c. -> dssmdobjdepn
'               d. -> dssmdobjinfo on last use object
'               x1. -> #tmpSource_userid
'               x2. -> #tmpFolderPath_userid
'               x3. -> #tmpLastUse_userid
'
'-----------------------------------------------------------------------------------------------------------
'Temp tables created in SQLServer
'-- Input Temp Table
'o  #tmpSource_userid
'o  #tmpLastUse_userid
'
'-- Output Temp table
'o  ##tmpFinalPass_userid   ==> Need to be global temp table because MS Access Qry needs to use different connection
'-----------------------------------------------------------------------------------------------------------
Dim sSqlSelect As String
Dim sSqlFrom As String

    gsProcName = "Get EM Last Use Final Pass"
    '-- Final Select Clause
    sSqlSelect = _
            " select distinct x1.ID, " & pvlUserId & " User_ID " & _
            ", x3.Last_Use_Object_Name, x3.last_Use_User_Name, x3.Last_Use_Time, x3.last_Use_Object_ID " & _
                    ", a.object_type last_Use_Object_Type_Num, a.subtype last_Use_Object_SubType_Num, " & gsSQLDocTypeByViewMedia("a", "") & " last_Use_Extended_Type_Num "
    '-- Final From Clause
    sSqlFrom = " from " & pvsSourceTableName & " x1 " & _
            " left join " & gtypSQLTmpTable.sTmpIntermTable & " x3 on x1.object_id = x3.object_id and x1.project_id = x3.project_id " & _
            " left join " & gtypSession.sDBPrefixMD & "dssmdobjinfo a on a.object_id = x3.last_Use_Object_ID and a.project_id = x3.Last_Use_Project_ID"

    gsSQLtmpLastUseCmdFinal = gsSqlTmpTableCreation(pvsTargetTableName, sSqlSelect, sSqlFrom)
End Function

Public Function gsSQLtmpUsageCmdFinal(ByVal pvsSourceTableName As String, ByVal pvsTargetTableName As String, ByVal pvsEMTableName As String, ByVal pvbRunDate As Boolean, ByVal pvbRunUser As Boolean) As String
'-- Need User ID in result set for loading into Access share temp table
'-- SQL tables: a. -> dssmdobjinfo
'               b. -> dssmdusracct
'               c. -> dssmdobjdepn
'               d. -> dssmdobjinfo on last use object
'               x1. -> #tmpSource_userid
'               x2. -> #tmpFolderPath_userid
'               x3. -> #tmpLastUse_userid
'
'-----------------------------------------------------------------------------------------------------------
'Temp tables created in SQLServer
'-- Input Temp Table
'o  #tmpSource_userid
'o  #tmpEM_userid
'
'-- Output Temp table
'o  ##tmpFinalPass_userid   ==> Need to be global temp table because MS Access Qry needs to use different connection
'-----------------------------------------------------------------------------------------------------------
Dim sSqlSelect As String
Dim sSqlFrom As String
Dim sGroupBy As String

    gsProcName = "Get EM Usage Final Pass"
    '-- Final Select Clause
'    sSqlSelect = "select  DISTINCT a11.IS_REP_ID  IS_OBJ_ID " & _
'        "    , a11.IS_REP_NAME  IS_REP_NAME " & _
'        "    , a14.EM_USER_NAME  EM_USER_NAME " & _
'        "    , x.IS_REP_EXEC_ST_TS  IS_REP_EXEC_ST_TS " & _
'        "    , a11.IS_REP_GUID IS_GUID " & _
'        "    , a13.IS_PROJ_GUID "
'                ", x3.Last_Use_Object_Name, x3.last_Use_User_Name, x3.Last_Use_Time, x3.last_Use_Object_ID "
    sGroupBy = ""
    sSqlSelect = _
            " select distinct x1.ID, " & gtypSession.lUserID & " User_ID "
                   
    If pvbRunDate Then
        If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
            sGroupBy = sGroupBy & _
                    " , DATEADD(dd, DATEDIFF(dd, 0, x3.IS_REP_EXEC_ST_TS), 0) "
        ElseIf gtypSQLTmpTable.nDBID = nOracle Then
            sGroupBy = sGroupBy & _
                    " , Trunc(x3.IS_REP_EXEC_ST_TS) "
        ElseIf gtypSQLTmpTable.nDBID = nMySql Then
            sGroupBy = sGroupBy & _
                    " , Date(x3.IS_REP_EXEC_ST_TS) "
        ElseIf gtypSQLTmpTable.nDBID = nPostgreSQL Then
            sGroupBy = sGroupBy & _
                    " , date_trunc('day', x3.IS_REP_EXEC_ST_TS) "
        End If
    
        sSqlSelect = sSqlSelect & _
                sGroupBy & " Last_Use_Time "
    End If
    If pvbRunUser Then
        sSqlSelect = sSqlSelect & _
                ", x3.EM_USER_NAME last_Use_User_Name "
        sGroupBy = sGroupBy & _
                ", x3.EM_USER_NAME "
    End If
    
    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
        sSqlSelect = sSqlSelect & _
                " , Cast(Count(x3.IS_REP_EXEC_ST_TS) as char(32)) Last_Use_Object_Name "
    ElseIf gtypSQLTmpTable.nDBID = nOracle Then
        sSqlSelect = sSqlSelect & _
                " , To_Char(Count(x3.IS_REP_EXEC_ST_TS)) Last_Use_Object_Name "
    ElseIf gtypSQLTmpTable.nDBID = nMySql Or gtypSQLTmpTable.nDBID = nPostgreSQL Then
        sSqlSelect = sSqlSelect & _
                " , Cast(Count(x3.IS_REP_EXEC_ST_TS) as char(32)) Last_Use_Object_Name "
    End If
    
    '-- Final From Clause
    '*mod* v2.1r7t - make sure to convert GUID Object IDs for Sql Server
    sSqlFrom = " from " & pvsSourceTableName & " x1 " & _
            " left join " & pvsEMTableName & " x3 on " & gsPurifyGUIDsqlFromSQL("x1.object_id") & " = x3.IS_GUID and " & gsPurifyGUIDsqlFromSQL("x1.project_id") & " = x3.IS_PROJ_GUID "
   
    sSqlFrom = sSqlFrom & " Group By x1.ID"
    If sGroupBy <> "" Then
        sSqlFrom = sSqlFrom & sGroupBy
    End If
    
    gsSQLtmpUsageCmdFinal = gsSqlTmpTableCreation(pvsTargetTableName, sSqlSelect, sSqlFrom)
End Function

Private Function msSQLtmpLatestEMOracle(ByVal pvsSourceTableName As String, ByVal pvsTargetTableName As String, ByVal pvsLastUseTurboDate As String, ByVal pvbFromLastUse As Boolean, Optional ByVal pvdtpLastUseOptToDate As String, Optional ByVal pvchkLastUseOptIMExclusion As Integer, Optional ByVal pvtxtLastUseOptUserExclusion As String, Optional ByVal pvtxtLastUseOptUserInclusion As String, Optional ByVal pvdtpLastUseOptFromDate As String, Optional ByVal pvchkLastUseOptActiveUsers As Integer) As String
'----------------------------------------------------------------------------------------------------------
'v2.1r9e Added following Last Use options
'  As Of Date
'  IM Exclusion
'  User Exclusion
'
'-- Input Temp Table
'o  #tmpSource_userid
'
'-- Output Temp table
'o  #tmpEM_userid
'o  #tmpLastUse_userid
'-----------------------------------------------------------------------------------------------------------
Dim sSqlEM As String
Dim sSqlEMDocFrom As String
Dim sSqlEMRepFrom As String
Dim sSqlEMSession As String
Dim sSqlEMRepSelect As String
Dim sSqlEMDocSelect As String

        '-------------------------------------------
        '-- Save Report/Doc last execution info #tmpEM_userid
        '-------------------------------------------
        '-- get last report execution date
        sSqlEMRepSelect = _
            " select  DISTINCT a11.IS_REP_ID  IS_OBJ_ID " & _
            "    , a11.IS_REP_NAME  IS_REP_NAME " & _
            "    , a12.EM_USER_NAME  EM_USER_NAME " & _
            "    , a12.IS_REP_EXEC_ST_TS  IS_REP_EXEC_ST_TS " & _
            "    , a11.IS_REP_GUID IS_GUID " & _
            "    , a12.IS_PROJ_GUID "
            
        sSqlEMRepFrom = _
            "from " & gtypSession.sDBPrefixEM & "IS_REP a11 " & _
            " join ( " & _
            "    SELECT IS_REP_ID, IS_REP_JOB_ID, EM_USER_NAME, IS_REP_EXEC_ST_TS, IS_PROJ_GUID " & _
            "    FROM    ( " & _
            "     SELECT k.IS_REP_ID, k.IS_REP_JOB_ID, a14.EM_USER_NAME, k.IS_REP_EXEC_ST_TS, a13.IS_PROJ_GUID " & _
            "         , row_number() over (partition by k.IS_REP_ID order by k.IS_REP_EXEC_ST_TS desc) rn " & _
            "     FROM   " & gtypSession.sDBPrefixEM & "IS_REP_FACT k " & _
            "         join " & gtypSession.sDBPrefixEM & "IS_REP a11a " & _
            "         on    (a11a.IS_REP_ID = k.IS_REP_ID) " & _
            "         and   (a11a.IS_PROJ_ID = k.IS_PROJ_ID) " & _
            "         join    " & gtypSession.sDBPrefixEM & "IS_PROJ    a13 " & _
            "           on    (k.IS_PROJ_ID = a13.IS_PROJ_ID) " & _
            "        JOIN    " & pvsSourceTableName & " c " & _
            "         on a11a.IS_REP_GUID = c.object_id " & _
            "         and a13.IS_PROJ_GUID = c.project_id " & _
            "           join " & gtypSession.sDBPrefixEM & "EM_USER    a14 " & _
            "           on (k.EM_USER_ID = a14.EM_USER_ID) "

        Dim sFromLastUseSQL As String
        sFromLastUseSQL = ""
        If pvbFromLastUse Then
            If Nz(pvdtpLastUseOptToDate) <> "" Then
                sFromLastUseSQL = sFromLastUseSQL & _
                    " k.day_id2 <= " & gsSQLDateConvert(pvdtpLastUseOptToDate) & " And "
                    '--" k.IS_REP_EXEC_ST_TS <= TO_DATE('" & pvdtpLastUseOptToDate & " 12:59:59 pm', 'mm-dd-yyyy hh:mi:ss pm') And "
            End If
            If Nz(pvdtpLastUseOptFromDate) <> "" Then
                sFromLastUseSQL = sFromLastUseSQL & _
                    " k.day_id2 >= " & gsSQLDateConvert(pvdtpLastUseOptFromDate) & " And "
                    '--" k.IS_REP_EXEC_ST_TS >= TO_DATE('" & pvdtpLastUseOptFromDate & "',  'mm-dd-yyyy') And "
            End If
            If Nz(pvchkLastUseOptIMExclusion) <> 0 Then
                sSqlEMSession = _
                    "           left join " & gtypSession.sDBPrefixEM & "IS_SESSION a15 " & _
                    "           on (k.IS_SESSION_ID = a15.IS_SESSION_ID " & _
                    "           and k.DAY_ID2 = a15.DAY_ID) "
            
                sFromLastUseSQL = sFromLastUseSQL & _
                    " (a15.EM_CONNECT_SOURCE <> 26 or a15.EM_CONNECT_SOURCE IS NULL) and "
            End If
            If Nz(pvtxtLastUseOptUserExclusion) <> "" And Nz(pvtxtLastUseOptUserInclusion) = "" Then
                sFromLastUseSQL = sFromLastUseSQL & _
                    " upper(a14.EM_USER_ABBREV) not in (" & UCase(gsTokenizeCommaList(pvtxtLastUseOptUserExclusion)) & ") And "
            End If
            If Nz(pvtxtLastUseOptUserInclusion) <> "" Then
                sFromLastUseSQL = sFromLastUseSQL & _
                    " upper(a14.EM_USER_ABBREV) not in (" & UCase(gsTokenizeCommaList(pvtxtLastUseOptUserInclusion)) & ") And "
            End If
            If Nz(pvchkLastUseOptActiveUsers) <> 0 Then
                sFromLastUseSQL = sFromLastUseSQL & _
                    " a14.EM_ENABLED = 1 and "
            End If
        End If

        If pvsLastUseTurboDate <> "" Then
                sSqlEMRepFrom = sSqlEMRepFrom & sSqlEMSession & " where k.day_id2 > " & gsSQLDateConvert(pvsLastUseTurboDate) & " and " & sFromLastUseSQL
        Else
                sSqlEMRepFrom = sSqlEMRepFrom & sSqlEMSession & " where " & sFromLastUseSQL
        End If

        '*mod* v2.1r13a requires alias name on subqueries for MySQL & PostgreSQL
        sSqlEMRepFrom = sSqlEMRepFrom & _
            "      c.object_type = 3 " & _
            "    ) ttab1 WHERE rn <= 1 " & _
            "    ) a12 " & _
            "   on (a11.IS_REP_ID = a12.IS_REP_ID) "

        sSqlEMDocFrom = sSqlEMRepFrom
        sSqlEMDocFrom = Replace(sSqlEMDocFrom, "IS_REP", "IS_DOC")
        sSqlEMDocFrom = Replace(sSqlEMDocFrom, "c.object_type = 3", "c.object_type = 55")
        sSqlEMDocSelect = sSqlEMRepSelect
        sSqlEMDocSelect = Replace(sSqlEMDocSelect, "a11.IS_REP", "a11.IS_DOC")
        sSqlEMDocSelect = Replace(sSqlEMDocSelect, "a12.IS_REP", "a12.IS_DOC")

        '*mod* v2.1r10d -- get last document execution date
        sSqlEM = gsSqlTmpTableCreate(pvsTargetTableName) & "Select * from (" & sSqlEMRepSelect & sSqlEMRepFrom & _
            "UNION " & _
            sSqlEMDocSelect & sSqlEMDocFrom & ")"
            
        If gtypSQLTmpTable.nDBID = nMySql Or gtypSQLTmpTable.nDBID = nPostgreSQL Then
            '*mod* v2.1r13a requires alias name on subqueries for MySQL & PostgreSQL but error on Oracle if last statement
            sSqlEM = sSqlEM & " ttab2 "
        End If
        
        msSQLtmpLatestEMOracle = sSqlEM
End Function

Private Function msSQLtmpLastUseByEMOracle(ByVal pvsSourceTableName As String, ByVal pvsTargetTableName As String, ByVal pvsTreeTableName As String, ByVal pvsEMTableName As String, ByVal pvsLastUseDate As String) As String
Dim sSqlLastUse As String

        '-------------------------------------------
        '-- Save last execution info #tmpLastUse_userid
        '-------------------------------------------
        '-- create Last Use table with EM data
        '*mod* v2.1t Added last use date check to reduce resultset, Target table does not contain objects that have no EM or not qualify for Last Use Date
        '*mod* v2.1w is wrong. Need return unqualified objects too
        sSqlLastUse = gsSqlTmpTableCreate(pvsTargetTableName) & _
            " SELECT a.*, b.Last_Use_Object_Name, b.last_Use_User_Name, b.Last_Use_Time " & _
                    ", b.Last_Use_Object_ID, b.Last_Use_Project_ID " & _
                    "FROM " & pvsSourceTableName & " a " & _
                    " inner join ( " & _
                    "    SELECT original_id, Last_Use_Object_Name, last_Use_User_Name, Last_Use_Time, Last_Use_Object_ID, Last_Use_Project_ID " & _
                    "    FROM    ( " & _
                    "     SELECT c.original_id, b.IS_REP_NAME Last_Use_Object_Name, Concat(' ', b.EM_USER_NAME) last_Use_User_Name, b.IS_REP_EXEC_ST_TS Last_Use_Time " & _
                    "         , b.IS_GUID Last_Use_Object_ID, b.IS_PROJ_GUID Last_Use_Project_ID " & _
                    "         , row_number() over (partition by c.original_id order by b.IS_REP_EXEC_ST_TS desc) rn " & _
                    "     FROM  " & pvsEMTableName & " b " & _
                    "        JOIN    " & pvsTreeTableName & " c " & _
                    "         on b.IS_GUID = c.object_id " & _
                    "         and b.IS_PROJ_GUID = c.project_id " & _
                    "     ) ttab1 " & _
                    "    WHERE rn <= 1 " & _
                    "    ) b " & _
                    "   on b.original_id = a.Object_ID And b.Last_Use_Project_ID = a.Project_ID;"
        msSQLtmpLastUseByEMOracle = sSqlLastUse
        
End Function

Private Function msSQLtmpLastUseByChangeOracleCIA(ByVal pvsSourceTableName As String, ByVal pvsTargetTableName As String, ByVal pvsTreeTableName As String, ByVal pvsEMTableName As String) As String
'----------------------------------------------------------------------------------------------------------
'-- Input Temp Table
'o  #tmpSource_userid
'
'-- Output Temp table
'o  #tmpEM_userid
'o  #tmpLastUse_userid
'-----------------------------------------------------------------------------------------------------------
Dim sSqlLastUse As String

    If gtypSession.sDBPrefixEM <> "N/A" Then

        '-------------------------------------------
        '-- Add Last Modified Date info for those missing EM data
        '-------------------------------------------
        sSqlLastUse = "INSERT INTO " & pvsTargetTableName & "( object_id, project_id, Last_Use_Object_Name, last_Use_User_Name, Last_Use_Time, Last_Use_Object_ID, Last_Use_Project_ID) " & _
                   " SELECT a.object_id, a.project_id, c.object_name Last_Use_Object_Name, Concat('~', d.object_name) last_Use_User_Name, b.Last_Use_Time " & _
                    ", b.Last_Use_Object_ID, b.Last_Use_Project_ID " & _
                    "FROM " & pvsSourceTableName & " a " & _
                    "Left Join " & pvsTargetTableName & " x on a.object_id = x.object_id and a.project_id = x.project_id " & _
                    "join (SELECT  b2.original_id, b2.Last_Use_Time " & _
                                    ", b2.Last_Use_Object_ID, b2.Last_Use_Project_ID " & _
                                "From (SELECT  b1.original_id, b1.mod_time Last_Use_Time " & _
                                    ", b1.object_id Last_Use_Object_ID, b1.project_id Last_Use_Project_ID " & _
                                    ", row_number() over (partition by b1.original_id order by b1.mod_time desc) rn " & _
                                    "FROM " & pvsTreeTableName & " b1 " & _
                                    ") b2 " & _
                                "WHERE rn <=1 " & _
                                ") b " & _
                    "on b.original_id = a.Object_ID And b.Last_Use_Project_ID = a.Project_ID " & _
                    "join " & gtypSession.sDBPrefixMD & "dssmdobjinfo c " & _
                    "on b.Last_Use_Object_ID = c.object_id and b.Last_Use_Project_ID = c.project_id " & _
                    "join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d  " & _
                    "on c.owner_id = d.object_id " & _
                    "WHERE x.Last_Use_Time IS NULL; "
                    '--^^ use modified date if no data found in EM
    Else
        '-------------------------------------------
        '-- Save last modified info #tmpLastUse_userid
        '-------------------------------------------
        sSqlLastUse = gsSqlTmpTableCreate(pvsTargetTableName) & _
            " SELECT a.object_id, a.project_id, c.object_name Last_Use_Object_Name, Concat('~', d.object_name) last_Use_User_Name, b.Last_Use_Time " & _
                    ", b.Last_Use_Object_ID, b.Last_Use_Project_ID " & _
                    "FROM " & pvsSourceTableName & " a " & _
                    "join (SELECT  b2.original_id, b2.Last_Use_Time " & _
                                    ", b2.Last_Use_Object_ID, b2.Last_Use_Project_ID " & _
                                "From (SELECT  b1.original_id, b1.mod_time Last_Use_Time " & _
                                    ", b1.object_id Last_Use_Object_ID, b1.project_id Last_Use_Project_ID " & _
                                    ", row_number() over (partition by b1.original_id order by b1.mod_time desc) rn " & _
                                    "FROM " & pvsTreeTableName & " b1 " & _
                                    ") b2 " & _
                                "WHERE rn <=1 " & _
                                ") b " & _
                    "on b.original_id = a.Object_ID And b.Last_Use_Project_ID = a.Project_ID " & _
                    "join " & gtypSession.sDBPrefixMD & "dssmdobjinfo c " & _
                    "on b.Last_Use_Object_ID = c.object_id and b.Last_Use_Project_ID = c.project_id " & _
                    "join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d  " & _
                    "on c.owner_id = d.object_id; "
    End If
    
    msSQLtmpLastUseByChangeOracleCIA = sSqlLastUse
End Function

Private Function msSQLtmpLastUseByChangeOracle(ByVal pvsSourceTableName As String, ByVal pvsTargetTableName As String, ByVal pvsTreeTableName As String, ByVal pvsEMTableName As String) As String
'----------------------------------------------------------------------------------------------------------
'-- Input Temp Table
'o  #tmpSource_userid
'
'-- Output Temp table
'o  #tmpEM_userid
'o  #tmpLastUse_userid
'-----------------------------------------------------------------------------------------------------------
Dim sSqlLastUse As String

    If gtypSession.sDBPrefixEM <> "N/A" Then

        '-------------------------------------------
        '-- Add Last Modified Date info for those missing EM data
        '-------------------------------------------
        sSqlLastUse = "INSERT INTO " & pvsTargetTableName & "(id, object_id, project_id, Last_Use_Object_Name, last_Use_User_Name, Last_Use_Time, Last_Use_Object_ID, Last_Use_Project_ID) " & _
                   " SELECT a.id, a.object_id, a.project_id, c.object_name Last_Use_Object_Name, Concat('~', d.object_name) last_Use_User_Name, b.Last_Use_Time " & _
                    ", b.Last_Use_Object_ID, b.Last_Use_Project_ID " & _
                    "FROM " & pvsSourceTableName & " a " & _
                    "Left Join " & pvsTargetTableName & " x on a.object_id = x.object_id and a.project_id = x.project_id " & _
                    "join (SELECT  b2.original_id, b2.Last_Use_Time " & _
                                    ", b2.Last_Use_Object_ID, b2.Last_Use_Project_ID " & _
                                "From (SELECT  b1.original_id, b1.mod_time Last_Use_Time " & _
                                    ", b1.object_id Last_Use_Object_ID, b1.project_id Last_Use_Project_ID " & _
                                    ", row_number() over (partition by b1.original_id order by b1.mod_time desc) rn " & _
                                    "FROM " & pvsTreeTableName & " b1 " & _
                                    ") b2 " & _
                                "WHERE rn <=1 " & _
                                ") b " & _
                    "on b.original_id = a.Object_ID And b.Last_Use_Project_ID = a.Project_ID " & _
                    "join " & gtypSession.sDBPrefixMD & "dssmdobjinfo c " & _
                    "on b.Last_Use_Object_ID = c.object_id and b.Last_Use_Project_ID = c.project_id " & _
                    "join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d  " & _
                    "on c.owner_id = d.object_id " & _
                    "WHERE x.Last_Use_Time IS NULL; "
                    '--^^ use modified date if no data found in EM
    Else
        '-------------------------------------------
        '-- Save last modified info #tmpLastUse_userid
        '-------------------------------------------
        sSqlLastUse = gsSqlTmpTableCreate(pvsTargetTableName) & _
            " SELECT a.*, c.object_name Last_Use_Object_Name, Concat('~', d.object_name) last_Use_User_Name, b.Last_Use_Time " & _
                    ", b.Last_Use_Object_ID, b.Last_Use_Project_ID " & _
                    "FROM " & pvsSourceTableName & " a " & _
                    "join (SELECT  b2.original_id, b2.Last_Use_Time " & _
                                    ", b2.Last_Use_Object_ID, b2.Last_Use_Project_ID " & _
                                "From (SELECT  b1.original_id, b1.mod_time Last_Use_Time " & _
                                    ", b1.object_id Last_Use_Object_ID, b1.project_id Last_Use_Project_ID " & _
                                    ", row_number() over (partition by b1.original_id order by b1.mod_time desc) rn " & _
                                    "FROM " & pvsTreeTableName & " b1 " & _
                                    ") b2 " & _
                                "WHERE rn <=1 " & _
                                ") b " & _
                    "on b.original_id = a.Object_ID And b.Last_Use_Project_ID = a.Project_ID " & _
                    "join " & gtypSession.sDBPrefixMD & "dssmdobjinfo c " & _
                    "on b.Last_Use_Object_ID = c.object_id and b.Last_Use_Project_ID = c.project_id " & _
                    "join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d  " & _
                    "on c.owner_id = d.object_id; "
    End If
    
    msSQLtmpLastUseByChangeOracle = sSqlLastUse
End Function

Private Function msSQLtmpLastUseByChangeObjectFinderOracle(ByVal pvsSourceTableName As String, ByVal pvsTargetTableName As String, ByVal pvsTreeTableName As String, ByVal pvsEMTableName As String, ByVal pvsLastModifiedDate As String) As String
'----------------------------------------------------------------------------------------------------------
'-- Input Temp Table
'o  #tmpSource_userid
'
'-- Output Temp table
'o  #tmpEM_userid
'o  #tmpLastUse_userid
'-----------------------------------------------------------------------------------------------------------
Dim sSqlLastUse As String

    If gtypSession.sDBPrefixEM <> "N/A" Then

        '-------------------------------------------
        '-- Add Last Modified Date info for those missing EM data
        '-------------------------------------------
        '*mod* v2.1t If object exists in EM, then don't use Mod Time
        '*mod* v2.1v v2.1t not work in case reports used as filter.  Add objects not in EM and not in Target. Note there may be objects in EM but not qualified (and need to exclude here).
        '--"Left Join " & pvsEMTableName & " x on a.object_id = x.is_guid and a.project_id = x.is_proj_guid "
        sSqlLastUse = "INSERT INTO " & pvsTargetTableName & " (object_id, project_id, object_type, Last_Use_Object_Name, last_Use_User_Name, Last_Use_Time, Last_Use_Object_ID, Last_Use_Project_ID) " & _
                   " SELECT a.object_id, a.project_id, a.object_type, c.object_name Last_Use_Object_Name, Concat('~', d.object_name) last_Use_User_Name, b.Last_Use_Time " & _
                    ", b.Last_Use_Object_ID, b.Last_Use_Project_ID " & _
                    "FROM " & pvsSourceTableName & " a " & _
                    "Left Join " & pvsEMTableName & " x on a.object_id = x.is_guid and a.project_id = x.is_proj_guid " & _
                    "Left Join " & pvsTargetTableName & " x2 on a.object_id = x2.object_id and a.project_id = x2.project_id " & _
                    "join (SELECT  b2.original_id, b2.Last_Use_Time " & _
                                    ", b2.Last_Use_Object_ID, b2.Last_Use_Project_ID " & _
                                "From (SELECT  b1.original_id, b1.mod_time Last_Use_Time " & _
                                    ", b1.object_id Last_Use_Object_ID, b1.project_id Last_Use_Project_ID " & _
                                    ", row_number() over (partition by b1.original_id order by b1.mod_time desc) rn " & _
                                    "FROM " & pvsTreeTableName & " b1 " & _
                                    ") b2 " & _
                                "WHERE rn <=1 " & _
                                ") b " & _
                    "on b.original_id = a.Object_ID And b.Last_Use_Project_ID = a.Project_ID " & _
                    "join " & gtypSession.sDBPrefixMD & "dssmdobjinfo c " & _
                    "on b.Last_Use_Object_ID = c.object_id and b.Last_Use_Project_ID = c.project_id " & _
                    "join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d  " & _
                    "on c.owner_id = d.object_id " & _
                    "WHERE x.is_guid IS NULL and x2.object_id IS NULL and a.object_type <> 18;" '--No Need ==>b.Last_Use_Time < " & gsSQLDateConvert(pvsLastModifiedDate) & "; "
                    '--^^ use modified date if no data found in Target table
    Else
        '-------------------------------------------
        '-- Save last modified info #tmpLastUse_userid
        '-------------------------------------------
        sSqlLastUse = gsSqlTmpTableCreate(pvsTargetTableName) & _
            " SELECT a.object_id, a.project_id, a.object_type, c.object_name Last_Use_Object_Name, Concat('~', d.object_name) last_Use_User_Name, b.Last_Use_Time " & _
                    ", b.Last_Use_Object_ID, b.Last_Use_Project_ID " & _
                    "FROM " & pvsSourceTableName & " a " & _
                    "join (SELECT  b2.original_id, b2.Last_Use_Time " & _
                                    ", b2.Last_Use_Object_ID, b2.Last_Use_Project_ID " & _
                                "From (SELECT  b1.original_id, b1.mod_time Last_Use_Time " & _
                                    ", b1.object_id Last_Use_Object_ID, b1.project_id Last_Use_Project_ID " & _
                                    ", row_number() over (partition by b1.original_id order by b1.mod_time desc) rn " & _
                                    "FROM " & pvsTreeTableName & " b1 " & _
                                    ") b2 " & _
                                "WHERE rn <=1 " & _
                                ") b " & _
                    "on b.original_id = a.Object_ID And b.Last_Use_Project_ID = a.Project_ID " & _
                    "join " & gtypSession.sDBPrefixMD & "dssmdobjinfo c " & _
                    "on b.Last_Use_Object_ID = c.object_id and b.Last_Use_Project_ID = c.project_id " & _
                    "join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d  " & _
                    "on c.owner_id = d.object_id " & _
                    "WHERE a.object_type <> 18;" '--No Need ==>b.Last_Use_Time < " & gsSQLDateConvert(pvsLastModifiedDate) & "; "
    End If
    
    msSQLtmpLastUseByChangeObjectFinderOracle = sSqlLastUse
End Function

Public Function gsSQLtmpWebSub(ByVal pvsSourceTableName As String, ByVal pvsTargetTableName As String, ByVal pvlBatchRunId As Long, Optional ByVal pvsAddionalFilter As String) As String
'-------------------------------------
'  pvsSourceTableName
'   1.  Contains reports/documents
'   2.  Can be empty
'   3.  If empty, pvsAddionalFilter will contain filtering conditions
'-------------------------------------
'Contact_Type:
'1 ==> Contact
'2 ==> Contact Group
'4 ==> User
'8 ==> User Group
'32 ==> DRL  "DRL IW W Territory East West ISM"
'16777216 ==> Burst "Recipient From Content"
'select * from MSTR_MD2.DSSCSCONTACT where login in ('Chung Lau', 'Kathy Fisher', 'Chung Lau Contact', 'Chung Lau ContactGroup')
'-- changed in v2.1r3
'added
'   Contact Name
'   Contact Login
'   Contact Type
'   Device Name
'   Notification Address
'Delete
'   Recipient Name
'Rename
'   Recipient Address name to Address Name
'   Recipient Address to Address
'   Recipient Object ID to Contact ID
'
'v2.1r8a -- added alert subscription checking.  Alert report if available will be used the subscription report
'
Dim sSqlSelect As String
Dim sSqlFrom As String

    gsProcName = "Get Web Subscriptions"
'-------------------------------------
'-- Query Web Subscriptions
'-------------------------------------
'-- Query against Distribution Services
'*mod* v2.1z1 added Contact ID to output for recipient View access check
    sSqlSelect = _
    "SELECT  DISTINCT " & pvlBatchRunId & " Batch_Run_ID " & _
       " , a.DISP_NAME Subscription_Name " & _
       " , case when d2.object_name is null then d.object_name else d2.object_name end Report_Name " & _
       " , case when d2.object_name is null then d2.object_name else d.object_name end Trigger_Report_Name " & _
       " , c.object_name Owner_Name " & _
       " , c2.Login Owner_Login " & _
       " , b4.login Contact_Name " & _
       " , b4.contact_id recipient_object_id " & _
       " , b5.Login Contact_Login "
       '-- v2.1r3 Added Contact Info -- This is needed because Contact Group does not exist in Address table
       '-- v2.1r6b Added " , b4.contact_id recipient_object_id "  back.  It is needed for Web Sub search where user has no permission to reports/components
    sSqlSelect = sSqlSelect & _
       " , case when b4.contact_type = 1 THEN 'Contact' " & _
               " when b4.contact_type = 2 THEN 'Contact Group' " & _
               " when b4.contact_type = 4 THEN 'User' " & _
               " when b4.contact_type = 8 THEN 'User Group' " & _
               " when b4.contact_type = 32  THEN 'Dynamic Recipients' " & _
               " when b4.contact_type = 16777216  THEN 'Recipients from Content' "
               
    sSqlSelect = sSqlSelect & " Else " & gsSqlCastChar("b4.contact_type", 20) & " END contact_type "
    sSqlSelect = sSqlSelect & _
       " , b.DISP_NAME Address_Name " & _
       " , b.address Address " & _
       " , b3.object_name Device_Name " & _
       " , e.object_name Schedule_Name " & _
       " , a.MODIFICATION_TIME Update_Time " & _
       " , a.CREATION_TIME Create_Time " & _
       " , case when a.delivery_type = 16 THEN 'HistoryList' " & _
               " when a.delivery_type = 8192 THEN 'FTP' " & _
               " when a.delivery_type = 4096 THEN 'PersonalView' " & _
               " when a.delivery_type = 128 THEN 'Mobile' " & _
               " when a.delivery_type = 64  THEN 'CacheUpdate' " & _
               " when a.delivery_type = 4  THEN 'Print' " & _
               " when a.delivery_type = 2  THEN 'File' " & _
               " when a.delivery_type = 1  THEN 'Email' "

    sSqlSelect = sSqlSelect & " Else " & gsSqlCastChar("a.delivery_type", 20) & " END Delivery_Type "
    sSqlSelect = sSqlSelect & _
                 " , case when b4.Status Is NULL then 'Unknown' when b4.Status = 0 then 'Inactive' when COALESCE(b.Is_Default,0) <> 0 then 'Default' else 'Active' end Contact_Status "
                 '--" , case when Coalesce(b4.Status,1) = 0 then 'Inactive' when Coalesce(b.Is_Default,0) <> 0 then 'Default' else 'Active' end Contact_Status "

    '*mod* v2.1r7t - make sure to convert GUID Object IDs for Sql Server
    '   " , " & gsPurifyGUIDsqlFromSQL("d.object_id") & " object_id " & _
    '   " , " & gsPurifyGUIDsqlFromSQL("d.project_id") & " project_id " &
    sSqlSelect = sSqlSelect & _
       " , b2.address Notification_Address " & _
       " , case when d2.object_id is null then d.object_id else d2.object_id end object_id " & _
       " , case when d2.object_id is null then d2.object_id else d.object_id end trigger_object_id " & _
       " , d.project_id " & _
       " , a.INST_ID " & _
       " , aa.recipient_id Contact_ID "
       '^^^ difference between aa.recipient_id and b4.contact_id ==> b4.contact_id may not have address (such as contact group)
           
'v2.1r2e Don't return Last Run Time to avoid duplicates
'--       " , " & IIf(gtypSession.sDBPrefixHL <> "N/A", "F.FINISH_TIME", "Null") & " Last_Run_Time " & _
    '*mod* v2.1r7t - make sure to convert GUID Object IDs for Sql Server
    sSqlFrom = _
    "FROM " & gtypSession.sDBPrefixMD & "dsscssubinst a " & _
       " join " & gtypSession.sDBPrefixMD & "dssmdobjinfo c " & _
           " on a.owner_id = " & gsPurifyGUIDsqlFromSQL("c.object_id") & _
       " join " & gtypSession.sDBPrefixMD & "dssmdusracct c2 " & _
           " on a.owner_id = " & gsPurifyGUIDsqlFromSQL("c2.object_id") & _
       " join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d " & _
           " on a.data_id = " & gsPurifyGUIDsqlFromSQL("d.object_id") & _
           " and a.project_id = " & gsPurifyGUIDsqlFromSQL("d.project_id") & _
           " and d.project_id = '" & gtypSession.sMstrProjectID & "'" & _
       " join   " & gtypSession.sDBPrefixMD & "dssmdobjinfo e " & _
           " on a.TRIGGER_ID = " & gsPurifyGUIDsqlFromSQL("e.object_id") & _
       " join (  " & _
               " select * " & _
               " from " & gtypSession.sDBPrefixMD & "dsscssubinst a1 " & _
               " where a1.Parent_ID <> " & gsSql0PureGUID & " " & _
               " ) aa " & _
               " on aa.Parent_ID = a.inst_id "
               '--^^ Recipients and History List are saved in a sublevel subscriptions
               
           '-- Email Recipient
    sSqlFrom = sSqlFrom & _
        " left join " & gtypSession.sDBPrefixMD & "Dsscsaddress b  " & _
           " on aa.recipient_id = b.contact_id " & _
              " and (( " & _
                   " a.address_id = b.address_id " & _
                   " or " & _
                   " aa.address_id = b.address_id " & _
                   " ) " & _
                " or " & _
                   " (   " & _
                   " aa.address_id = " & gsSql0PureGUID & " " & _
                   " and a.delivery_type = 1 " & _
                   " and b.delivery_type = 1 " & _
                   " and b.IS_DEFAULT = -1 " & _
                   " ) " & _
                " or (  " & _
                   " aa.address_id = " & gsSql0PureGUID & " " & _
                   " and a.delivery_type = 2 " & _
                   " and b.delivery_type = 2 " & _
                   " and b.IS_DEFAULT = -1 " & _
                   " ) " & _
               " ) "
                '-- ^^^ Case 1: Contact has address or history list whose user address is saved in a sublevel subscriptions
                '-- ^^^ Case 2: If no address for email delivery, use user's default address
                '-- ^^^ Case 3: If no address for file delivery, use user's default address
    
                'Delivery Type in Address:
                '1 - email
                '2 - file
                '4 - printe
                '512 - MobileAPNSForiPhone
                '8192 - FTP
                'select distinct delivery_type from MSTR_MD2.DSSCSaddress
    
    '*mod* v2.1r2d include History List recipient in search criteria
    If gtypSession.sDBPrefixHL <> "N/A" Then
        sSqlFrom = sSqlFrom & _
           " left join " & gtypSession.sDBPrefixHL & "dsscsmsginfo f  " & _
               " on  aa.inst_id = f.SUBINST_ID " & _
           " left join " & gtypSession.sDBPrefixMD & "dssmdusracct f2  " & _
               " on  f.user_id = " & gsPurifyGUIDsqlFromSQL("f2.object_id")
    End If

    '-- v2.1r3 Get Notification Email Address
    '-- v2.1r3 Get Notification Device Name
    sSqlFrom = sSqlFrom & _
       " left join " & gtypSession.sDBPrefixMD & "Dsscsaddress b2 " & _
       " on a.notification_addr_id = b2.address_id " & _
       " left join " & gtypSession.sDBPrefixMD & "dssmdobjinfo b3 " & _
       " on b.device_id = " & gsPurifyGUIDsqlFromSQL("b3.object_id")

    '-- v2.1r3 Get Contact Type. Also, must join aa.recipient_id to get Contact Group
    sSqlFrom = sSqlFrom & _
       " left join " & gtypSession.sDBPrefixMD & "Dsscscontact b4 " & _
       " on b.contact_id = b4.contact_id or aa.recipient_id = b4.contact_id " & _
       " left join " & gtypSession.sDBPrefixMD & "dssmdusracct b5 " & _
           " on b4.mstruser_id = " & gsPurifyGUIDsqlFromSQL("b5.object_id")
    
    '-- v2.1r8a Get Trigger Report on Alert Subscriptions
    sSqlFrom = sSqlFrom & _
       " left join " & gtypSession.sDBPrefixMD & "Dsscspsnlztn t1 " & _
           " on a.INST_ID = t1.inst_id and t1.SUB_ID=33554432 and t1.VAL_SEQ=0 " & _
       " left join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d2 " & _
           " on " & gsExtractGUIDsql("t1.P_VALUE", "'<alert id='", 11) & " = " & gsPurifyGUIDsqlFromSQL("d2.object_id") & _
           " and d2.project_id = '" & gtypSession.sMstrProjectID & "'"

    If pvsSourceTableName <> "" Then
        sSqlFrom = sSqlFrom & _
           " Join " & pvsSourceTableName & " xb " & _
           " ON (xb.object_id = d.object_id OR xb.object_id = d2.object_id)" & _
           " and xb.project_id = d.project_id " & _
           " and d.object_type in (3, 55) "
    End If
    sSqlFrom = sSqlFrom & pvsAddionalFilter
       
    gsSQLtmpWebSub = gsSqlTmpTableCreation(pvsTargetTableName, sSqlSelect, sSqlFrom)
End Function

Public Function gsSQLtmpWebSubCombine(ByVal pvsTargetTableName As String, ByVal pvsSourceWSTableName As String, ByVal pvsSourceCTTableName As String, ByVal pvsSourceUGTableName As String, ByVal pvbGroupMembers As Boolean, ByVal pvbIncludeGroupName As Boolean, Optional ByVal pvsAddionalFilter As String) As String
'-------------------------------------
'  pvsSourceTableName
'   1.  Contains reports/documents
'   2.  Can be empty
'   3.  If empty, pvsAddionalFilter will contain filtering conditions
'-------------------------------------
'Contact_Type:
'1 ==> Contact
'2 ==> Contact Group
'4 ==> User
'8 ==> User Group
'32 ==> DRL  "DRL IW W Territory East West ISM"
'16777216 ==> Burst "Recipient From Content"
'select * from MSTR_MD2.DSSCSCONTACT where login in ('Chung Lau', 'Kathy Fisher', 'Chung Lau Contact', 'Chung Lau ContactGroup')
'-- changed in v2.1r3
'added
'   Contact Name
'   Contact Login
'   Contact Type
'   Device Name
'   Notification Address
'Delete
'   Recipient Name
'Rename
'   Recipient Address name to Address Name
'   Recipient Address to Address
'   Recipient Object ID to Contact ID
'
'v2.1r8a -- added alert subscription checking.  Alert report if available will be used the subscription report
'
Dim sSqlSelect As String
Dim sSqlFrom As String

    gsProcName = "Combine Web Subscriptions"
'-------------------------------------
'-- Query Web Subscriptions
'-------------------------------------
'-- Query against Distribution Services
'*mod* v2.1z1 added Contact ID to output for recipient View access check
'*mod* v2.1r16e Explode Contact Group and User Group
'tables
' b4, b5, b, aa, a
'

    sSqlSelect = _
        "SELECT " & _
            " ws.Batch_Run_ID" & _
            ",ws.Subscription_Name" & _
            ",ws.Report_Name" & _
            ",ws.Trigger_Report_Name" & _
            ",ws.Owner_Name" & _
            ",ws.Owner_Login" & _
            ",ws.Schedule_Name" & _
            ",ws.Update_Time" & _
            ",ws.Create_Time" & _
            ",ws.Delivery_Type" & _
            ",ws.Object_ID" & _
            ",ws.Trigger_Object_ID" & _
            ",ws.project_id" & _
            ",ws.INST_ID"

    sSqlSelect = sSqlSelect & _
            ",ws.Contact_Name" & _
            ",ws.recipient_object_id" & _
            ",ws.Contact_Login" & _
            ",ws.contact_type" & _
            ",ws.Address_Name" & _
            ",ws.Address" & _
            ",ws.Device_Name" & _
            ",ws.Notification_Address" & _
            ",ws.Contact_Status" & _
            ",ws.Contact_ID "

    sSqlSelect = sSqlSelect & " FROM " & pvsSourceWSTableName & " ws"
    If pvbGroupMembers Then
        sSqlSelect = sSqlSelect & " Where contact_type not in ('Contact Group', 'User Group') "
    End If
    
    If pvsSourceCTTableName <> "" Then
        sSqlSelect = sSqlSelect & " UNION " & _
            " SELECT DISTINCT " & _
                " ws.Batch_Run_ID" & _
                ",ws.Subscription_Name" & _
                ",ws.Report_Name" & _
                ",ws.Trigger_Report_Name" & _
                ",ws.Owner_Name" & _
                ",ws.Owner_Login" & _
                ",ws.Schedule_Name" & _
                ",ws.Update_Time" & _
                ",ws.Create_Time" & _
                ",ws.Delivery_Type" & _
                ",ws.Object_ID" & _
                ",ws.Trigger_Object_ID" & _
                ",ws.project_id" & _
                ",ws.INST_ID"

        '-- Concat group name to Contact name
        If pvbIncludeGroupName Then
            '-- show group name
            If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
                sSqlSelect = sSqlSelect & " , b6.login + '.' + b4.login Contact_Name "
            ElseIf gtypSQLTmpTable.nDBID = nOracle Or gtypSQLTmpTable.nDBID = nMySql Or gtypSQLTmpTable.nDBID = nPostgreSQL Then
                sSqlSelect = sSqlSelect & " , concat(concat(b6.login, '.'), b4.login) Contact_Name "
            End If
        Else
            sSqlSelect = sSqlSelect & _
               " , b4.login Contact_Name  "
        End If

        sSqlSelect = sSqlSelect & _
           " , b4.contact_id recipient_object_id " & _
           " , b5.Login Contact_Login "
           
           '-- v2.1r3 Added Contact Info -- This is needed because Contact Group does not exist in Address table
           '-- v2.1r6b Added " , b4.contact_id recipient_object_id "  back.  It is needed for Web Sub search where user has no permission to reports/components
        sSqlSelect = sSqlSelect & _
           " , case when b4.contact_type = 1 THEN 'Contact' " & _
                   " when b4.contact_type = 2 THEN 'Contact Group' " & _
                   " when b4.contact_type = 4 THEN 'User' " & _
                   " when b4.contact_type = 8 THEN 'User Group' " & _
                   " when b4.contact_type = 32  THEN 'Dynamic Recipients' " & _
                   " when b4.contact_type = 16777216  THEN 'Recipients from Content' "
                   
        sSqlSelect = sSqlSelect & " Else " & gsSqlCastChar("b4.contact_type", 20) & " END contact_type "
        sSqlSelect = sSqlSelect & _
           " , b.DISP_NAME Address_Name " & _
           " , b.address Address " & _
           " , b3.object_name Device_Name " & _
           " , b2.address Notification_Address "

        sSqlSelect = sSqlSelect & _
                     " , case when b4.Status Is NULL then 'Unknown' when b4.Status = 0 then 'Inactive' when COALESCE(b.Is_Default,0) <> 0 then 'Default' else 'Active' end Contact_Status "
                     '--" , case when Coalesce(b4.Status,1) = 0 then 'Inactive' when Coalesce(b.Is_Default,0) <> 0 then 'Default' else 'Active' end Contact_Status "
    
        '*mod* v2.1r7t - make sure to convert GUID Object IDs for Sql Server
        '   " , " & gsPurifyGUIDsqlFromSQL("d.object_id") & " object_id " & _
        '   " , " & gsPurifyGUIDsqlFromSQL("d.project_id") & " project_id " &
        sSqlSelect = sSqlSelect & _
           " , ct.contact_id "
               
    'v2.1r2e Don't return Last Run Time to avoid duplicates
    '--       " , " & IIf(gtypSession.sDBPrefixHL <> "N/A", "F.FINISH_TIME", "Null") & " Last_Run_Time " & _
        '*mod* v2.1r7t - make sure to convert GUID Object IDs for Sql Server
        sSqlSelect = sSqlSelect & _
        "FROM " & gtypSession.sDBPrefixMD & "dsscssubinst a "

        '*mod* v2.1r16e
        sSqlSelect = sSqlSelect & _
               " Join " & pvsSourceWSTableName & " ws " & _
               " ON a.INST_ID = ws.INST_ID " & _
               " and ws.contact_type in ('Contact Group') " & _
               " Join " & pvsSourceCTTableName & " ct " & _
               " ON ws.contact_id = ct.original_id " & _
               " and ct.contact_type in (1) "
    
               '-- Email/file default address
        sSqlSelect = sSqlSelect & _
            " left join " & gtypSession.sDBPrefixMD & "Dsscsaddress b  " & _
               " on ct.contact_id = b.contact_id " & _
               " and b.IS_DEFAULT = -1 "
               
                    'Delivery Type in Address:
                    '1 - email
                    '2 - file
                    '4 - printe
                    '512 - MobileAPNSForiPhone
                    '8192 - FTP
                    'select distinct delivery_type from MSTR_MD2.DSSCSaddress
        '-- v2.1r3 Get Notification Email Address
        '-- v2.1r3 Get Notification Device Name
        sSqlSelect = sSqlSelect & _
           " left join " & gtypSession.sDBPrefixMD & "Dsscsaddress b2 " & _
           " on a.notification_addr_id = b2.address_id " & _
           " left join " & gtypSession.sDBPrefixMD & "dssmdobjinfo b3 " & _
           " on b.device_id = " & gsPurifyGUIDsqlFromSQL("b3.object_id")
           
        '-- v2.1r3 Get Contact Type. Also, must join aa.recipient_id to get Contact Group
        sSqlSelect = sSqlSelect & _
           " left join " & gtypSession.sDBPrefixMD & "Dsscscontact b4 " & _
           " on b.contact_id = b4.contact_id " & _
           " left join " & gtypSession.sDBPrefixMD & "dssmdusracct b5 " & _
               " on b4.mstruser_id = " & gsPurifyGUIDsqlFromSQL("b5.object_id")
               
        '-- v2.1r16e Gets Contact Group Name
        If pvbIncludeGroupName Then
            sSqlSelect = sSqlSelect & _
               " left join " & gtypSession.sDBPrefixMD & "Dsscscontact b6 " & _
               " on ct.group_contact_id = b6.contact_id "
        End If
    End If

    If pvsSourceUGTableName <> "" Then
        sSqlSelect = sSqlSelect & " UNION " & _
            "SELECT DISTINCT " & _
                " ws.Batch_Run_ID" & _
                ",ws.Subscription_Name" & _
                ",ws.Report_Name" & _
                ",ws.Trigger_Report_Name" & _
                ",ws.Owner_Name" & _
                ",ws.Owner_Login" & _
                ",ws.Schedule_Name" & _
                ",ws.Update_Time" & _
                ",ws.Create_Time" & _
                ",ws.Delivery_Type" & _
                ",ws.Object_ID" & _
                ",ws.Trigger_Object_ID" & _
                ",ws.project_id" & _
                ",ws.INST_ID"

        '-- Concat group name to Contact name, must use b5.object_name as user may not exist in b4.login (such as BUSINESS USER 4E70890241DBB18E6CA1D8B850952A68)
        If pvbIncludeGroupName Then
            '-- show group name
            If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
                sSqlSelect = sSqlSelect & " , b6.abbreviation + '.' + b5.object_name Contact_Name "
            ElseIf gtypSQLTmpTable.nDBID = nOracle Or gtypSQLTmpTable.nDBID = nMySql Or gtypSQLTmpTable.nDBID = nPostgreSQL Then
                sSqlSelect = sSqlSelect & " , concat(concat(b6.abbreviation, '.'), b5.object_name) Contact_Name "
            End If
        Else
            sSqlSelect = sSqlSelect & _
               " , b5.object_name Contact_Name  "
        End If

        sSqlSelect = sSqlSelect & _
           " , b4.contact_id recipient_object_id " & _
           " , b5.abbreviation Contact_Login "
           '-- v2.1r3 Added Contact Info -- This is needed because Contact Group does not exist in Address table
           '-- v2.1r6b Added " , b4.contact_id recipient_object_id "  back.  It is needed for Web Sub search where user has no permission to reports/components
        sSqlSelect = sSqlSelect & _
           " , case when b4.contact_type = 1 THEN 'Contact' " & _
                   " when b4.contact_type = 2 THEN 'Contact Group' " & _
                   " when b4.contact_type = 4 THEN 'User' " & _
                   " when b4.contact_type = 8 THEN 'User Group' " & _
                   " when b4.contact_type = 32  THEN 'Dynamic Recipients' " & _
                   " when b4.contact_type = 16777216  THEN 'Recipients from Content' "
                   
        sSqlSelect = sSqlSelect & " Else " & gsSqlCastChar("b4.contact_type", 20) & " END contact_type "
        sSqlSelect = sSqlSelect & _
           " , ws.Address_Name " & _
           " , ws.Address " & _
           " , ws.Device_Name " & _
           " , b2.address Notification_Address "
    
        sSqlSelect = sSqlSelect & _
                     " , case when b4.Status Is NULL then 'Unknown' when b4.Status = 0 then 'Inactive' else 'Active' end Contact_Status "
                     '--" , case when Coalesce(b4.Status,1) = 0 then 'Inactive' when Coalesce(b.Is_Default,0) <> 0 then 'Default' else 'Active' end Contact_Status "
    
        '*mod* v2.1r7t - make sure to convert GUID Object IDs for Sql Server
        '   " , " & gsPurifyGUIDsqlFromSQL("d.object_id") & " object_id " & _
        '   " , " & gsPurifyGUIDsqlFromSQL("d.project_id") & " project_id " &
        sSqlSelect = sSqlSelect & _
           " , ug.object_id Contact_ID "
            
    'v2.1r2e Don't return Last Run Time to avoid duplicates
    '--       " , " & IIf(gtypSession.sDBPrefixHL <> "N/A", "F.FINISH_TIME", "Null") & " Last_Run_Time " & _
        '*mod* v2.1r7t - make sure to convert GUID Object IDs for Sql Server
        sSqlSelect = sSqlSelect & _
            "FROM " & gtypSession.sDBPrefixMD & "dsscssubinst a "

        '*mod* v2.1r16e
        sSqlSelect = sSqlSelect & _
               " Join " & pvsSourceWSTableName & " ws " & _
               " ON a.INST_ID = ws.INST_ID " & _
               " and ws.contact_type in ('User Group') " & _
               " Join " & pvsSourceUGTableName & " ug " & _
               " ON ws.contact_id = ug.original_id " & _
               " and ug.object_type = 34 and ug.subtype = 8704 "    '-- Gets members only, exclude group: 8705
    
        
                    'Delivery Type in Address:
                    '1 - email
                    '2 - file
                    '4 - printe
                    '512 - MobileAPNSForiPhone
                    '8192 - FTP
                    'select distinct delivery_type from MSTR_MD2.DSSCSaddress
    
        '-- v2.1r3 Get Notification Email Address
        sSqlSelect = sSqlSelect & _
           " left join " & gtypSession.sDBPrefixMD & "Dsscsaddress b2 " & _
           " on a.notification_addr_id = b2.address_id "

        '-- v2.1r3 Get Contact Type ==> must join to b5 using ug.object_id user may not exist in Contact table ==> b4.mstruser_id
        sSqlSelect = sSqlSelect & _
           " left join " & gtypSession.sDBPrefixMD & "Dsscscontact b4 " & _
           " on ug.object_id = b4.contact_id  " & _
           " left join " & gtypSession.sDBPrefixMD & "dssmdobjinfo b5 " & _
               " on ug.object_id = " & gsPurifyGUIDsqlFromSQL("b5.object_id")
               
        '-- v2.1r16e Gets User Group Name
        If pvbIncludeGroupName Then
            sSqlSelect = sSqlSelect & _
               " left join " & gtypSession.sDBPrefixMD & "dssmdobjinfo b6 " & _
               " on ug.group_id = b6.object_id "
        End If
    End If

    sSqlFrom = " From (" & sSqlSelect & ") ws2 "
    sSqlSelect = "Select Distinct * "
    If pvsAddionalFilter <> "" Then
        sSqlFrom = sSqlFrom & " Where " & pvsAddionalFilter
    End If
    
    gsSQLtmpWebSubCombine = gsSqlTmpTableCreation(pvsTargetTableName, sSqlSelect, sSqlFrom)
End Function

Public Function gsSQLtmpWebSubReport(ByVal pvsTargetTableName As String, ByVal pvsSourceTableName As String) As String
'-------------------------------------
' Get web subscription info for generating subscripton update scripts
' Only need following info: Select distinct inst_id,Subscription_Name,Owner_Name,Owner_Login,Delivery_Type,Schedule_Name,Report_Name,Report_Owner_Login
'  pvsSourceTableName ==>  Contains Web Subscription ID
'  Return Web Subscription with Report Owner
'-------------------------------------

Dim sSqlSelect As String
Dim sSqlFrom As String

    gsProcName = "Get Web Subscriptions"
'-------------------------------------
'-- Query Web Subscriptions
'-------------------------------------
'-- Query against Distribution Services
'*mod* v2.1z1 added Contact ID to output for recipient View access check
    sSqlSelect = _
    "SELECT  " & _
       " a.DISP_NAME Subscription_Name " & _
       " , d.object_name Report_Name " & _
       " , c.object_name Owner_Name " & _
       " , c2.Login Owner_Login "

    
    sSqlSelect = sSqlSelect & _
       " , e.object_name Schedule_Name " & _
       " , a.MODIFICATION_TIME Update_Time " & _
       " , a.CREATION_TIME Create_Time " & _
       " , case when a.delivery_type = 16 THEN 'HistoryList' " & _
               " when a.delivery_type = 8192 THEN 'FTP' " & _
               " when a.delivery_type = 4096 THEN 'PersonalView' " & _
               " when a.delivery_type = 128 THEN 'Mobile' " & _
               " when a.delivery_type = 64  THEN 'CacheUpdate' " & _
               " when a.delivery_type = 4  THEN 'Print' " & _
               " when a.delivery_type = 2  THEN 'File' " & _
               " when a.delivery_type = 1  THEN 'Email' "

    sSqlSelect = sSqlSelect & " Else " & gsSqlCastChar("a.delivery_type", 20) & " END Delivery_Type "
                 
    '*mod* v2.1r7t - make sure to convert GUID Object IDs for Sql Server
       '" , " & gsPurifyGUIDsqlFromSQL("d.object_id") & " object_id " & _
       '" , " & gsPurifyGUIDsqlFromSQL("d.project_id") & " project_id " &
    sSqlSelect = sSqlSelect & _
       " , d.object_id " & _
       " , d.project_id " & _
       " , d2.login Report_Owner_Login " & _
       " , a.INST_ID "
           
'v2.1r2e Don't return Last Run Time to avoid duplicates
'--       " , " & IIf(gtypSession.sDBPrefixHL <> "N/A", "F.FINISH_TIME", "Null") & " Last_Run_Time " & _
    '*mod* v2.1r7t - make sure to convert GUID Object IDs for Sql Server
    sSqlFrom = _
    "FROM " & gtypSession.sDBPrefixMD & "dsscssubinst a " & _
       " join " & gtypSession.sDBPrefixMD & "dssmdobjinfo c " & _
           " on a.owner_id = " & gsPurifyGUIDsqlFromSQL("c.object_id") & _
       " join " & gtypSession.sDBPrefixMD & "dssmdusracct c2 " & _
           " on a.owner_id = " & gsPurifyGUIDsqlFromSQL("c2.object_id") & _
       " join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d " & _
           " on a.data_id = " & gsPurifyGUIDsqlFromSQL("d.object_id") & _
           " and a.project_id = " & gsPurifyGUIDsqlFromSQL("d.project_id") & _
           " and d.project_id = '" & gtypSession.sMstrProjectID & "'" & _
       " join   " & gtypSession.sDBPrefixMD & "dssmdobjinfo e " & _
           " on a.TRIGGER_ID = " & gsPurifyGUIDsqlFromSQL("e.object_id")

    '-- v2.1r7o gets report owner login
    sSqlFrom = sSqlFrom & _
       " join " & gtypSession.sDBPrefixMD & "dssmdusracct d2 " & _
           " on d.owner_id = d2.object_id "
           
    '*mod* v2.1r7t - make sure to convert GUID IDs (from source table) for Sql Server
    sSqlFrom = sSqlFrom & _
           " Join " & pvsSourceTableName & " xb " & _
           " ON a.inst_id = " & gsPurifyGUIDsqlFromSQL("xb.object_id")

    gsSQLtmpWebSubReport = gsSqlTmpTableCreation(pvsTargetTableName, sSqlSelect, sSqlFrom)
End Function

Public Function gsSQLTmpWebSubReportID(ByVal pvsTargetTableName As String, ByVal pvsSourceTableName As String) As String
Dim sSqlSelect As String
Dim sSqlFrom As String

    gsProcName = "Get Web Subscription Report IDs"
    sSqlSelect = _
    "SELECT  DISTINCT a.object_id, a.project_id "

'   *mod* v2.1r8a Include Trigger Report Id
'    "FROM " & pvsSourceTableName & " a where a.project_id = '" & gtypSession.sMstrProjectID & "'"
    sSqlFrom = _
    "FROM (SELECT object_id, project_id FROM " & pvsSourceTableName & " where project_id = '" & gtypSession.sMstrProjectID & "'" & _
    " UNION SELECT trigger_object_id object_id, project_id FROM " & pvsSourceTableName & " where project_id = '" & gtypSession.sMstrProjectID & "') a "

    gsSQLTmpWebSubReportID = gsSqlTmpTableCreation(pvsTargetTableName, sSqlSelect, sSqlFrom)
End Function

Public Function gsSQLtmpWebSubTemplate(ByVal pvsTargetTableName As String, ByVal pvsSourceTableName As String) As String
'-------------------------------------
'  pvsSourceTableName ==>  Contains Web Subscription ID
'  Do not return subscribers due to too many cross duplication rows between
'-------------------------------------
Dim sSqlSelect As String
Dim sSqlFrom As String

    gsProcName = "Get Web Subscription Templates"
'-------------------------------------
'-- Query Web Subscriptions
'-------------------------------------
    sSqlSelect = _
    "SELECT  DISTINCT " & _
       " a.DISP_NAME Subscription_Name " & _
       " , d.object_name Report_Name " & _
       ", d.object_type as Object_Type_Num, d.subtype as Object_SubType_Num, " & gsSQLDocTypeByViewMedia("d", "") & " as Object_Extended_Type_Num " & _
       " , c.object_name Owner_Name " & _
       " , c2.Login Owner_Login " & _
       " , e.object_name Schedule_Name " & _
       " , a.MODIFICATION_TIME Update_Time " & _
       " , a.CREATION_TIME Create_Time " & _
       " , case when a.delivery_type = 16 THEN 'HistoryList' " & _
               " when a.delivery_type = 8192 THEN 'FTP' " & _
               " when a.delivery_type = 4096 THEN 'PersonalView' " & _
               " when a.delivery_type = 128 THEN 'Mobile' " & _
               " when a.delivery_type = 64  THEN 'CacheUpdate' " & _
               " when a.delivery_type = 4  THEN 'Print' " & _
               " when a.delivery_type = 2  THEN 'File' " & _
               " when a.delivery_type = 1  THEN 'Email' "
       
    sSqlSelect = sSqlSelect & " Else " & gsSqlCastChar("a.delivery_type", 20) & " END Delivery_Type "
    sSqlSelect = sSqlSelect & _
       " , b2.DISP_NAME Notification_Address_Name " & _
       " , b2.address Notification_Address " & _
       " , b2.IS_DEFAULT " & _
       " , b3.object_name Notification_Device_Name " & _
       " , a.Is_Personalized " & _
       " , a.Changeability " & _
       " , d.object_id " & _
       " , d.project_id " & _
       " , a.INST_ID " & _
       " , p.Sub_ID Personalize_ID " & _
       " , p.Val_SEQ " & _
       " , p.P_Value Personalize_Text " & _
       " , p3.object_name Target_Application "
        '*mod* v2.1r11n^^
           
'v2.1r2e Don't return Last Run Time to avoid duplicates
'--       " , " & IIf(gtypSession.sDBPrefixHL <> "N/A", "F.FINISH_TIME", "Null") & " Last_Run_Time " & _

    '*mod* v2.1r7t - make sure to convert GUID Object IDs for Sql Server
    sSqlFrom = _
    "FROM " & gtypSession.sDBPrefixMD & "dsscssubinst a " & _
       " join " & gtypSession.sDBPrefixMD & "dssmdobjinfo c " & _
           " on a.owner_id = " & gsPurifyGUIDsqlFromSQL("c.object_id") & _
       " join " & gtypSession.sDBPrefixMD & "dssmdusracct c2 " & _
           " on a.owner_id = " & gsPurifyGUIDsqlFromSQL("c2.object_id") & _
       " join   " & gtypSession.sDBPrefixMD & "dssmdobjinfo e " & _
           " on a.TRIGGER_ID = " & gsPurifyGUIDsqlFromSQL("e.object_id") & _
       " join (  " & _
               " select * " & _
               " from " & gtypSession.sDBPrefixMD & "dsscssubinst a1 " & _
               " where a1.Parent_ID <> " & gsSql0PureGUID & " " & _
               " ) aa " & _
               " on aa.Parent_ID = a.inst_id "
               '--^^ Recipients and History List are saved in a sublevel subscriptions
     
    '-- v2.1r8a Get Trigger Report on Alert Subscriptions
    '           Note: using Left Join to dssmdobjinfo runs much faster in sqlserver
    sSqlFrom = sSqlFrom & _
       " left join " & gtypSession.sDBPrefixMD & "Dsscspsnlztn t1 " & _
           " on a.INST_ID = t1.inst_id and t1.SUB_ID=33554432 and t1.VAL_SEQ=0 " & _
        " left join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d " & _
           " on COALESCE(" & gsExtractGUIDsql("t1.P_VALUE", "'<alert id='", 11) & ", a.data_id) = " & gsPurifyGUIDsqlFromSQL("d.object_id") & _
           " and a.project_id = " & gsPurifyGUIDsqlFromSQL("d.project_id") & _
           " and d.project_id = '" & gtypSession.sMstrProjectID & "'"

'       " join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d " & _
'           " on a.data_id = " & gsPurifyGUIDsqlFromSQL("d.object_id") & _
'           " and a.project_id = " & gsPurifyGUIDsqlFromSQL("d.project_id") & _
'           " and d.project_id = '" & gtypSession.sMstrProjectID & "'"

    '*mod* v2.1r2d History List
    If gtypSession.sDBPrefixHL <> "N/A" Then
        sSqlFrom = sSqlFrom & _
           " left join " & gtypSession.sDBPrefixHL & "dsscsmsginfo f  " & _
               " on  aa.inst_id = f.SUBINST_ID "
    End If

    '-- v2.1r3 Get Notification Email Address
    sSqlFrom = sSqlFrom & _
       " left join " & gtypSession.sDBPrefixMD & "Dsscsaddress b2 " & _
       " on a.notification_addr_id = b2.address_id "

    '-- v2.1r3 Get Device Name
    sSqlFrom = sSqlFrom & _
       " left join " & gtypSession.sDBPrefixMD & "dssmdobjinfo b3 " & _
       " on b2.device_id = " & gsPurifyGUIDsqlFromSQL("b3.object_id")
       
    '-- v2.1r3 Get Personalization Data
    sSqlFrom = sSqlFrom & _
       " left join " & gtypSession.sDBPrefixMD & "Dsscspsnlztn p " & _
       " on a.inst_id = p.inst_id "

    '-- v2.1r3 Get Target Application for Mobile Subscriptions
    sSqlFrom = sSqlFrom & _
       " left join " & gtypSession.sDBPrefixMD & "Dsscspsnlztn p2 " & _
       " on aa.inst_id = p2.inst_id and aa.delivery_type = 128 and p2.sub_id = 16777216 " & _
       " left join " & gtypSession.sDBPrefixMD & "dssmdobjinfo p3 "
      
    '*mod* v2.1r8a
    sSqlFrom = sSqlFrom & " on " & gsPurifyGUIDsqlFromSQL("p3.object_id") & " = " & gsExtractGUIDsql("p2.P_Value", "'***MobileAppDeviceID++++'", 24)
      
'    '*mod* v2.1r7t... not sure GUID format ?? make sure to convert GUID Object IDs for Sql Server
'    ' --Extract ID from P_Value: ***MobileAppDeviceID++++F2A756E81E8A4F1E95BCFCCB5B91125B***
'    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
'        '*mod* v2.1r7t - make sure to convert GUID Object IDs for Sql Server
'        'sSqlFrom = sSqlFrom & " on " & gsPurifyGUIDsqlFromSQL("p3.object_id") & " = Substring(p2.P_Value, CharIndex('***MobileAppDeviceID++++', p2.P_Value)+24, 32) "
'        '*mod* v2.1r8a
'        sSqlFrom = sSqlFrom & " on " & gsPurifyGUIDsqlFromSQL("p3.object_id") & " = " & gsExtractGUIDsql("p2.P_Value", "'***MobileAppDeviceID++++'", 24)
'    ElseIf gtypSQLTmpTable.nDBID = nOracle Then
'        'sSqlFrom = sSqlFrom & " on p3.object_id = Substr(p2.P_Value, Instr(p2.P_Value, '***MobileAppDeviceID++++')+24, 32) "
'        '*mod* v2.1r8a
'        sSqlFrom = sSqlFrom & " on p3.object_id = " & gsExtractGUIDsql("p2.P_Value", "'***MobileAppDeviceID++++'", 24)
'    End If

    '*mod* v2.1r7t - make sure to convert GUID IDs (from source table) for Sql Server
    sSqlFrom = sSqlFrom & _
           " Join " & pvsSourceTableName & " xb " & _
           " ON a.inst_id = " & gsPurifyGUIDsqlFromSQL("xb.object_id")
    
    '*mod* v2.1r11n
    sSqlFrom = sSqlFrom & _
            " Order by a.INST_ID, p.Sub_ID, p.Val_SEQ "

    gsSQLtmpWebSubTemplate = gsSqlTmpTableCreation(pvsTargetTableName, sSqlSelect, sSqlFrom)
End Function

Public Function gsSQLtmpWebSubUsers(ByVal pvsTargetTableName As String, ByVal pvsSourceTableName As String) As String
'-------------------------------------
'  pvsSourceTableName ==>  Contains Web Subscription ID
'  Return subscribers only
'-------------------------------------
'Contact_Type:
'1 ==> Contact
'2 ==> Contact Group
'4 ==> User
'8 ==> User Group
'32 ==> DRL  "DRL IW W Territory East West ISM"
'16777216 ==> Burst "Recipient From Content"
'select * from MSTR_MD2.DSSCSCONTACT where login in ('Chung Lau', 'Kathy Fisher', 'Chung Lau Contact', 'Chung Lau ContactGroup')
'
'Delivery Type in Address:
'1 - email
'2 - file
'4 - printe
'512 - MobileAPNSForiPhone
'8192 - FTP
'select distinct delivery_type from MSTR_MD2.DSSCSaddress
'-------------------------------------
Dim sSqlSelect As String
Dim sSqlFrom As String

    gsProcName = "Get Web Subscription Templates Users"
'-------------------------------------
'-- Query Web Subscriptions
'-------------------------------------
'-- Query against Distribution Services
'*mod* v2.1z1 added Contact ID to output for recipient View access check
    sSqlSelect = _
    "SELECT  DISTINCT " & _
       " z.subtype Subscriber_SubType " & _
       " , b.DISP_NAME Address_Name " & _
       " , b.address Address " & _
       " , b.Is_Default Address_Default_Flag " & _
       " , b3.object_name Address_Device_Name " & _
       " , b4.contact_type contact_type_num " & _
       " , b4.login Contact_Name " & _
       " , b5.Login Contact_Login " & _
       " , c.Login Subscription_Owner_Login " & _
       " , a.INST_ID " & _
       " , aa.recipient_id Contact_id "

    '--v2.1r3e need following for Sync Subscribers
    sSqlSelect = _
        sSqlSelect & _
        " , a.DISP_NAME Subscription_Name " & _
        " , case when a.delivery_type = 16 THEN 'HistoryList' " & _
               " when a.delivery_type = 8192 THEN 'FTP' " & _
               " when a.delivery_type = 4096 THEN 'PersonalView' " & _
               " when a.delivery_type = 128 THEN 'Mobile' " & _
               " when a.delivery_type = 64  THEN 'CacheUpdate' " & _
               " when a.delivery_type = 4  THEN 'Print' " & _
               " when a.delivery_type = 2  THEN 'File' " & _
               " when a.delivery_type = 1  THEN 'Email' "
       
    sSqlSelect = sSqlSelect & " Else " & gsSqlCastChar("a.delivery_type", 20) & " END Delivery_Type "
    sSqlSelect = sSqlSelect & _
                    " , case when b4.Status Is NULL then 'Unknown' when b4.Status = 0 then 'Inactive' when COALESCE(b.Is_Default,0) <> 0 then 'Default' else 'Active' end Contact_Status "
    
    '-- If report owner is disabled, add ! in front of owner Login
    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
        sSqlSelect = sSqlSelect & " , case when COALESCE(d3.Status,1) = 0 then '!' + d2.login else d2.login end Report_Owner_Login "
    ElseIf gtypSQLTmpTable.nDBID = nOracle Or gtypSQLTmpTable.nDBID = nMySql Or gtypSQLTmpTable.nDBID = nPostgreSQL Then
        sSqlSelect = sSqlSelect & " , case when COALESCE(d3.Status,1) = 0 then Concat('!' , d2.login) else d2.login end Report_Owner_Login "
    End If
         
    '*mod* v2.1r9d - owner ID cannot join to Contact table
    sSqlFrom = _
    "FROM " & gtypSession.sDBPrefixMD & "dsscssubinst a " & _
       " join " & gtypSession.sDBPrefixMD & "dssmdusracct c " & _
           " on a.owner_id = " & gsPurifyGUIDsqlFromSQL("c.object_id") & _
       " join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d " & _
           " on a.data_id = " & gsPurifyGUIDsqlFromSQL("d.object_id") & _
           " and a.project_id = " & gsPurifyGUIDsqlFromSQL("d.project_id") & _
           " and d.project_id = '" & gtypSession.sMstrProjectID & "'" & _
       " join " & gtypSession.sDBPrefixMD & "dssmdusracct d2 " & _
           " on d.owner_id = d2.object_id" & _
       " join " & gtypSession.sDBPrefixMD & "dsscscontact d3 " & _
          "  on " & gsPurifyGUIDsqlFromSQL("d.owner_id") & " = d3.contact_id " & _
       " join (  " & _
               " select * " & _
               " from " & gtypSession.sDBPrefixMD & "dsscssubinst a1 " & _
               " where a1.Parent_ID <> " & gsSql0PureGUID & " " & _
               " ) aa " & _
               " on aa.Parent_ID = a.inst_id "
               
           '-- Email Recipient
    sSqlFrom = sSqlFrom & _
        " left join " & gtypSession.sDBPrefixMD & "Dsscsaddress b  " & _
           " on aa.recipient_id = b.contact_id " & _
              " and (( " & _
                   " a.address_id = b.address_id " & _
                   " or " & _
                   " aa.address_id = b.address_id " & _
                   " ) " & _
                " or " & _
                   " (   " & _
                   " aa.address_id = " & gsSql0PureGUID & " " & _
                   " and a.delivery_type = 1 " & _
                   " and b.delivery_type = 1 " & _
                   " and b.IS_DEFAULT = -1 " & _
                   " ) " & _
                " or (  " & _
                   " aa.address_id = " & gsSql0PureGUID & " " & _
                   " and a.delivery_type = 2 " & _
                   " and b.delivery_type = 2 " & _
                   " and b.IS_DEFAULT = -1 " & _
                   " ) " & _
               " ) "
    
    '-- Use Left Join below to account for Dynamic Recipient List
    sSqlFrom = sSqlFrom & _
       " left join " & gtypSession.sDBPrefixMD & "dssmdobjinfo z " & _
       " on aa.recipient_id = " & gsPurifyGUIDsqlFromSQL("z.object_id")
    '-- v2.1r3 Get Device Name
    sSqlFrom = sSqlFrom & _
       " left join " & gtypSession.sDBPrefixMD & "dssmdobjinfo b3 " & _
       " on b.device_id = " & gsPurifyGUIDsqlFromSQL("b3.object_id")

    '-- v2.1r3 Get Contact Type. Also, must join aa.recipient_id to get Contact Group
    sSqlFrom = sSqlFrom & _
       " left join " & gtypSession.sDBPrefixMD & "Dsscscontact b4 " & _
       " on b.contact_id = b4.contact_id or aa.recipient_id = b4.contact_id " & _
       " left join " & gtypSession.sDBPrefixMD & "dssmdusracct b5 " & _
           " on b4.mstruser_id = " & gsPurifyGUIDsqlFromSQL("b5.object_id")

    '*mod* v2.1r7t - make sure to convert GUID IDs (from source table) for Sql Server
    sSqlFrom = sSqlFrom & _
           " Join " & pvsSourceTableName & " xb " & _
           " ON a.inst_id = " & gsPurifyGUIDsqlFromSQL("xb.object_id")
           
    sSqlFrom = sSqlFrom & _
           " Order By a.INST_ID, b4.Contact_Type DESC "
       
    gsSQLtmpWebSubUsers = gsSqlTmpTableCreation(pvsTargetTableName, sSqlSelect, sSqlFrom)
End Function

'*mod* v2.1z1 Public Function gsSQLtmpNCS(ByVal pvsUserLoginCode As String, ByVal pvsSourceTableName As String, ByVal pvsTargetTableName As String, ByVal pvsFolderTableName As String, ByVal pvlBatchRunId As Long) As String
Public Function gsSQLtmpNCS(ByVal pvsUserLoginCode As String, ByVal pvsSourceTableName As String, ByVal pvsTargetTableName As String, ByVal pvlBatchRunId As Long, Optional ByVal pvsAddionalFilter As String) As String
'------------- Temp Table Usage ----------------
'   Input:
'pvsUserLoginCode       ==> Search by User Id
'pvsSourceTableName     ==> Report Names to match if search is by report name, if search is by user id or additional condition, this table is not used
'pvsAddionalFilter   ==> if both pvsUserLoginCode and pvsSourceTableName are empty, then use pvsAddionalFilter
'   Output:
'pvsTargetTableName     ==> NCS Objects
'   Temporary:
'none
'-----------------------------------------------
'-- if pvsUserLoginCode = "" then join to Source table to match by report name
Dim sSqlSelect As String
Dim sSqlFrom As String

    gsProcName = "Get NCS Subscriptions"
'-------------------------------------
'-- Query NCS Subscriptions
'-- ** NCS joining is by report name in IS vs name in NCS Document's Advanced Properties/General/Name or embedded in Publication.
'-- ** If IS report name is not the same as NCS report name, no match will be found.
'-- ** EM captures NCS report name when running from NCS, not IS report name.
'-------------------------------------

'--    g.MR_INDEP_OBJID = '8BB0FD1425D24EBDB8AE24705D06F500'        --<= NCS Service ID
'--    lower(h.MR_OBJECT_NAME) like lower('new opp%')             --<= NCS Service Name
'--    (Substr(f.MR_USER_UPNAME, 1, instr(f.MR_USER_UPNAME, '(') -1)like upper('%berwald%') --<== Recipient Full Name (brought over from I.S.)
'--       or lower(b.mr_physical_add) like lower('%Kevin.berwald@pacificlife.com%'))        --<== Recipient email address here: peter.han@pacificlife.com
'--    lower(d.mr_object_name) like lower('%Wholesaler%')         --<== Subscription Set Name
'--    lower(h2.MR_OBJECT_NAME) like lower('weekly%')             --<= NCS Schedule Name
'--    lower(c3.Attached_Doc_Name) like lower('%combine%')        --<= NCS Attached Document Name
'--    lower(c3.Nested_Doc_Name) like lower('%TA 40b %')          --<= Name is based on Document's Advanced Properties/General/Name or embedded in Publication


    '-- Main Select

    sSqlSelect = " SELECT  distinct " & pvlBatchRunId & " as Batch_Run_ID " & _
                 " , " & sNCSUserNameExtractSQL("f.MR_USER_NAME") & " Recipient_Name "

'*mod* v2.1z1
'   sSqlSelect = sSqlSelect & _
'        " , b.mr_physical_add Recipient_Address " & _
'        " , b.mr_address_id Recipient_Address_ID " & _
'        " , b.MR_ADDRESS_NAME Recipient_Address_Name " & _
'        " , b.MR_ADD_DISPLAY Recipient_Address_Display " & _
'        " , h.MR_OBJECT_NAME Service_Name " & _
'        " , x.Folder_Path " & _  ==> added at final join
'        " , h2.MR_OBJECT_NAME Schedule_Name "
        
   sSqlSelect = sSqlSelect & _
        " , b.mr_physical_add Recipient_Address " & _
        " , b.mr_address_id Recipient_Address_ID " & _
        " , b.MR_ADDRESS_NAME Recipient_Address_Name " & _
        " , b.MR_ADD_DISPLAY Recipient_Address_Display " & _
        " , z1.login Recipient_Login " & _
        " , b1.MR_OBJECT_NAME Device_Name " & _
        " , h.MR_OBJECT_NAME Service_Name " & _
        " , h2.MR_OBJECT_NAME Schedule_Name " & _
        " , d.mr_object_name Subscription_Set_Name " & _
        " , c3.Attached_Doc_Name " & _
        " , c3.Doc_Type Attached_Doc_Type " & _
        " , c3.Nested_Doc_Name " & _
        " , h.mr_object_id Service_ID " & _
        " , a.mr_sub_set_id Subscription_Set_ID " & _
        " , c2.mr_created_time  Create_Time " & _
        " , c2.mr_mod_time Update_Time "
   
        'd -- Subscription Name
        'g -- Find parent ==> Service Name
        'h -- Service Name
        'g2 -- Find children ==> schedules
        'h2 -- Schedule Name
   sSqlFrom = _
        " FROM " & gtypSession.sDBPrefixSB & "mstrsubscriptions a " & _
        " join " & gtypSession.sDBPrefixSB & "mstraddresses b " & _
        "     on a.mr_address_id = b.mr_address_id " & _
        " left join " & gtypSession.sDBPrefixSB & "mstrobjnames b1 " & _
        "     on b.mr_device_id = b1.mr_object_id " & _
        " Join " & gtypSession.sDBPrefixNC & "mstrobjinfo c " & _
        "     on a.mr_sub_set_id = c.mr_object_id " & _
        " join " & gtypSession.sDBPrefixNC & "mstrobjnames d " & _
        "     on c.mr_object_id = d.mr_object_id " & _
        " join " & gtypSession.sDBPrefixSB & "MSTRUSERS f " & _
        "     on b.MR_USER_ID = f.MR_USER_ID " & _
        " join " & gtypSession.sDBPrefixNC & "MSTROBJDEPN g " & _
        "     on g.MR_DEPN_OBJID = a.MR_SUB_SET_ID " & _
        " Join " & gtypSession.sDBPrefixNC & "mstrobjnames h " & _
        "     on h.mr_object_id = g.MR_INDEP_OBJID " & _
        " Join " & gtypSession.sDBPrefixNC & "mstrobjinfo c2 " & _
        "     on h.mr_object_id = c2.mr_object_id " & _
        " join " & gtypSession.sDBPrefixNC & "MSTROBJDEPN g2 " & _
        "     on g2.MR_INDEP_OBJID = h.mr_object_id " & _
        "        and g2.MR_DEPNOBJ_TYPE = 18 " & _
        " Join " & gtypSession.sDBPrefixNC & "mstrobjnames h2 " & _
        "     on h2.mr_object_id = g2.MR_DEPN_OBJID "
        
        '-- Subscription & Schedule relationship store in XML format
        '--bcid="C63925D0D29B45E2A11C883],[7CC571366" refid="R3"/><schedule bcid="80C636B4959211D4BE6600C04F0E93B7"
        '--bcid="18E8C4E942A848E0BD177D1F42032127" refid="R3"/&gt;&lt;schedule bcid="AD7ADB6B887343238E80C05644564722"
    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
        sSqlFrom = sSqlFrom & _
            " join (" & _
            " SELECT b.mr_object_id , STUFF(( SELECT  ','+ a.MR_DEFINITION " & _
                                           " FROM " & gtypSession.sDBPrefixNC & "MSTROBJDEFN a " & _
                                           " WHERE b.mr_object_id = a.mr_object_id " & _
                                             " FOR XML PATH('') " & _
                                             " ), 1 , 1, '' " & _
                                           " )  xmlSubSch " & _
             " From " & gtypSession.sDBPrefixNC & "MSTROBJDEFN b " & _
             " Where b.mr_object_type = 19 " & _
             " Group By b.mr_object_id " & _
             " ) d2 " & _
            " on h.mr_object_id  = d2.mr_object_id  " & _
            " and Charindex('bcid=""' + a.mr_sub_set_id + '"" refid=""R', replace(xmlSubSch, '],[', '')) > 0  " & _
            " and Charindex('schedule bcid=""' + h2.mr_object_id, replace(xmlSubSch, '],[', '')) > 0  "
            
    ElseIf gtypSQLTmpTable.nDBID = nOracle Then
        sSqlFrom = sSqlFrom & _
            " join ( " & _
                 " Select mr_object_id, listagg(MR_DEFINITION,',') within group( order by MR_DEFINITION_SEQ) xmlSubSch " & _
                 " From " & gtypSession.sDBPrefixNC & "MSTROBJDEFN " & _
                 " Where mr_object_type = 19 " & _
                 " Group By mr_object_id " & _
                 " ) d2 " & _
                " on h.mr_object_id  = d2.mr_object_id " & _
                " and regexp_instr(replace(xmlSubSch, '],[', ''), 'bcid\=\""' || a.mr_sub_set_id || '\"" refid\=\""R' || '[1-9]' || '\""\/\>\<schedule bcid\=\""' || h2.mr_object_id) > 0 "
    ElseIf gtypSQLTmpTable.nDBID = nMySql Then
    '*mod* v2.1r11k ???
    'http://www.sqlines.com/mysql/functions/group_concat
    'https://stackoverflow.com/questions/995373/mysql-sort-group-concat-values
    'https://stackoverflow.com/questions/20738142/stuff-and-for-xml-path-alternative-in-mysql-for-the-following-stored-prodedu
        'GROUP_CONCAT(Concat(MR_DEFINITION,',') order by MR_DEFINITION_SEQ) xmlSubSch
        sSqlFrom = sSqlFrom & _
            " join ( " & _
                 " Select mr_object_id, GROUP_CONCAT(Concat(MR_DEFINITION,',') order by MR_DEFINITION_SEQ) xmlSubSch " & _
                 " From " & gtypSession.sDBPrefixNC & "MSTROBJDEFN " & _
                 " Where mr_object_type = 19 " & _
                 " Group By mr_object_id " & _
                 " ) d2 " & _
            " on h.mr_object_id  = d2.mr_object_id  " & _
            " and LOCATE(Concat(Concat('bcid=""' , a.mr_sub_set_id) , '"" refid=""R'), replace(xmlSubSch, '],[', '')) > 0  " & _
            " and LOCATE(Concat('schedule bcid=""' , h2.mr_object_id), replace(xmlSubSch, '],[', '')) > 0  "
    ElseIf gtypSQLTmpTable.nDBID = nPostgreSQL Then
        sSqlFrom = sSqlFrom & _
            " join ( " & _
                 " Select mr_object_id, GROUP_CONCAT(Concat(MR_DEFINITION,',') order by MR_DEFINITION_SEQ) xmlSubSch " & _
                 " From " & gtypSession.sDBPrefixNC & "MSTROBJDEFN " & _
                 " Where mr_object_type = 19 " & _
                 " Group By mr_object_id " & _
                 " ) d2 " & _
            " on h.mr_object_id  = d2.mr_object_id  " & _
            " and POSITION(Concat(Concat('bcid=""' IN a.mr_sub_set_id) , '"" refid=""R'), replace(xmlSubSch, '],[', '')) > 0  " & _
            " and POSITION(Concat('schedule bcid=""' IN h2.mr_object_id), replace(xmlSubSch, '],[', '')) > 0  "
    End If
   
    '-- Get Document
    'c2 -- Attachment Name - actual NCS document filename
    'b3 -- Attacment Contents
    'c3 --<= Name is based on Document's Advanced Properties/General/Name or embedded in Publication
    'in (4) -- documents
    'd3.MR_OBJECT_SUBTYPE not in (1) -- 1=Service Name, 3=Email header/body, 7=excel, 13,14=pdf
    sSqlFrom = sSqlFrom & _
        " Join (" & _
            " SELECT b.MR_INDEP_OBJID, c2.MR_OBJECT_NAME as Attached_Doc_Name, c3.MR_OBJECT_NAME Nested_Doc_Name,  c3.mr_object_id doc_id " & _
                   " , CASE WHEN d3.MR_OBJECT_SUBTYPE = 7 THEN 'Excel' " & _
                   "   WHEN d3.MR_OBJECT_SUBTYPE IN (3) THEN 'Info Obj' " & _
                   "   WHEN d3.MR_OBJECT_SUBTYPE IN (14) THEN 'PDF' " & _
                   "   WHEN d3.MR_OBJECT_SUBTYPE IN (13) THEN 'PDF' " & _
                   "   WHEN d3.MR_OBJECT_SUBTYPE IN (0) THEN 'HTML' "               '--*mod* v2.1r2b used for Email Body
                   
    sSqlFrom = sSqlFrom & " Else " & gsSqlCastChar("d3.MR_OBJECT_SUBTYPE", 20) & " END Doc_Type "
    sSqlFrom = sSqlFrom & _
            " from " & gtypSession.sDBPrefixNC & "MSTROBJDEPN b " & _
                " join " & gtypSession.sDBPrefixNC & "MSTROBJDEPN b2 " & _
                " on b2.MR_INDEP_OBJID = b.MR_DEPN_OBJID " & _
                " join " & gtypSession.sDBPrefixNC & "MSTROBJNAMES c2 " & _
                " on b2.MR_DEPN_OBJID  = c2.mr_object_id " & _
                " join " & gtypSession.sDBPrefixNC & "MSTROBJDEPN b3 " & _
                " on b3.MR_INDEP_OBJID = b2.MR_DEPN_OBJID " & _
                " join " & gtypSession.sDBPrefixNC & "MSTROBJNAMES c3 " & _
                " on b3.MR_DEPN_OBJID  = c3.mr_object_id " & _
                " join " & gtypSession.sDBPrefixNC & "mstrobjinfo d3 " & _
                " on b3.MR_DEPN_OBJID  = d3.mr_object_id " & _
                " and d3.MR_OBJECT_TYPE in (4)  " & _
                " and d3.MR_OBJECT_SUBTYPE not in (1) " & _
            " ) c3 " & _
              " on c3.MR_INDEP_OBJID = g.MR_INDEP_OBJID "
                        
'*mod* v2.1z1
'        sSqlFrom = sSqlFrom & " JOIN (select x.original_id, x.folder_path " & _
'                " from " & pvsFolderTableName & " x " & _
'                " where MR_Parent_ID IN (select mr_object_id from " & gtypSession.sDBPrefixNC & "MSTROBJINFO where MR_Parent_ID = '0' and MR_OBJECT_TYPE = 2 and MR_OBJECT_SUBTYPE = 3) " & _
'                " ) x " & _
'                " ON h.mr_object_id = x.original_id "

    '-- Translate recipient address id to object_recipient_id which used in DSS as user object id
    If pvsUserLoginCode <> "" Then
        sSqlFrom = sSqlFrom & _
            "join ("
    Else
        sSqlFrom = sSqlFrom & _
            "left join ("
    End If
    
    '*mod* v2.1r7t - make sure to convert GUID Object IDs for Sql Server
    sSqlFrom = sSqlFrom & _
            "SELECT a.address , " & gsPurifyGUIDsqlFromSQL("c.object_id") & " object_id, c.Login " & _
            "FROM " & gtypSession.sDBPrefixMD & "DSSMDUSRACCT c " & _
            "left join " & gtypSession.sDBPrefixMD & "DSSCSCONTACT b " & _
            "left join " & gtypSession.sDBPrefixMD & "DSSCSADDRESS a " & _
            "ON     a.contact_id = b.contact_id " & _
            "ON     b.contact_id = " & gsPurifyGUIDsqlFromSQL("c.object_id") & " "
            
    If pvsUserLoginCode <> "" Then
        sSqlFrom = sSqlFrom & _
                "WHERE  c.login in (" & pvsUserLoginCode & ")"      'v2.1r11p
    End If
    
    sSqlFrom = sSqlFrom & _
            ") z1 "
            
    '--*mod* v2.1R1c replace Concat with + for SQLServer 2008 compatiblity
    '*mod* v2.1r7t - make sure to convert GUID Object IDs for Sql Server
    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
        sSqlFrom = sSqlFrom & _
            "on f.mr_user_name like '%' + z1.object_id + '%' " & _
            "or lower(b.mr_physical_add) = lower(z1.address) "
    ElseIf gtypSQLTmpTable.nDBID = nOracle Or gtypSQLTmpTable.nDBID = nMySql Or gtypSQLTmpTable.nDBID = nPostgreSQL Then
        sSqlFrom = sSqlFrom & _
            "on f.mr_user_name like concat(concat('%', z1.object_id), '%') " & _
            "or lower(b.mr_physical_add) = lower(z1.address) "
    End If

    If pvsSourceTableName <> "" Then
        '-- find NCS by report name
        sSqlFrom = sSqlFrom & _
                " join    " & gtypSession.sDBPrefixMD & "dssmdobjinfo xa " & _
                    " ON  upper(c3.Nested_Doc_Name) = xa.object_uname "
        sSqlFrom = sSqlFrom & " where xa.object_uname in ( " & _
                            " select b.object_uname from " & pvsSourceTableName & " a join " & gtypSession.sDBPrefixMD & "dssmdobjinfo b " & _
                            " on a.object_id = b.object_id " & _
                            " and a.project_id = b.project_id " & _
                        " ) "
               
    End If
    sSqlFrom = sSqlFrom & pvsAddionalFilter
    
    '-- MR_STATUS: 1 = Active NCS Service,  2 = Deactivated
    '--" Where  c2.MR_STATUS = 1 "     '-- 1 = Active NCS Service,  2 = Deactivated
        
    gsSQLtmpNCS = gsSqlTmpTableCreation(pvsTargetTableName, sSqlSelect, sSqlFrom)

End Function

Public Function sNCSUserNameExtractSQL(ByVal pvsUserColumnName As String) As String
'-- Returns SQL that extracts Recipient Name
'-- if there is object ID in recipient name, it will only get the name part (before the '(')
'
    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
        sNCSUserNameExtractSQL = "Substring(" & pvsUserColumnName & ", 1, Charindex('(', " & pvsUserColumnName & " + '(') -1)"
    ElseIf gtypSQLTmpTable.nDBID = nOracle Then
        sNCSUserNameExtractSQL = "Substr(" & pvsUserColumnName & ", 1, instr(" & pvsUserColumnName & " || '(', '(') -1)"
    ElseIf gtypSQLTmpTable.nDBID = nMySql Then
        sNCSUserNameExtractSQL = "Substring(" & pvsUserColumnName & ", 1, LOCATE('(', " & pvsUserColumnName & " + '(') -1)"
    ElseIf gtypSQLTmpTable.nDBID = nPostgreSQL Then
        sNCSUserNameExtractSQL = "Substring(" & pvsUserColumnName & ", 1, POSITION('(' IN " & pvsUserColumnName & " + '(') -1)"
    End If
End Function

Public Function gsSQLtmpNCSFolderGet(ByVal pvsTargetTableName As String, ByVal pvsSourceTableName As String) As String
'-- Get NCS Services base on NCS Services IDs in pvsSourceTableName
'------------- Temp Table Usage ----------------
'   Input:
'pvsSourceTableName     ==> NCS Object List
'   Output:
'pvsTargetTableName     ==> NCS Folder Paths
'   Temporary:
'none
'-----------------------------------------------
Dim sSqlSelect As String
Dim sSqlFrom As String

    gsProcName = "Get NCS Folders2"
    sSqlSelect = "WithR xFolder_Paths( FullPath, Original_id, mr_object_id, mr_Parent_ID) AS " & _
                "( " & _
                    "SELECT distinct "
                    
        If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
            sSqlSelect = sSqlSelect & " Cast (h.mr_object_name AS NVARCHAR(250)) AS fullpath, "
        ElseIf gtypSQLTmpTable.nDBID = nOracle Then
            sSqlSelect = sSqlSelect & " h.mr_object_name AS FullPath, "
        ElseIf gtypSQLTmpTable.nDBID = nMySql Or gtypSQLTmpTable.nDBID = nPostgreSQL Then
            sSqlSelect = sSqlSelect & " Cast (h.mr_object_name AS varchar(250)) AS fullpath, "
        End If
        
        sSqlSelect = sSqlSelect & _
                        "c2.mr_object_id Original_id, " & _
                        "c2.mr_object_id, " & _
                        "c2.mr_Parent_ID "
        sSqlSelect = sSqlSelect & _
                "FROM (select distinct Service_ID, Subscription_Set_ID from " & pvsSourceTableName & ") c1 " & _
                    "join " & gtypSession.sDBPrefixNC & "MSTROBJINFO c2 " & _
                        "ON c1.Service_ID = c2.mr_object_id " & _
                    "join " & gtypSession.sDBPrefixSB & "MSTROBJDEPN g " & _
                        "on g.MR_DEPN_OBJID = c1.Subscription_Set_ID " & _
                    "Join " & gtypSession.sDBPrefixSB & "mstrobjnames h " & _
                        "on h.mr_object_id = g.MR_INDEP_OBJID "

    sSqlSelect = sSqlSelect & "UNION ALL "
    
    sSqlSelect = sSqlSelect & gsSQLFolderPathBuild("p.FullPath", "b.mr_object_name")
    
    sSqlSelect = sSqlSelect & _
                    "p.Original_id, " & _
                    "c.mr_object_id, " & _
                    "c.mr_Parent_ID " & _
                "FROM " & gtypSession.sDBPrefixNC & "MSTROBJINFO c " & _
                "INNER JOIN xFolder_Paths p " & _
                        "ON p.mr_Parent_ID = c.mr_object_id " & _
                            "join " & gtypSession.sDBPrefixNC & "MSTROBJNAMES b " & _
                            "on c.mr_object_id = b.mr_object_id " & _
                "WHERE c.mr_object_id not IN (select mr_object_id from " & gtypSession.sDBPrefixNC & "MSTROBJINFO where MR_Parent_ID = '0' and MR_OBJECT_TYPE = 2 and MR_OBJECT_SUBTYPE = 3) " & _
                        "and c.mr_object_type = 2 " & _
            ") "

    sSqlSelect = sSqlSelect & "select distinct Original_id "
              
    '-- service folder path
    sSqlSelect = sSqlSelect & gsSQLFolderPathTrim("x.FullPath")
        
    sSqlFrom = " from xFolder_Paths x " & _
                " where MR_Parent_ID IN (select mr_object_id from " & gtypSession.sDBPrefixNC & "MSTROBJINFO where MR_Parent_ID = '0' and MR_OBJECT_TYPE = 2 and MR_OBJECT_SUBTYPE = 3) "
                
    gsSQLtmpNCSFolderGet = gsSqlTmpTableCreation(pvsTargetTableName, sSqlSelect, sSqlFrom)

End Function

Public Function gsSQLtmpNCSSearch(ByVal pvsWhere As String, ByVal pvsTargetTableName As String, ByVal pvlBatchRunId As Long, ByVal pvsProcessCode As String) As String
'-- Change from orignal gsSQLtmpNCS
'1. Add Where clues
'2. Remove folder path input. Folder paths will be generated after getting NCS Services
'
'------------------------------------------------------
' pvsProcessCode:
' X - find report names don't match I-server metadata
' R - find duplicate reports
' S - find duplicate subscriptions
' V - find recipients have no View/Execution access to reports
' C - find Recipients have no View with recursive components
'------------------------------------------------------
'------------- Temp Table Usage ----------------
'   Input:
'none
'   Output:
'pvsTargetTableName     ==> NCS objects
'   Temporary:
'none
'-----------------------------------------------
Dim sSqlSelect As String
Dim sSqlFrom As String

    gsProcName = "Search NCS Subscriptions"
'-------------------------------------
'-- Query NCS Subscriptions
'-- ** NCS joining is by report name in IS vs name in NCS Document's Advanced Properties/General/Name or embedded in Publication.
'-- ** If IS report name is not the same as NCS report name, no match will be found.
'-- ** EM captures NCS report name when running from NCS, not IS report name.
'-------------------------------------

'--    g.MR_INDEP_OBJID = '8BB0FD1425D24EBDB8AE24705D06F500'        --<= NCS Service ID
'--    lower(h.MR_OBJECT_NAME) like lower('new opp%')             --<= NCS Service Name
'--    (Substr(f.MR_USER_UPNAME, 1, instr(f.MR_USER_UPNAME, '(') -1)like upper('%berwald%') --<== Recipient Full Name (brought over from I.S.)
'--       or lower(b.mr_physical_add) like lower('%Kevin.berwald@pacificlife.com%'))        --<== Recipient email address here: peter.han@pacificlife.com
'--    lower(d.mr_object_name) like lower('%Wholesaler%')         --<== Subscription Set Name
'--    lower(h2.MR_OBJECT_NAME) like lower('weekly%')             --<= NCS Schedule Name
'--    lower(c3.Attached_Doc_Name) like lower('%combine%')        --<= NCS Attached Document Name
'--    lower(c3.Nested_Doc_Name) like lower('%TA 40b %')          --<= Name is based on Document's Advanced Properties/General/Name or embedded in Publication


    '-- Main Select
    sSqlSelect = " SELECT  distinct " & pvlBatchRunId & " as Batch_Run_ID " & _
            " , h.MR_OBJECT_NAME Service_Name " & _
            " , h2.MR_OBJECT_NAME Schedule_Name " & _
            " , d.mr_object_name Subscription_Set_Name " & _
            " , h.mr_object_id Service_ID " & _
            " , a.mr_sub_set_id Subscription_Set_ID " & _
            " , c2.mr_created_time  Create_Time " & _
            " , c2.mr_mod_time Update_Time " & _
            " , z1.Login as recipient_Login " & _
            " , z1.object_id as recipient_object_id "
            '--^^ recipient_object_id is the DSS user id that is needed to get objecct permission checks
    
    '-- Document Info
'v2.1r6k
'    If pvsProcessCode = "" Or pvsProcessCode = "X" Or pvsProcessCode = "R" Or pvsProcessCode = "V" Or pvsProcessCode = "C" Then
        sSqlSelect = sSqlSelect & _
            " , c3.Attached_Doc_Name " & _
            " , c3.Doc_Type Attached_Doc_Type " & _
            " , c3.Nested_Doc_Name " & _
            " , c3.Nested_Doc_UPname " & _
            " , c3.Attached_Doc_ID "
            'v2.1r6k ^^ newly added column
            
'    ElseIf pvsProcessCode = "S" Then        'duplicate subscriptions
'        If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
'            sSqlSelect = sSqlSelect & _
'                " , '' Attached_Doc_Name " & _
'                " , '' Attached_Doc_Type " & _
'                " , '' Nested_Doc_Name " & _
'                " , '' Nested_Doc_UPname "
'        ElseIf gtypSQLTmpTable.nDBID = nOracle Then
'            sSqlSelect = sSqlSelect & _
'                " , cast('' as varchar2(1)) Attached_Doc_Name " & _
'                " , cast('' as varchar2(1)) Attached_Doc_Type " & _
'                " , cast('' as varchar2(1)) Nested_Doc_Name " & _
'                " , cast('' as varchar2(1)) Nested_Doc_UPname "
'        End If
'    End If
    
    '-- Recipient Info
    '-- The NCS objects must contain Subscription create time to ensure each subscriber will have a unique entry; otherwise, if a subscriber is added twice, it only show as one due to DISTINCT
    If pvsProcessCode = "" Or pvsProcessCode = "S" Or pvsProcessCode = "V" Or pvsProcessCode = "C" Then
        sSqlSelect = sSqlSelect & _
            " , b.mr_physical_add Recipient_Address " & _
            " , b.mr_address_id Recipient_Address_ID " & _
            " , b.MR_ADDRESS_NAME Recipient_Address_Name " & _
            " , b.MR_ADD_DISPLAY Recipient_Address_Display " & _
            " , b1.MR_OBJECT_NAME Device_Name " & _
            " , a.mr_created_date sub_created_time " & _
            " , " & sNCSUserNameExtractSQL("f.MR_USER_NAME") & " Recipient_Name "

    ElseIf pvsProcessCode = "X" Or pvsProcessCode = "R" Then
        If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Or gtypSQLTmpTable.nDBID = nMySql Or gtypSQLTmpTable.nDBID = nPostgreSQL Then
            sSqlSelect = sSqlSelect & _
                " , '' Recipient_Address " & _
                " , '' Recipient_Address_ID " & _
                " , '' Recipient_Address_Name " & _
                " , '' Recipient_Address_Display " & _
                " , '' Device_Name " & _
                " , cast(null as Datetime) sub_create_time " & _
                " , '' Recipient_Name "
        ElseIf gtypSQLTmpTable.nDBID = nOracle Then
            sSqlSelect = sSqlSelect & _
                " , cast('' as varchar2(1)) Recipient_Address " & _
                " , cast('' as varchar2(1)) Recipient_Address_ID " & _
                " , cast('' as varchar2(1)) Recipient_Address_Name " & _
                " , cast('' as varchar2(1)) Recipient_Address_Display " & _
                " , cast('' as varchar2(1)) Device_Name " & _
                " , cast(null as Date) sub_create_time " & _
                " , cast('' as varchar2(1)) Recipient_Name "
        End If
    End If
    
        'd -- Subscription Name
        'g -- Find parent ==> Service Name
        'h -- Service Name
        'g2 -- Find children ==> schedules
        'h2 -- Schedule Name
   sSqlFrom = _
        " FROM " & gtypSession.sDBPrefixSB & "mstrsubscriptions a " & _
        " join " & gtypSession.sDBPrefixSB & "mstraddresses b " & _
        "     on a.mr_address_id = b.mr_address_id " & _
        " left join " & gtypSession.sDBPrefixSB & "mstrobjnames b1 " & _
        "     on b.mr_device_id = b1.mr_object_id " & _
        " Join " & gtypSession.sDBPrefixNC & "mstrobjinfo c " & _
        "     on a.mr_sub_set_id = c.mr_object_id " & _
        " join " & gtypSession.sDBPrefixNC & "mstrobjnames d " & _
        "     on c.mr_object_id = d.mr_object_id " & _
        " join " & gtypSession.sDBPrefixSB & "MSTRUSERS f " & _
        "     on b.MR_USER_ID = f.MR_USER_ID " & _
        " join " & gtypSession.sDBPrefixNC & "MSTROBJDEPN g " & _
        "     on g.MR_DEPN_OBJID = a.MR_SUB_SET_ID " & _
        " Join " & gtypSession.sDBPrefixNC & "mstrobjnames h " & _
        "     on h.mr_object_id = g.MR_INDEP_OBJID " & _
        " Join " & gtypSession.sDBPrefixNC & "mstrobjinfo c2 " & _
        "     on h.mr_object_id = c2.mr_object_id " & _
        " join " & gtypSession.sDBPrefixNC & "MSTROBJDEPN g2 " & _
        "     on g2.MR_INDEP_OBJID = h.mr_object_id " & _
        "        and g2.MR_DEPNOBJ_TYPE = 18 " & _
        " Join " & gtypSession.sDBPrefixNC & "mstrobjnames h2 " & _
        "     on h2.mr_object_id = g2.MR_DEPN_OBJID "
        
        '-- Subscription & Schedule relationship store in XML format
        '--bcid="C63925D0D29B45E2A11C883],[7CC571366" refid="R3"/><schedule bcid="80C636B4959211D4BE6600C04F0E93B7"
        '--bcid="18E8C4E942A848E0BD177D1F42032127" refid="R3"/&gt;&lt;schedule bcid="AD7ADB6B887343238E80C05644564722"
    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
        sSqlFrom = sSqlFrom & _
            " join (" & _
            " SELECT b.mr_object_id , STUFF(( SELECT  ','+ a.MR_DEFINITION " & _
                                           " FROM " & gtypSession.sDBPrefixNC & "MSTROBJDEFN a " & _
                                           " WHERE b.mr_object_id = a.mr_object_id " & _
                                             " FOR XML PATH('') " & _
                                             " ), 1 , 1, '' " & _
                                           " )  xmlSubSch " & _
             " From " & gtypSession.sDBPrefixNC & "MSTROBJDEFN b " & _
             " Where b.mr_object_type = 19 " & _
             " Group By b.mr_object_id " & _
             " ) d2 " & _
            " on h.mr_object_id  = d2.mr_object_id  " & _
            " and Charindex('bcid=""' + a.mr_sub_set_id + '"" refid=""R', replace(xmlSubSch, '],[', '')) > 0  " & _
            " and Charindex('schedule bcid=""' + h2.mr_object_id, replace(xmlSubSch, '],[', '')) > 0  "
            
    ElseIf gtypSQLTmpTable.nDBID = nOracle Then
        sSqlFrom = sSqlFrom & _
            " join ( " & _
                 " Select mr_object_id, listagg(MR_DEFINITION,',') within group( order by MR_DEFINITION_SEQ) xmlSubSch " & _
                 " From " & gtypSession.sDBPrefixNC & "MSTROBJDEFN " & _
                 " Where mr_object_type = 19 " & _
                 " Group By mr_object_id " & _
                 " ) d2 " & _
                " on h.mr_object_id  = d2.mr_object_id " & _
                " and regexp_instr(replace(xmlSubSch, '],[', ''), 'bcid\=\""' || a.mr_sub_set_id || '\"" refid\=\""R' || '[1-9]' || '\""\/\>\<schedule bcid\=\""' || h2.mr_object_id) > 0 "
    ElseIf gtypSQLTmpTable.nDBID = nMySql Then
    '*mod* v2.1r11k ???
    'http://www.sqlines.com/mysql/functions/group_concat
    'https://stackoverflow.com/questions/995373/mysql-sort-group-concat-values
    'https://stackoverflow.com/questions/20738142/stuff-and-for-xml-path-alternative-in-mysql-for-the-following-stored-prodedu
        'GROUP_CONCAT(Concat(MR_DEFINITION,',') order by MR_DEFINITION_SEQ) xmlSubSch
        sSqlFrom = sSqlFrom & _
            " join ( " & _
                 " Select mr_object_id, GROUP_CONCAT(Concat(MR_DEFINITION,',') order by MR_DEFINITION_SEQ) xmlSubSch " & _
                 " From " & gtypSession.sDBPrefixNC & "MSTROBJDEFN " & _
                 " Where mr_object_type = 19 " & _
                 " Group By mr_object_id " & _
                 " ) d2 " & _
            " on h.mr_object_id  = d2.mr_object_id  " & _
            " and LOCATE(Concat('bcid=""' , a.mr_sub_set_id , '"" refid=""R'), replace(xmlSubSch, '],[', '')) > 0  " & _
            " and LOCATE(Concat('schedule bcid=""' , h2.mr_object_id), replace(xmlSubSch, '],[', '')) > 0  "
    ElseIf gtypSQLTmpTable.nDBID = nPostgreSQL Then
        sSqlFrom = sSqlFrom & _
            " join ( " & _
                 " Select mr_object_id, GROUP_CONCAT(Concat(MR_DEFINITION,',') order by MR_DEFINITION_SEQ) xmlSubSch " & _
                 " From " & gtypSession.sDBPrefixNC & "MSTROBJDEFN " & _
                 " Where mr_object_type = 19 " & _
                 " Group By mr_object_id " & _
                 " ) d2 " & _
            " on h.mr_object_id  = d2.mr_object_id  " & _
            " and POSITION(Concat('bcid=""' IN a.mr_sub_set_id , '"" refid=""R'), replace(xmlSubSch, '],[', '')) > 0  " & _
            " and POSITION(Concat('schedule bcid=""' IN h2.mr_object_id), replace(xmlSubSch, '],[', '')) > 0  "
    End If
   
    '-- Get Document
    'c2 -- Attachment Name - actual NCS document filename
    'b3 -- Attacment Contents
    'c3 --<= Name is based on Document's Advanced Properties/General/Name or embedded in Publication
    'in (4) -- documents
    'd3.MR_OBJECT_SUBTYPE not in (1) -- 1=Service Name, 3=Email header/body, 7=excel, 13,14=pdf
    'v2.1r6k change c3.mr_object_id to c2.mr_object_id
    sSqlFrom = sSqlFrom & _
        " Join (" & _
            " SELECT d3.MR_OBJECT_SUBTYPE, d3.MR_OBJECT_TYPE, b.MR_INDEP_OBJID, c2.MR_OBJECT_NAME as Attached_Doc_Name, c2.MR_OBJECT_UPname as Attached_Doc_UPname, c3.MR_OBJECT_NAME Nested_Doc_Name, c3.MR_OBJECT_UPname Nested_Doc_UPname, c2.mr_object_id Attached_Doc_ID " & _
                   " , CASE WHEN d3.MR_OBJECT_SUBTYPE = 7 THEN 'Excel' " & _
                   "   WHEN d3.MR_OBJECT_SUBTYPE IN (3) THEN 'Info Obj' " & _
                   "   WHEN d3.MR_OBJECT_SUBTYPE IN (14) THEN 'PDF' " & _
                   "   WHEN d3.MR_OBJECT_SUBTYPE IN (13) THEN 'PDF' " & _
                   "   WHEN d3.MR_OBJECT_SUBTYPE IN (0) THEN 'HTML' "               '--*mod* v2.1r2b used for Email Body
       
    sSqlFrom = sSqlFrom & " Else " & gsSqlCastChar("d3.MR_OBJECT_SUBTYPE", 20) & " END Doc_Type "
          
    '--*mod* v2.1r2b c2x to get Attachment Info -> use for checking Email Body documents
    '--             Updated to return embedded email body object
    sSqlFrom = sSqlFrom & _
            " from " & gtypSession.sDBPrefixNC & "MSTROBJDEPN b " & _
                " join " & gtypSession.sDBPrefixNC & "MSTROBJDEPN b2 " & _
                " on b2.MR_INDEP_OBJID = b.MR_DEPN_OBJID " & _
                " join " & gtypSession.sDBPrefixNC & "MSTROBJNAMES c2 " & _
                " on b2.MR_DEPN_OBJID  = c2.mr_object_id " & _
                " join " & gtypSession.sDBPrefixNC & "mstrobjinfo c2x " & _
                " on c2.mr_object_id   = c2x.mr_object_id " & _
                " join " & gtypSession.sDBPrefixNC & "MSTROBJDEPN b3 " & _
                " on b3.MR_INDEP_OBJID = b2.MR_DEPN_OBJID " & _
                " join " & gtypSession.sDBPrefixNC & "MSTROBJNAMES c3 " & _
                " on b3.MR_DEPN_OBJID  = c3.mr_object_id " & _
                " join " & gtypSession.sDBPrefixNC & "mstrobjinfo d3 " & _
                " on b3.MR_DEPN_OBJID  = d3.mr_object_id " & _
                " and d3.MR_OBJECT_SUBTYPE not in (1) "
                                            '--^^ 1=Service Name, 3=Email header/body, 7=excel, 13,14=pdf
                '*mod* v2.1r2b d3.MR_OBJECT_TYPE=4 -> Document, 1 -> System --> HTML email body,
                '-- If Type 4, nested document is external attachment
                '-- If Type 1, document is embedded system objects. Every attachment also has this Type 1 component
                '--  Must filter for embedded HTML Email Body only (Type 14 and subtype 4);
                '       otherwise, every attachment returns duplicates
    sSqlFrom = sSqlFrom & _
                " and (d3.MR_OBJECT_TYPE in (4) " & _
                        " or (d3.MR_OBJECT_TYPE in (1) " & _
                        " and c2x.MR_OBJECT_SUBTYPE = 4 " & _
                        " and c2x.MR_OBJECT_TYPE = 14)) " & _
            " ) c3 " & _
              " on c3.MR_INDEP_OBJID = g.MR_INDEP_OBJID "
              
    '-- Translate recipient address id to object_recipient_id which used in DSS as user object id
    '*mod* v2.1r7t - make sure to convert GUID Object IDs for Sql Server
    sSqlFrom = sSqlFrom & _
        "left join (" & _
            "SELECT a.address , " & gsPurifyGUIDsqlFromSQL("c.object_id") & " object_id, c.login " & _
            "FROM " & gtypSession.sDBPrefixMD & "DSSMDUSRACCT c " & _
            "left join " & gtypSession.sDBPrefixMD & "DSSCSCONTACT b " & _
            "left join " & gtypSession.sDBPrefixMD & "DSSCSADDRESS a " & _
            "ON     a.contact_id = b.contact_id " & _
            "ON     b.contact_id = " & gsPurifyGUIDsqlFromSQL("c.object_id") & " " & _
            ") z1 "
            
    '-- Note: NCS User Name contains DSS object id if link to DSS user, such as "Chung Lau(F7964B364018CBA5B451B791DBAA8BFE)"
    '--*mod* v2.1R1c replace Concat with + for SQLServer 2008 compatiblity
    '*mod* v2.1r7t - make sure to convert GUID Object IDs for Sql Server
    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
        sSqlFrom = sSqlFrom & _
            "on f.mr_user_name like '%' + z1.object_id + '%' " & _
            "or lower(b.mr_physical_add) = lower(z1.address) "
    ElseIf gtypSQLTmpTable.nDBID = nOracle Or gtypSQLTmpTable.nDBID = nMySql Or gtypSQLTmpTable.nDBID = nPostgreSQL Then
        sSqlFrom = sSqlFrom & _
            "on f.mr_user_name like concat(concat('%', z1.object_id), '%') " & _
            "or lower(b.mr_physical_add) = lower(z1.address) "
    End If

    '-- find NCS by object Finder
    sSqlFrom = sSqlFrom & _
            " " & pvsWhere

    gsSQLtmpNCSSearch = gsSqlTmpTableCreation(pvsTargetTableName, sSqlSelect, sSqlFrom)

End Function
Public Function gsSQLtmpNCSFinal(ByVal pvsTargetTableName As String, ByVal pvsSourceTableName As String, ByVal pvsFolderTableName As String) As String
Dim sSqlSelect As String
Dim sSqlFrom As String

    sSqlSelect = "select distinct a.*, b.Folder_Path "
    sSqlFrom = " from " & pvsSourceTableName & " a join " & pvsFolderTableName & " b on a.Service_ID = b.original_id "

    gsSQLtmpNCSFinal = gsSqlTmpTableCreation(pvsTargetTableName, sSqlSelect, sSqlFrom)
End Function

Public Function gsSQLTmpNCSReportMatched(ByVal pvsTargetTableName As String, ByVal pvsSourceTableName As String) As String
'------------- Temp Table Usage ----------------
'   Input:
'pvsSourceTableName     ==> NCS Object List
'   Output:
'pvsTargetTableName     ==> NCS objects whose reports matched with I-server
'   Temporary:
'none
'-----------------------------------------------
Dim sSqlSelect As String
Dim sSqlFrom As String
    gsProcName = "Get NCS Matching Reports"

    '-- find I-server reports by matching NCS report name
    sSqlSelect = "select xa.object_id, xa.project_id "

    sSqlFrom = " from " & pvsSourceTableName & " a " & _
            " join " & gtypSession.sDBPrefixMD & "dssmdobjinfo xa " & _
                " ON  upper(a.Nested_Doc_Name) = xa.object_uname " & _
                " and xa.object_type in (3, 55) " & _
                " and xa.project_id = '" & gtypSession.sMstrProjectID & "'"
    
    gsSQLTmpNCSReportMatched = gsSqlTmpTableCreation(pvsTargetTableName, sSqlSelect, sSqlFrom)
End Function

Public Function gsSQLTmpNCSReportNotMatched(ByVal pvsTargetTableName As String, ByVal pvsSourceTableName As String) As String
'------------- Temp Table Usage ----------------
'   Input:
'pvsSourceTableName     ==> NCS Object List
'   Output:
'pvsTargetTableName     ==> NCS objects whose reports don't match with I-server
'   Temporary:
'none
'-----------------------------------------------
Dim sSqlSelect As String
Dim sSqlFrom As String

    gsProcName = "Get NCS Unmatched Reports"

    '-- NCS report name not exist on I-server
    sSqlSelect = "select a.* "

    sSqlFrom = " from " & pvsSourceTableName & " a " & _
            " left join " & gtypSession.sDBPrefixMD & "dssmdobjinfo xa " & _
                " ON  a.Nested_Doc_UPname = xa.object_uname " & _
                " and xa.object_type in (3, 55) " & _
                " and xa.project_id = '" & gtypSession.sMstrProjectID & "'" & _
                " where a.Nested_Doc_UPname IS NOT NULL and xa.object_id IS NULL "

    gsSQLTmpNCSReportNotMatched = gsSqlTmpTableCreation(pvsTargetTableName, sSqlSelect, sSqlFrom)
End Function

Public Function gsSQLTmpNCSReportDup(ByVal pvsTargetTableName As String, ByVal pvsSourceTableName As String) As String
'------------- Temp Table Usage ----------------
'   Input:
'pvsSourceTableName     ==> NCS Object List
'   Output:
'pvsTargetTableName     ==> NCS objects whose report names are duplicated in I-server
'   Temporary:
'none
'-----------------------------------------------
Dim sSqlSelect As String
Dim sSqlFrom As String

    gsProcName = "Get NCS Dup Reports"

    '-- NCS report name matched multiple names on I-server
    sSqlSelect = "select a.* "

    sSqlFrom = " from " & pvsSourceTableName & " a " & _
            " where a.Nested_Doc_UPname IS NOT NULL and exists(select xa.object_uname, count(distinct xa.object_id) dup from " & gtypSession.sDBPrefixMD & "dssmdobjinfo xa " & _
                " where  a.Nested_Doc_UPname = xa.object_uname " & _
                " and xa.object_type in (3, 55) " & _
                " and xa.project_id = '" & gtypSession.sMstrProjectID & "'" & _
                " group by xa.object_uname having count(distinct xa.object_id) > 1) "
    
    gsSQLTmpNCSReportDup = gsSqlTmpTableCreation(pvsTargetTableName, sSqlSelect, sSqlFrom)
End Function

Public Function gsSQLTmpNCSSubscriptionDup(ByVal pvsTargetTableName As String, ByVal pvsSourceTableName As String) As String
'------------- Temp Table Usage ----------------
'   Input:
'pvsSourceTableName     ==> NCS Object List
'   Output:
'pvsTargetTableName     ==> NCS objects whose address is shows up twice in a subscription set
'   Temporary:
'none
'-----------------------------------------------
Dim sSqlSelect As String
Dim sSqlFrom As String

    gsProcName = "Get NCS Dup Subscriptions"

    '-- Duplicate NCS subscribers
    '-- First match by address ID
    '-- If email (search by @ as mr_device_id has the same 15 device type), match by actual Recipient_Address
    '-- Note if subscription set is used multiple time, it will show duplicates when searching; thus, must qualify by service id and schedule
    '-- Also note that the NCS objects must contain Subscription create time to ensure each subscriber will have a unique entry; otherwise, if a subscriber is added twice, it only show as one due to DISTINCT
    'v2.1r6k Added xa.Attached_Doc_ID for duplicate check
    sSqlSelect = "select distinct a.* "

    '-- find dup address id
    sSqlFrom = " from " & pvsSourceTableName & " a " & _
            " where a.Device_Name <> 'Web Device (Portal)'" & _
                " and exists(select xa.Service_ID, xa.Schedule_Name, xa.Subscription_Set_ID, xa.Attached_Doc_Name, xa.Attached_Doc_Type,xa.Nested_Doc_Name, xa.Device_Name, xa.Recipient_Address, count(xa.Recipient_Address) dup from " & pvsSourceTableName & " xa " & _
                " where a.Subscription_Set_ID = xa.Subscription_Set_ID " & _
                " and a.Service_ID = xa.Service_ID " & _
                " and a.Schedule_Name = xa.Schedule_Name " & _
                " and a.Attached_Doc_Name = xa.Attached_Doc_Name " & _
                " and a.Attached_Doc_Type = xa.Attached_Doc_Type " & _
                " and a.Nested_Doc_Name = xa.Nested_Doc_Name " & _
                " and a.Recipient_Address = xa.Recipient_Address " & _
                " group by xa.Service_ID, xa.Schedule_Name, xa.Subscription_Set_ID, xa.Attached_Doc_Name,xa.Attached_Doc_Type,xa.Nested_Doc_Name, xa.Device_Name, xa.Recipient_Address " & _
                " having count(xa.Recipient_Address) > 1) "

    '-- Find dup email address
'    sSqlFrom = sSqlFrom & " UNION select a.* from " & pvsSourceTableName & " a " & _
'            " where exists(select xa.Service_ID, xa.Schedule_Name, xa.Subscription_Set_ID, xa.Attached_Doc_ID, xa.Device_Name, xa.Recipient_Address, count(xa.Recipient_Address) dup from " & pvsSourceTableName & " xa " & _
'                " where a.Subscription_Set_ID = xa.Subscription_Set_ID " & _
'                " and a.Service_ID = xa.Service_ID " & _
'                " and a.Schedule_Name = xa.Schedule_Name " & _
'                " and a.Attached_Doc_ID = xa.Attached_Doc_ID " & _
'                " and a.Device_Name = xa.Device_Name " & _
'                " and a.Recipient_Address = xa.Recipient_Address " & _
'                " group by xa.Service_ID, xa.Schedule_Name, xa.Subscription_Set_ID, xa.Attached_Doc_ID, xa.Device_Name, xa.Recipient_Address having count(xa.Recipient_Address) > 1) "

'v2.1r6k not limited to email address
'    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
'        sSqlFrom = sSqlFrom & " and CHARINDEX('@', a.Recipient_Address) > 1 "
'    ElseIf gtypSQLTmpTable.nDBID = nOracle Then
'        sSqlFrom = sSqlFrom & " and Instr(a.Recipient_Address, '@') > 1 "
'    End If

    gsSQLTmpNCSSubscriptionDup = gsSqlTmpTableCreation(pvsTargetTableName, sSqlSelect, sSqlFrom)
End Function

Public Function gsSQLtmpUserID(ByVal pvsTargetTableName As String, ByVal pvsAccessUser As String) As String
'-----------------------------------------------------------------------------
' Get account object id from user or group
'-----------------------------------------------------------------------------
'------------- Temp Table Usage ----------------
'   Input:
'none
'   Output:
'pvsTargetTableName
'   Temporary:
'none
'-----------------------------------------------
Dim sSqlSelect As String
Dim sSqlFrom As String
    'select project_id from dbo.dssmdobjinfo where object_type = 36 and project_id = object_id

    '*mod* v2.1r8f return SubType
    sSqlSelect = "select project_id, object_id, subtype "
    '*mod* v2.1t for Group, must use object_name because abbreviation for group "Public / Guest" is Public which is not correct.
    '--sSqlFrom = " from " & gtypSession.sDBPrefixMD & "DSSMDOBJINFO where UPPER(abbreviation) = '" & UCase(pvsAccessUser) & "'"
    sSqlFrom = " from " & gtypSession.sDBPrefixMD & "DSSMDOBJINFO where object_type = 34 and ((subtype = 8704 and UPPER(abbreviation) = ('" & UCase(pvsAccessUser) & "')) or (subtype = 8705 and UPPER(object_name) = ('" & UCase(pvsAccessUser) & "'))) "
    '-- doesn't allow groups as group does not have login ==> sSqlFrom = " from " & gtypSession.sDBPrefixMD & "dssmdusracct where login ='" & pvsAccessUser & "'"

    gsSQLtmpUserID = gsSqlTmpTableCreation(pvsTargetTableName, sSqlSelect, sSqlFrom)
End Function

Public Function gsSQLtmpAccessRights(ByVal pvsSourceTableName As String, ByVal pvsTargetTableName As String, ByVal pvsIntermTable As String, ByVal pvsAccessUser As String, ByVal pvsUserGroupFlag As String, ByVal pvbNewBatch As Boolean) As String
'-- Get access rights, either for new batch or update existing rows on a given user/group
'
'------------- Temp Table Usage ----------------
'   Input:
'gtypSQLTmpTable.sTmpFolderPathTable
'pvsSourceTableName ==> Object List
'pvsIntermTable ==> List user groups
'pvsUserGroupFlag ==> '.' indicates User Group '*mod* v2.1r8f add
'   Output:
'pvsTargetTableName
'   Temporary:
'none
'-----------------------------------------------
Dim sSqlSelect As String
Dim sSqlFrom As String

    gsProcName = "Get Individual Access Rights"
                '--"select distinct " & pvlBatchRunId & " as Batch_Run_ID "
    If pvbNewBatch Then     '-- recursive, thus need to create new batch
'        sSqlSelect = _
'                "select distinct " & _
'                " case when a.object_type = 18 then a2.object_name else a.object_name end Object_Name " & _
'                ", a.object_type as Object_Type_Num, a.subtype as Object_SubType_Num, a.extended_type as Object_Extended_Type_Num " & _
'                ", b.login as Object_Owner_Login_ID " & _
'                ", a.create_time as Object_Create_Time, a.mod_time as Object_Update_Time " & _
'                ", a.hidden as Object_Hidden_flag " & _
'                ", a.object_id " & _
'                ", a.Parent_ID " & _
'                ", a.version_id as Object_Version_ID "
                    
        sSqlSelect = "select distinct "

        '--*mod* v2.1z Use actual object name for shortcut and ffsql report name for ffsql table
        '--*mod* v2.1R1c replace Concat with + for SQLServer 2008 compatiblity
        '-- *mod* v2.1r11a Library Shortcut to actual object
        If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
            sSqlSelect = sSqlSelect & _
                "case When a.object_type = 18 And a2.object_name Is Not Null Then a2.object_name When a.object_type = 18 And L3.object_name Is Not Null Then L3.object_name " & _
                "when a.object_type = 15 and a.subtype=3840 and a.extended_type = 3 and f3.object_name = 'Managed Objects' then 'Logical Table for ' + f2.object_name " & _
                "else a.object_name end Object_Name "
        ElseIf gtypSQLTmpTable.nDBID = nOracle Or gtypSQLTmpTable.nDBID = nMySql Or gtypSQLTmpTable.nDBID = nPostgreSQL Then
            sSqlSelect = sSqlSelect & _
                "case When a.object_type = 18 And a2.object_name Is Not Null Then a2.object_name When a.object_type = 18 And L3.object_name Is Not Null Then L3.object_name " & _
                "when a.object_type = 15 and a.subtype=3840 and a.extended_type = 3 and f3.object_name = 'Managed Objects' then concat('Logical Table for ', f2.object_name) " & _
                "else a.object_name end Object_Name "
        End If
        sSqlSelect = sSqlSelect & _
                ", a.object_type as Object_Type_Num, a.subtype as Object_SubType_Num, " & gsSQLDocTypeByViewMedia("a", "L3") & " as Object_Extended_Type_Num " & _
                ", b.login as Object_Owner_Login_ID " & _
                ", a.create_time as Object_Create_Time, a.mod_time as Object_Update_Time " & _
                ", a.hidden as Object_Hidden_flag " & _
                ", a.object_id " & _
                ", a.Parent_ID " & _
                ", a.version_id as Object_Version_ID "
                
        If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
            sSqlSelect = sSqlSelect & ", case when x2.Folder_Path is NULL then '' else x2.Folder_Path end Folder_Path "    '*mod* v2.1
        ElseIf gtypSQLTmpTable.nDBID = nOracle Then
            sSqlSelect = sSqlSelect & ", case when x2.Folder_Path is NULL then chr('') else x2.Folder_Path end Folder_Path "    '*mod* v2.1
        ElseIf gtypSQLTmpTable.nDBID = nMySql Or gtypSQLTmpTable.nDBID = nPostgreSQL Then
            sSqlSelect = sSqlSelect & ", case when x2.Folder_Path is NULL then '' else x2.Folder_Path end Folder_Path "
        End If

        '-- *mod* v1.1 12/10/2015 cl save Original_Data flag as 1 in Level1_Dep_Num column
        sSqlSelect = sSqlSelect & _
                ", case when x1.Original_Data = 'Y' then 1 else 0 end Level1_Dep_Num "
                  
        '-- *mod* v2.1 2/11/2016 cl Treelevel place holder
        sSqlSelect = sSqlSelect & ", x1.TreeLevel "
                
        sSqlFrom = " from " & gtypSession.sDBPrefixMD & "dssmdobjinfo a  " & _
                    "join " & gtypSession.sDBPrefixMD & "dssmdusracct b  " & _
                    "on a.owner_id = b.object_id " & _
                    "join " & pvsSourceTableName & " x1 on a.object_id = x1.object_id and a.project_id = x1.project_id " & _
                    "left join " & gtypSQLTmpTable.sTmpFolderPathTable & " x2 on a.object_id = x2.original_id and a.project_id = x2.project_id "
                    
        '-- Shortcut to actual object
         sSqlFrom = sSqlFrom & _
                 "left join " & gtypSession.sDBPrefixMD & "dssmdobjdepn a1 " & _
                        "on a1.object_id = a.object_id and a1.project_id = a.project_id " & _
                       "and a.object_type = 18 " & _
                 "left join " & gtypSession.sDBPrefixMD & "dssmdobjinfo a2 " & _
                        "on a1.DEPN_OBJID = a2.object_id and a1.DEPN_PRJID = a2.project_id "
        
         '-- *mod* v2.1r11a Library Shortcut to actual object
         sSqlFrom = sSqlFrom & _
             "left join " & gtypSession.sDBPrefixMD & "dssmdlnkitem L1 " & _
                    "on L1.object_id = a.object_id and L1.project_id = a.project_id " & _
                   "and a.object_type = 18 " & _
             "left join " & gtypSession.sDBPrefixMD & "dssmdlnkitem L2 " & _
                    "on L1.LINKITEM_ID = L2.LINKITEM_ID and L1.project_id = L2.project_id " & _
                   "and L2.object_type = 55 " & _
             "left join " & gtypSession.sDBPrefixMD & "dssmdobjinfo L3 " & _
                    "on L2.object_id = L3.object_id and L2.project_id = L3.project_id "

        '--*mod* v2.1z Get FFSQL Logical Table Names
        '--1. ffsql table is one per report  (dssmdobjdepn table contains 1 object_id only (where depn_objid is ffsql table)
        '--2. ffsql table name can have a name or can be '1'.  If not '1', then ffsql table name is not renamed if ffsql reports is renamed
        '--3. ffsql table can be define as Mstr Logical Table View.  In this case the parent object is "Tables" and not 'Managed Objects'
        '-- F2 - ffsql Report Name, F3 - ffsql Table Parent Name
        sSqlFrom = sSqlFrom & _
                "left join " & gtypSession.sDBPrefixMD & "dssmdobjdepn f1 " & _
                "on f1.DEPN_OBJID = a.object_id and f1.DEPN_PRJID = a.project_id " & _
                "and a.object_type = 15 and a.subtype=3840 and a.extended_type = 3 " & _
                "left join " & gtypSession.sDBPrefixMD & "dssmdobjinfo f2 " & _
                "on f1.object_id = f2.object_id " & _
                "and f1.project_id = f2.project_id " & _
                "left join " & gtypSession.sDBPrefixMD & "dssmdobjinfo f3 " & _
                "on a.Parent_ID = f3.object_id " & _
                "and a.project_id = f3.project_id " & _
                "and f3.object_name = 'Managed Objects'"
                
                
    Else    '-- Non-recursive, update to existing row
        sSqlSelect = "select a.ID, a.Object_ID, a.Project_ID "
        '-- Final From Clause
        sSqlFrom = " from " & pvsSourceTableName & " a  "
    
    End If
    
    '... Add ACL here USER=> Explicit Rights or USER-> Implicit Rights
    '-- folder's rights for children starts over 500000000
    '*mod* v2.1r8f add . to end of ACL to indicate group
    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
        sSqlSelect = sSqlSelect & ", cast('" & pvsAccessUser & "' + case when x4.Original_Data = 'Y' then ' => ' else ' -> ' end " & _
                            "+ CASE Coalesce(x4.rights,-1) WHEN 199 THEN 'View' WHEN 223 THEN 'Modify' WHEN 255 THEN 'Full' WHEN -1 THEN '' ELSE 'Custom' END + '" & pvsUserGroupFlag & "' as nvarchar(255)) AS Object_ACL_Name "
    ElseIf gtypSQLTmpTable.nDBID = nOracle Or gtypSQLTmpTable.nDBID = nMySql Or gtypSQLTmpTable.nDBID = nPostgreSQL Then
        sSqlSelect = sSqlSelect & ", Concat(Concat(Concat('" & pvsAccessUser & "' , case when x4.Original_Data = 'Y' then ' => ' else ' -> ' end " & _
                        "), CASE Coalesce(x4.rights, -1) WHEN 199 THEN 'View' WHEN 223 THEN 'Modify' WHEN 255 THEN 'Full' WHEN -1 THEN '' ELSE 'Custom' END) , '" & pvsUserGroupFlag & "') Object_ACL_Name "
    End If

    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
        sSqlFrom = sSqlFrom & " Outer Apply ( " & _
                    " select top 1 a.object_id, a.project_id, Coalesce(b.rights, -1) rights, d.Original_Data " & _
                    " from " & gtypSession.sDBPrefixMD & "dssmdobjsecu b " & _
                    " join " & pvsIntermTable & " d " & _
                    " on d.OBJECT_ID = b.TRUST_ID " & _
                    " where b.rights < 500000000 " & _
                    " and a.OBJECT_ID = b.OBJECT_ID " & _
                    " and a.project_id = b.project_id " & _
                    " order by b.rights desc, case when d.OBJECT_ID is null then 'z' else 'a' end, b.OBJECT_TYPE  " & _
                    " ) x4 "
                    '-- folder's rights for children starts over 500000000
    ElseIf gtypSQLTmpTable.nDBID = nOracle Or gtypSQLTmpTable.nDBID = nMySql Or gtypSQLTmpTable.nDBID = nPostgreSQL Then
        sSqlFrom = sSqlFrom & " left join (select x4a.object_id, x4a.project_id, x4a.rights, x4a.Original_Data from ( " & _
                    " select a.object_id, a.project_id, b.rights, d.Original_Data, row_number() over (partition by a.object_id order by b.rights desc) rn " & _
                    " from " & pvsSourceTableName & " a " & _
                    " join " & gtypSession.sDBPrefixMD & "dssmdobjsecu b " & _
                    " on a.OBJECT_ID = b.OBJECT_ID " & _
                    " and a.project_id = b.project_id " & _
                    " join " & pvsIntermTable & " d " & _
                    " on d.OBJECT_ID = b.TRUST_ID " & _
                    " where b.rights < 500000000 " & _
                    " order by b.rights desc, case when d.OBJECT_ID is null then 'z' else 'a' end, b.OBJECT_TYPE  " & _
                    " ) x4a where rn <= 1) x4 on a.OBJECT_ID = x4.OBJECT_ID and a.project_id = x4.project_id "
                    '-- folder's rights for children starts over 500000000
    End If

    gsSQLtmpAccessRights = gsSqlTmpTableCreation(pvsTargetTableName, sSqlSelect, sSqlFrom)
End Function

Public Function gsSQLtmpAccessRightsAll(ByVal pvsSourceTableName As String, ByVal pvsTargetTableName As String, ByVal pvbTreeList As Boolean) As String
'-- Get access rights for all users. Note new batch is always created regardless recursive (pvbTreeList) is true or not
'------------- Temp Table Usage ----------------
'   Input:
'gtypSQLTmpTable.sTmpFolderPathTable
'pvsSourceTableName ==> Object List
'   Output:
'pvsTargetTableName
'   Temporary:
'none
Dim sSqlSelect As String
Dim sSqlFrom As String

    gsProcName = "Get All Access Rights"
                '--"select distinct " & pvlBatchRunId & " as Batch_Run_ID "
    If pvbTreeList Then     '-- Recursive
        sSqlSelect = "select distinct "

        '-- object type = 18 - shortcut
        '--*mod* v2.1z Use actual object name for shortcut and ffsql report name for ffsql table
        '--*mod* v2.1R1c replace Concat with + for SQLServer 2008 compatiblity
        '-- *mod* v2.1r11a Library Shortcut to actual object
        If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
            sSqlSelect = sSqlSelect & _
                "case When a.object_type = 18 And a2.object_name Is Not Null Then a2.object_name When a.object_type = 18 And L3.object_name Is Not Null Then L3.object_name " & _
                "when a.object_type = 15 and a.subtype=3840 and a.extended_type = 3 and f3.object_name = 'Managed Objects' then 'Logical Table for ' + f2.object_name " & _
                "else a.object_name end Object_Name "
        ElseIf gtypSQLTmpTable.nDBID = nOracle Or gtypSQLTmpTable.nDBID = nMySql Or gtypSQLTmpTable.nDBID = nPostgreSQL Then
            sSqlSelect = sSqlSelect & _
                "case When a.object_type = 18 And a2.object_name Is Not Null Then a2.object_name When a.object_type = 18 And L3.object_name Is Not Null Then L3.object_name " & _
                "when a.object_type = 15 and a.subtype=3840 and a.extended_type = 3 and f3.object_name = 'Managed Objects' then concat('Logical Table for ', f2.object_name) " & _
                "else a.object_name end Object_Name "
        End If
                
        sSqlSelect = sSqlSelect & _
                ", a.object_type as Object_Type_Num, a.subtype as Object_SubType_Num, " & gsSQLDocTypeByViewMedia("a", "L3") & " as Object_Extended_Type_Num " & _
                ", b.login as Object_Owner_Login_ID " & _
                ", a.create_time as Object_Create_Time, a.mod_time as Object_Update_Time " & _
                ", a.hidden as Object_Hidden_flag " & _
                ", a.object_id " & _
                ", a.Parent_ID " & _
                ", a.version_id as Object_Version_ID "
                
        If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
            sSqlSelect = sSqlSelect & ", case when x2.Folder_Path is NULL then '' else x2.Folder_Path end Folder_Path "    '*mod* v2.1
        ElseIf gtypSQLTmpTable.nDBID = nOracle Then
            sSqlSelect = sSqlSelect & ", case when x2.Folder_Path is NULL then chr('') else x2.Folder_Path end Folder_Path "    '*mod* v2.1
        ElseIf gtypSQLTmpTable.nDBID = nMySql Or gtypSQLTmpTable.nDBID = nPostgreSQL Then
            sSqlSelect = sSqlSelect & ", case when x2.Folder_Path is NULL then '' else x2.Folder_Path end Folder_Path "
        End If

        '-- *mod* v1.1 12/10/2015 cl save Original_Data flag as 1 in Level1_Dep_Num column
        sSqlSelect = sSqlSelect & _
                ", case when x1.Original_Data = 'Y' then 1 else 0 end Level1_Dep_Num "
                  
        '-- *mod* v2.1 2/11/2016 cl Treelevel place holder
        sSqlSelect = sSqlSelect & ", x1.TreeLevel "
                
        sSqlFrom = " from " & gtypSession.sDBPrefixMD & "dssmdobjinfo a  " & _
                    "join " & gtypSession.sDBPrefixMD & "dssmdusracct b  " & _
                    "on a.owner_id = b.object_id " & _
                    "join " & pvsSourceTableName & " x1 on a.object_id = x1.object_id and a.project_id = x1.project_id " & _
                    "left join " & gtypSQLTmpTable.sTmpFolderPathTable & " x2 on a.object_id = x2.original_id and a.project_id = x2.project_id "

        '-- Shortcut to actual object
        sSqlFrom = sSqlFrom & _
                 "left join " & gtypSession.sDBPrefixMD & "dssmdobjdepn a1 " & _
                        "on a1.object_id = a.object_id and a1.project_id = a.project_id " & _
                       "and a.object_type = 18 " & _
                 "left join " & gtypSession.sDBPrefixMD & "dssmdobjinfo a2 " & _
                        "on a1.DEPN_OBJID = a2.object_id and a1.DEPN_PRJID = a2.project_id "
        
         '-- *mod* v2.1r11a Library Shortcut to actual object
         sSqlFrom = sSqlFrom & _
             "left join " & gtypSession.sDBPrefixMD & "dssmdlnkitem L1 " & _
                    "on L1.object_id = a.object_id and L1.project_id = a.project_id " & _
                   "and a.object_type = 18 " & _
             "left join " & gtypSession.sDBPrefixMD & "dssmdlnkitem L2 " & _
                    "on L1.LINKITEM_ID = L2.LINKITEM_ID and L1.project_id = L2.project_id " & _
                   "and L2.object_type = 55 " & _
             "left join " & gtypSession.sDBPrefixMD & "dssmdobjinfo L3 " & _
                    "on L2.object_id = L3.object_id and L2.project_id = L3.project_id "
                 
        '--*mod* v2.1z Get FFSQL Logical Table Names
        '--1. ffsql table is one per report  (dssmdobjdepn table contains 1 object_id only (where depn_objid is ffsql table)
        '--2. ffsql table name can have a name or can be '1'.  If not '1', then ffsql table name is not renamed if ffsql reports is renamed
        '--3. ffsql table can be define as Mstr Logical Table View.  In this case the parent object is "Tables" and not 'Managed Objects'
        '-- F2 - ffsql Report Name, F3 - ffsql Table Parent Name
        sSqlFrom = sSqlFrom & _
            "left join " & gtypSession.sDBPrefixMD & "dssmdobjdepn f1 " & _
            "on f1.DEPN_OBJID = a.object_id and f1.DEPN_PRJID = a.project_id " & _
            "and a.object_type = 15 and a.subtype=3840 and a.extended_type = 3 " & _
            "left join " & gtypSession.sDBPrefixMD & "dssmdobjinfo f2 " & _
            "on f1.object_id = f2.object_id " & _
            "and f1.project_id = f2.project_id " & _
            "left join " & gtypSession.sDBPrefixMD & "dssmdobjinfo f3 " & _
            "on a.Parent_ID = f3.object_id " & _
            "and a.project_id = f3.project_id " & _
            "and f3.object_name = 'Managed Objects'"
    Else        '-- None recursive but still need to create new batch due to all users
        sSqlSelect = "select distinct "

        '-- object type = 18 - shortcut
        '--*mod* v2.1z Use actual object name for shortcut and ffsql report name for ffsql table
        '--*mod* v2.1R1c replace Concat with + for SQLServer 2008 compatiblity
        '-- *mod* v2.1r11a Library Shortcut to actual object
        If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
            sSqlSelect = sSqlSelect & _
                "case When a.object_type = 18 And a2.object_name Is Not Null Then a2.object_name When a.object_type = 18 And L3.object_name Is Not Null Then L3.object_name " & _
                "when a.object_type = 15 and a.subtype=3840 and a.extended_type = 3 and f3.object_name = 'Managed Objects' then 'Logical Table for ' + f2.object_name " & _
                "else a.object_name end Object_Name "
        ElseIf gtypSQLTmpTable.nDBID = nOracle Or gtypSQLTmpTable.nDBID = nMySql Or gtypSQLTmpTable.nDBID = nPostgreSQL Then
            sSqlSelect = sSqlSelect & _
                "case When a.object_type = 18 And a2.object_name Is Not Null Then a2.object_name When a.object_type = 18 And L3.object_name Is Not Null Then L3.object_name " & _
                "when a.object_type = 15 and a.subtype=3840 and a.extended_type = 3 and f3.object_name = 'Managed Objects' then concat('Logical Table for ', f2.object_name) " & _
                "else a.object_name end Object_Name "
        End If
                
        sSqlSelect = sSqlSelect & _
                ", a.object_type as Object_Type_Num, a.subtype as Object_SubType_Num, " & gsSQLDocTypeByViewMedia("a", "L3") & " as Object_Extended_Type_Num " & _
                ", b.login as Object_Owner_Login_ID " & _
                ", a.create_time as Object_Create_Time, a.mod_time as Object_Update_Time " & _
                ", a.hidden as Object_Hidden_flag " & _
                ", a.object_id " & _
                ", a.Parent_ID " & _
                ", a.version_id as Object_Version_ID "
                
        If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
            sSqlSelect = sSqlSelect & ", case when x2.Folder_Path is NULL then '' else x2.Folder_Path end Folder_Path "    '*mod* v2.1
        ElseIf gtypSQLTmpTable.nDBID = nOracle Then
            sSqlSelect = sSqlSelect & ", case when x2.Folder_Path is NULL then chr('') else x2.Folder_Path end Folder_Path "    '*mod* v2.1
        ElseIf gtypSQLTmpTable.nDBID = nMySql Or gtypSQLTmpTable.nDBID = nPostgreSQL Then
            sSqlSelect = sSqlSelect & ", case when x2.Folder_Path is NULL then '' else x2.Folder_Path end Folder_Path "
        End If

        sSqlSelect = sSqlSelect & ", 0 Level1_Dep_Num "     '-- No need to flag as Original data since they are all are
        sSqlSelect = sSqlSelect & ", 0 TreeLevel "
                
        '-- Final From Clause
        sSqlFrom = " from " & gtypSession.sDBPrefixMD & "dssmdobjinfo a  " & _
                    "join " & gtypSession.sDBPrefixMD & "dssmdusracct b  " & _
                    "on a.owner_id = b.object_id " & _
                    "join " & pvsSourceTableName & " x1 on a.object_id = x1.object_id and a.project_id = x1.project_id " & _
                    "left join " & gtypSQLTmpTable.sTmpFolderPathTable & " x2 on a.object_id = x2.original_id and a.project_id = x2.project_id "
        
        '-- Shortcut to actual object
        sSqlFrom = sSqlFrom & _
                 "left join " & gtypSession.sDBPrefixMD & "dssmdobjdepn a1 " & _
                        "on a1.object_id = a.object_id and a1.project_id = a.project_id " & _
                       "and a.object_type = 18 " & _
                 "left join " & gtypSession.sDBPrefixMD & "dssmdobjinfo a2 " & _
                        "on a1.DEPN_OBJID = a2.object_id and a1.DEPN_PRJID = a2.project_id "
        
         '-- *mod* v2.1r11a Library Shortcut to actual object
         sSqlFrom = sSqlFrom & _
             "left join " & gtypSession.sDBPrefixMD & "dssmdlnkitem L1 " & _
                    "on L1.object_id = a.object_id and L1.project_id = a.project_id " & _
                   "and a.object_type = 18 " & _
             "left join " & gtypSession.sDBPrefixMD & "dssmdlnkitem L2 " & _
                    "on L1.LINKITEM_ID = L2.LINKITEM_ID and L1.project_id = L2.project_id " & _
                   "and L2.object_type = 55 " & _
             "left join " & gtypSession.sDBPrefixMD & "dssmdobjinfo L3 " & _
                    "on L2.object_id = L3.object_id and L2.project_id = L3.project_id "
            
        '--*mod* v2.1z Get FFSQL Logical Table Names
        '--1. ffsql table is one per report  (dssmdobjdepn table contains 1 object_id only (where depn_objid is ffsql table)
        '--2. ffsql table name can have a name or can be '1'.  If not '1', then ffsql table name is not renamed if ffsql reports is renamed
        '--3. ffsql table can be define as Mstr Logical Table View.  In this case the parent object is "Tables" and not 'Managed Objects'
        '-- F2 - ffsql Report Name, F3 - ffsql Table Parent Name
        sSqlFrom = sSqlFrom & _
            "left join " & gtypSession.sDBPrefixMD & "dssmdobjdepn f1 " & _
            "on f1.DEPN_OBJID = a.object_id and f1.DEPN_PRJID = a.project_id " & _
            "and a.object_type = 15 and a.subtype=3840 and a.extended_type = 3 " & _
            "left join " & gtypSession.sDBPrefixMD & "dssmdobjinfo f2 " & _
            "on f1.object_id = f2.object_id " & _
            "and f1.project_id = f2.project_id " & _
            "left join " & gtypSession.sDBPrefixMD & "dssmdobjinfo f3 " & _
            "on a.Parent_ID = f3.object_id " & _
            "and a.project_id = f3.project_id " & _
            "and f3.object_name = 'Managed Objects'"
    End If
    sSqlFrom = sSqlFrom & _
                    " left join " & gtypSession.sDBPrefixMD & "dssmdobjsecu s " & _
                    " on a.OBJECT_ID = s.OBJECT_ID " & _
                    " and a.project_id = s.project_id " & _
                    " left join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d " & _
                    " on d.OBJECT_ID = s.TRUST_ID " & _
                    " where s.rights < 500000000 or s.rights IS NULL "
                    '--*mod* v2.1 d.project is the System which is unique d.project_id = a2.project_id
                    '--*mod* v2.1z if for all users and object has no permissions (such as logical table for ffsql), it should still show the object
    '... Add ACL here USER=> Explicit Rights or USER-> Implicit Rights
    '-- folder's rights for children starts over 500000000
    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
        '*mod* v2.1t
        '*mod* v2.1r8f add . to end of ACL to indicate group
        sSqlSelect = sSqlSelect & ", cast(case when d.subtype = 8704 then d.abbreviation else d.object_name end + ' => '" & _
                            "+ CASE Coalesce(s.rights, -1) WHEN 199 THEN 'View' WHEN 223 THEN 'Modify' WHEN 255 THEN 'Full' WHEN -1 THEN '' ELSE 'Custom' END + Case when d.subtype = 8704 then '' else '.' end as nvarchar(255)) AS Object_ACL_Name "
    ElseIf gtypSQLTmpTable.nDBID = nOracle Or gtypSQLTmpTable.nDBID = nMySql Or gtypSQLTmpTable.nDBID = nPostgreSQL Then
        sSqlSelect = sSqlSelect & ", Concat(Concat(Concat(case when d.subtype = 8704 then d.abbreviation else d.object_name end , ' => ' " & _
                        "), CASE Coalesce(s.rights, -1) WHEN 199 THEN 'View' WHEN 223 THEN 'Modify' WHEN 255 THEN 'Full' WHEN -1 THEN '' ELSE 'Custom' END) , case when d.subtype = 8704 then '' else '.' end) Object_ACL_Name "
    End If

    gsSQLtmpAccessRightsAll = gsSqlTmpTableCreation(pvsTargetTableName, sSqlSelect, sSqlFrom)
End Function

Public Function gsSQLTmpACLObjects(ByVal pvsTargetTableName As String, ByVal pvsSourceTableName As String) As String
'-- cloned from gsSQLtmpAccessRightsAll
'-- Get a ACL on objects in source table (could be report or components)
'------------- Temp Table Usage ----------------
'   Input:
'pvsSourceTableName ==> Object List
'   Output:
'pvsTargetTableName ==> Object ACLs
'   Temporary:
'none
'-----------------------------------------------
Dim sSqlSelect As String
Dim sSqlFrom As String

Dim pvsAccessUser As String

    gsProcName = "Get Object ACL"
                '--"select distinct " & pvlBatchRunId & " as Batch_Run_ID "

    'if user_type = 8704 then user else user group
    sSqlSelect = "select distinct " & _
            ", a.object_id " & _
            ", a.project_id " & _
            ", s.TRUST_ID user_id " & _
            ", s.rights " & _
            ", d.subtype user_type "
            
    '... Add ACL here USER=> Explicit Rights or USER-> Implicit Rights
    '-- folder's rights for children starts over 500000000
    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
        '*mod* v2.1t
        sSqlSelect = sSqlSelect & ", cast(case when d.subtype = 8704 then d.abbreviation else d.object_name end + ' => '" & _
                            "+ CASE Coalesce(s.rights, -1) WHEN 199 THEN 'View' WHEN 223 THEN 'Modify' WHEN 255 THEN 'Full' WHEN -1 THEN '' ELSE 'Custom' END as nvarchar(255)) AS Object_ACL_Name "
    ElseIf gtypSQLTmpTable.nDBID = nOracle Or gtypSQLTmpTable.nDBID = nMySql Or gtypSQLTmpTable.nDBID = nPostgreSQL Then
        sSqlSelect = sSqlSelect & ", Concat(Concat(case when d.subtype = 8704 then d.abbreviation else d.object_name end , ' => ' " & _
                        "), CASE Coalesce(s.rights, -1) WHEN 199 THEN 'View' WHEN 223 THEN 'Modify' WHEN 255 THEN 'Full' WHEN -1 THEN '' ELSE 'Custom' END) Object_ACL_Name "
    End If

    '-- Final From Clause
    sSqlFrom = " from " & gtypSession.sDBPrefixMD & "dssmdobjinfo a  " & _
                "join " & pvsSourceTableName & " x1 on a.object_id = x1.object_id and a.project_id = x1.project_id " & _
                "left join " & gtypSQLTmpTable.sTmpFolderPathTable & " x2 on a.object_id = x2.original_id and a.project_id = x2.project_id "
    
    sSqlFrom = sSqlFrom & _
                    " left join " & gtypSession.sDBPrefixMD & "dssmdobjsecu s " & _
                    " on a.OBJECT_ID = s.OBJECT_ID " & _
                    " and a.project_id = s.project_id " & _
                    " left join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d " & _
                    " on d.OBJECT_ID = s.TRUST_ID " & _
                    " where s.rights < 500000000 or s.rights IS NULL "
                    '--*mod* v2.1 d.project is the System which is unique d.project_id = a2.project_id
                    '--*mod* v2.1z if for all users and object has no permissions (such as logical table for ffsql), it should still show the object
    
    gsSQLTmpACLObjects = gsSqlTmpTableCreation(pvsTargetTableName, sSqlSelect, sSqlFrom)
End Function

Public Function gsSQLTmpACLObjectsCIA(ByVal pvsTargetTableName As String, ByVal pvsSourceTableName As String, ByVal pvsWhere As String) As String
'-- cloned from gsSQLTmpACLObjects used for Change Impact Analysis processing
'-- Get a ACL on objects in source table
'------------- Temp Table Usage ----------------
'   Input:
'pvsSourceTableName ==> Object List
'   Output:
'pvsTargetTableName ==> Object ACLs
'   Temporary:
'none
'-----------------------------------------------
Dim sSqlSelect As String
Dim sSqlFrom As String

Dim pvsAccessUser As String

    gsProcName = "Get Object ACL for CIA"

    sSqlSelect = "select distinct " & _
            " a.object_id " & _
            ", a.project_id " & _
            ", s.TRUST_ID user_id " & _
            ", s.rights " & _
            ", d.subtype user_type "

    'if user_type = 8704 then user else user group
    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
        '*mod* v2.1t
        sSqlSelect = sSqlSelect & ", cast(case when d.subtype = 8704 then d.abbreviation else d.object_name end as nvarchar(255)) ACL_Assignee "
    ElseIf gtypSQLTmpTable.nDBID = nOracle Or gtypSQLTmpTable.nDBID = nMySql Or gtypSQLTmpTable.nDBID = nPostgreSQL Then
        sSqlSelect = sSqlSelect & ", case when d.subtype = 8704 then d.abbreviation else d.object_name end ACL_Assignee "
    End If

    '-- folder's rights for children starts over 500000000
    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
        '*mod* v2.1t
        sSqlSelect = sSqlSelect & ", cast(CASE Coalesce(s.rights, -1) WHEN 199 THEN 'View' WHEN 223 THEN 'Modify' WHEN 255 THEN 'Full' WHEN -1 THEN '' ELSE 'Custom' END as nvarchar(255)) AS ACL_Right "
    ElseIf gtypSQLTmpTable.nDBID = nOracle Or gtypSQLTmpTable.nDBID = nMySql Or gtypSQLTmpTable.nDBID = nPostgreSQL Then
        sSqlSelect = sSqlSelect & ", CASE Coalesce(s.rights, -1) WHEN 199 THEN 'View' WHEN 223 THEN 'Modify' WHEN 255 THEN 'Full' WHEN -1 THEN '' ELSE 'Custom' END ACL_Right "
    End If

    '-- Final From Clause
    sSqlFrom = " from " & gtypSession.sDBPrefixMD & "dssmdobjinfo a " & _
                "join " & pvsSourceTableName & " x1 on a.object_id = x1.object_id and a.project_id = x1.project_id "
    
    sSqlFrom = sSqlFrom & _
                    " left join " & gtypSession.sDBPrefixMD & "dssmdobjsecu s " & _
                    " on a.OBJECT_ID = s.OBJECT_ID " & _
                    " and a.project_id = s.project_id " & _
                    " left join " & gtypSession.sDBPrefixMD & "dssmdobjinfo d " & _
                    " on d.OBJECT_ID = s.TRUST_ID " & _
                    " where (s.rights < 500000000 or s.rights IS NULL) "
                    '--*mod* v2.1 d.project is the System which is unique d.project_id = a2.project_id
                    '--*mod* v2.1z if for all users and object has no permissions (such as logical table for ffsql), it should still show the object
    
    gsSQLTmpACLObjectsCIA = gsSqlTmpTableCreation(pvsTargetTableName, sSqlSelect, sSqlFrom & pvsWhere)
End Function

Public Function gsSQLTmpACLNoAccess(ByVal pvsTargetTableName As String, ByVal pvsSourceTableName As String, ByVal pvsIntermTable As String, ByVal pvlBatchRunId As Long) As String
'-- cloned from gsSQLtmpAccessRights
'-- Get a ACL on objects in source table (could be report or components)
'------------- Temp Table Usage ----------------
'   Input:
'gtypSQLTmpTable.sTmpFolderPathTable
'pvsSourceTableName ==> Object List, must contain report object id and recipient object id, can be a select SQL with parenthesis
'pvsIntermTable ==> List user groups
'   Output:
'pvsTargetTableName
'   Temporary:
'none
'-----------------------------------------------
Dim sSqlSelect As String
Dim sSqlFrom As String

'... bug ==> when getting recursive objects, the recipient_object_id is lost
'-------------------

    gsProcName = "Get subscriptions with no access to reports "
                    
    sSqlSelect = "select distinct " & pvlBatchRunId & " as Batch_Run_ID, "

    '--*mod* v2.1z Use actual object name for shortcut and ffsql report name for ffsql table
    '--*mod* v2.1R1c replace Concat with + for SQLServer 2008 compatiblity
    '-- *mod* v2.1r11a Library Shortcut to actual object
    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
        sSqlSelect = sSqlSelect & _
            "case When a.object_type = 18 And a2.object_name Is Not Null Then a2.object_name When a.object_type = 18 And L3.object_name Is Not Null Then L3.object_name " & _
            "when a.object_type = 15 and a.subtype=3840 and a.extended_type = 3 and f3.object_name = 'Managed Objects' then 'Logical Table for ' + f2.object_name " & _
            "else a.object_name end Object_Name "
    ElseIf gtypSQLTmpTable.nDBID = nOracle Or gtypSQLTmpTable.nDBID = nMySql Or gtypSQLTmpTable.nDBID = nPostgreSQL Then
        sSqlSelect = sSqlSelect & _
            "case When a.object_type = 18 And a2.object_name Is Not Null Then a2.object_name When a.object_type = 18 And L3.object_name Is Not Null Then L3.object_name " & _
            "when a.object_type = 15 and a.subtype=3840 and a.extended_type = 3 and f3.object_name = 'Managed Objects' then concat('Logical Table for ', f2.object_name) " & _
            "else a.object_name end Object_Name "
    End If
            
'*mod* v2.1z1 added Contact ID (recipient_object_id) to output to filter recipient has no access permission
'*mod* v2.1z1 added Original ID for recursive objects tie back to reports level
    sSqlSelect = sSqlSelect & _
            ", a.object_type as Object_Type_Num, a.subtype as Object_SubType_Num, " & gsSQLDocTypeByViewMedia("a", "L3") & " as Object_Extended_Type_Num " & _
            ", b.login as Object_Owner_Login_ID " & _
            ", a.create_time as Object_Create_Time, a.mod_time as Object_Update_Time " & _
            ", a.hidden as Object_Hidden_flag " & _
            ", a.object_id " & _
            ", a.Parent_ID " & _
            ", a.version_id as Object_Version_ID " & _
            ", x1.recipient_object_id " & _
            ", x1.original_id "
            
    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
        sSqlSelect = sSqlSelect & ", case when x2.Folder_Path is NULL then '' else x2.Folder_Path end Folder_Path "    '*mod* v2.1
    ElseIf gtypSQLTmpTable.nDBID = nOracle Then
        sSqlSelect = sSqlSelect & ", case when x2.Folder_Path is NULL then chr('') else x2.Folder_Path end Folder_Path "    '*mod* v2.1
    ElseIf gtypSQLTmpTable.nDBID = nMySql Or gtypSQLTmpTable.nDBID = nPostgreSQL Then
        sSqlSelect = sSqlSelect & ", case when x2.Folder_Path is NULL then '' else x2.Folder_Path end Folder_Path "
    End If

'    '-- *mod* v1.1 12/10/2015 cl save Original_Data flag as 1 in Level1_Dep_Num column
'    sSqlSelect = sSqlSelect & _
'            ", case when x1.Original_Data = 'Y' then 1 else 0 end Level1_Dep_Num "
'
'    '-- *mod* v2.1 2/11/2016 cl Treelevel place holder
'    sSqlSelect = sSqlSelect & ", x1.TreeLevel "
    sSqlSelect = sSqlSelect & ", 0 Level1_Dep_Num "     '*mod* v1.1 12/10/2015 cl save Original_Data flag as 1 in Level1_Dep_Num column
    sSqlSelect = sSqlSelect & ", 0 TreeLevel "          '*mod* v2.1 2/11/16 cl save tree hieararchy for Dependents and Components Search, 0 for others

    sSqlFrom = " from " & gtypSession.sDBPrefixMD & "dssmdobjinfo a  " & _
                "join " & gtypSession.sDBPrefixMD & "dssmdusracct b  " & _
                "on a.owner_id = b.object_id " & _
                "join " & pvsSourceTableName & " x1 on a.object_id = x1.object_id and a.project_id = x1.project_id " & _
                "left join " & gtypSQLTmpTable.sTmpFolderPathTable & " x2 on a.object_id = x2.original_id and a.project_id = x2.project_id " & _
                "join " & gtypSession.sDBPrefixMD & "dssmdobjinfo u on x1.recipient_object_id = " & gsPurifyGUIDsqlFromSQL("u.object_id") & " "
                '--^^ when joining to user in objinfo table, the user project ID is system project ID
    
    '-- *mod* v2.1z1 ***ASSUME pvsIntermTable whose original_id is always user and not group
    '-- Only returns active users
    '-- Note if user is deactivated, it will not included in pvsIntermTable
    If Not gbDebug Then
        sSqlFrom = sSqlFrom & _
                    "join " & pvsIntermTable & " c " & _
                    "on x1.recipient_object_id = " & gsPurifyGUIDsqlFromSQL("c.original_id") & " " & _
                    "and c.Original_Data = 'Y' "
    End If
    
   '-- Shortcut to actual object
   sSqlFrom = sSqlFrom & _
            "left join " & gtypSession.sDBPrefixMD & "dssmdobjdepn a1 " & _
                   "on a1.object_id = a.object_id and a1.project_id = a.project_id " & _
                  "and a.object_type = 18 " & _
            "left join " & gtypSession.sDBPrefixMD & "dssmdobjinfo a2 " & _
                   "on a1.DEPN_OBJID = a2.object_id and a1.DEPN_PRJID = a2.project_id "
   
    '-- *mod* v2.1r11a Library Shortcut to actual object
    sSqlFrom = sSqlFrom & _
        "left join " & gtypSession.sDBPrefixMD & "dssmdlnkitem L1 " & _
               "on L1.object_id = a.object_id and L1.project_id = a.project_id " & _
              "and a.object_type = 18 " & _
        "left join " & gtypSession.sDBPrefixMD & "dssmdlnkitem L2 " & _
               "on L1.LINKITEM_ID = L2.LINKITEM_ID and L1.project_id = L2.project_id " & _
              "and L2.object_type = 55 " & _
        "left join " & gtypSession.sDBPrefixMD & "dssmdobjinfo L3 " & _
               "on L2.object_id = L3.object_id and L2.project_id = L3.project_id "
        
    '--*mod* v2.1z Get FFSQL Logical Table Names
    '--1. ffsql table is one per report  (dssmdobjdepn table contains 1 object_id only (where depn_objid is ffsql table)
    '--2. ffsql table name can have a name or can be '1'.  If not '1', then ffsql table name is not renamed if ffsql reports is renamed
    '--3. ffsql table can be define as Mstr Logical Table View.  In this case the parent object is "Tables" and not 'Managed Objects'
    '-- F2 - ffsql Report Name, F3 - ffsql Table Parent Name
    sSqlFrom = sSqlFrom & _
            "left join " & gtypSession.sDBPrefixMD & "dssmdobjdepn f1 " & _
            "on f1.DEPN_OBJID = a.object_id and f1.DEPN_PRJID = a.project_id " & _
            "and a.object_type = 15 and a.subtype=3840 and a.extended_type = 3 " & _
            "left join " & gtypSession.sDBPrefixMD & "dssmdobjinfo f2 " & _
            "on f1.object_id = f2.object_id " & _
            "and f1.project_id = f2.project_id " & _
            "left join " & gtypSession.sDBPrefixMD & "dssmdobjinfo f3 " & _
            "on a.Parent_ID = f3.object_id " & _
            "and a.project_id = f3.project_id " & _
            "and f3.object_name = 'Managed Objects'"
    
    '... Add ACL here USER=> Explicit Rights or USER-> Implicit Rights
    '-- folder's rights for children starts over 500000000
    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
        sSqlSelect = sSqlSelect & ", cast(u.abbreviation + case when x4.Original_Data = 'Y' then '=> ' else '-> ' end " & _
                            "+ CASE Coalesce(x4.rights, -1) WHEN 199 THEN 'View' WHEN 223 THEN 'Modify' WHEN 255 THEN 'Full' WHEN -1 THEN '' ELSE 'Custom' END as nvarchar(255)) AS Object_ACL_Name "
    ElseIf gtypSQLTmpTable.nDBID = nOracle Or gtypSQLTmpTable.nDBID = nMySql Or gtypSQLTmpTable.nDBID = nPostgreSQL Then
        sSqlSelect = sSqlSelect & ", Concat(Concat(u.abbreviation , case when x4.Original_Data = 'Y' then '=> ' else '-> ' end " & _
                        "), CASE Coalesce(x4.rights, -1) WHEN 199 THEN 'View' WHEN 223 THEN 'Modify' WHEN 255 THEN 'Full' WHEN -1 THEN '' ELSE 'Custom' END) Object_ACL_Name "
    End If
    
    '--if Original_Data = 'Y' then user else user group
    '-- Below subquery only returns 1 row
    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
        sSqlFrom = sSqlFrom & " Cross Apply ( " & _
                    " select top 1 a.object_id, a.project_id, Coalesce(b.rights, -1) rights, d.Original_Data " & _
                    " from " & gtypSession.sDBPrefixMD & "dssmdobjsecu b " & _
                    " join " & pvsIntermTable & " d " & _
                    " on d.OBJECT_ID = b.TRUST_ID " & _
                    " where b.rights < 500000000 " & _
                    " and a.OBJECT_ID = b.OBJECT_ID " & _
                    " and a.project_id = b.project_id " & _
                    " and x1.OBJECT_ID = d.OBJECT_ID " & _
                    " and x1.project_id = d.project_id " & _
                    " and x1.recipient_object_id = " & gsPurifyGUIDsqlFromSQL("d.original_id") & " " & _
                    " order by b.rights desc, case when d.OBJECT_ID is null then 'z' else 'a' end, b.OBJECT_TYPE  " & _
                    " ) x4 "
                    '-- folder's rights for children starts over 500000000
    ElseIf gtypSQLTmpTable.nDBID = nOracle Or gtypSQLTmpTable.nDBID = nMySql Or gtypSQLTmpTable.nDBID = nPostgreSQL Then
        sSqlFrom = sSqlFrom & " left join (select x4a.original_id, x4a.object_id, x4a.project_id, x4a.rights, x4a.Original_Data from ( " & _
                    " select d.original_id, a.object_id, a.project_id, b.rights, d.Original_Data, row_number() over (partition by a.object_id, d.original_id order by b.rights desc) rn " & _
                    " from " & pvsSourceTableName & " a " & _
                    " join " & gtypSession.sDBPrefixMD & "dssmdobjsecu b " & _
                    " on a.OBJECT_ID = b.OBJECT_ID " & _
                    " and a.project_id = b.project_id " & _
                    " join " & pvsIntermTable & " d " & _
                    " on d.OBJECT_ID = b.TRUST_ID " & _
                    " and " & gsPurifyGUIDsqlFromSQL("d.original_id") & " = a.recipient_object_id " & _
                    " where b.rights < 500000000 " & _
                    " order by b.rights desc, case when d.OBJECT_ID is null then 'z' else 'a' end, b.OBJECT_TYPE  " & _
                    " ) x4a where rn <= 1) x4 on x1.OBJECT_ID = x4.OBJECT_ID and x1.project_id = x4.project_id and x1.recipient_object_id = " & gsPurifyGUIDsqlFromSQL("x4.original_id") & " "
                    '-- folder's rights for children starts over 500000000
    End If
    
    '-- Admin ID 54F3D26011D2896560009A8E67019608
    '-- Admin Group 5F3FAFE111D2D8CC6000CC8E67019608
    If Not gbDebug Then
        sSqlFrom = sSqlFrom & " where x4.rights IS NULL " & _
                    " and x1.recipient_object_id <> " & gsAdminUserGUIDPure() & _
                    " and x1.recipient_object_id not in (select " & gsPurifyGUIDsqlFromSQL("original_id") & " from " & pvsIntermTable & " where Original_Data <> 'Y' and object_id = " & gsAdminUserGUID() & ")"
    End If

    gsSQLTmpACLNoAccess = gsSqlTmpTableCreation(pvsTargetTableName, sSqlSelect, sSqlFrom)
End Function

Public Function gsSQLtmpWSActiveRecipients(ByVal pvsTargetTableName As String, ByVal pvsSourceTableName As String) As String
'-----------------------------------------------------------------------------
' Get account object id from recipients
'-----------------------------------------------------------------------------
'------------- Temp Table Usage ----------------
'   Input:
'pvsSourceTableName     ==> Contain recipients
'   Output:
'pvsTargetTableName
'   Temporary:
'none
'-----------------------------------------------
Dim sSqlSelect As String
Dim sSqlFrom As String

    gsProcName = "Get WS Recipients "
    sSqlSelect = "select distinct a.project_id, a.object_id "

    '*mod* v2.1r7t - make sure to convert GUID Object IDs for Sql Server
    sSqlFrom = " from " & gtypSession.sDBPrefixMD & "DSSMDOBJINFO a " & _
                "join " & pvsSourceTableName & " b " & _
                " on " & gsPurifyGUIDsqlFromSQL("a.object_id") & " = b.recipient_object_id "
                '--^^ User account is from system project, thus, cannot join by project_id
                
    '-- Join to contact table to get user status
    '*mod* v2.1r7t - make sure to convert GUID Object IDs for Sql Server --> removed v2.1r8c
    '       " on " & gsPurifyGUIDsqlFromSQL("b.recipient_object_id") & " = c.contact_id "
    sSqlFrom = sSqlFrom & _
       " join " & gtypSession.sDBPrefixMD & "dsscscontact c " & _
       " on b.recipient_object_id = c.contact_id " & _
       " where c.status = 1 "
                        
                '--where object_type = 34 and ((subtype = 8704 and UPPER(abbreviation) = ('" & UCase(pvsAccessUser) & "')) or (subtype = 8705 and UPPER(object_name) = ('" & UCase(pvsAccessUser) & "'))) "

    gsSQLtmpWSActiveRecipients = gsSqlTmpTableCreation(pvsTargetTableName, sSqlSelect, sSqlFrom)
End Function

Public Function gsSQLtmpNCSRecipients(ByVal pvsTargetTableName As String, ByVal pvsSourceTableName As String) As String
'-----------------------------------------------------------------------------
' Get account object id from recipients
'-----------------------------------------------------------------------------
'------------- Temp Table Usage ----------------
'   Input:
'pvsSourceTableName     ==> Contain recipients
'   Output:
'pvsTargetTableName
'   Temporary:
'none
'-----------------------------------------------
Dim sSqlSelect As String
Dim sSqlFrom As String

    gsProcName = "Get NCS Recipients "

    sSqlSelect = "select distinct m1.project_id, m1.object_id "
    '--*mod* v2.1R1c replace Concat with + for SQLServer 2008 compatiblity
    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
        sSqlFrom = " from " & pvsSourceTableName & " a " & _
                " join " & gtypSession.sDBPrefixSB & "mstraddresses b " & _
                " on a.Recipient_Address_ID = b.MR_Address_ID " & _
                " join " & gtypSession.sDBPrefixSB & "MSTRUSERS f " & _
                "  on b.MR_USER_ID = f.MR_USER_ID " & _
                " join " & gtypSession.sDBPrefixMD & "DSSMDUSRACCT m1 " & _
                " on f.mr_user_name like '%' + " & gsPurifyGUIDsqlFromSQL("m1.object_id") & " + '%' " & _
                " or lower(b.mr_physical_add) in (select lower(m3.address) " & _
                " from " & gtypSession.sDBPrefixMD & "DSSCSCONTACT m2 " & _
                " left join " & gtypSession.sDBPrefixMD & "DSSCSADDRESS m3 " & _
                " ON     m3.contact_id = m2.contact_id " & _
                " where     m2.contact_id = " & gsPurifyGUIDsqlFromSQL("m1.object_id") & ") "
                
    ElseIf gtypSQLTmpTable.nDBID = nOracle Or gtypSQLTmpTable.nDBID = nMySql Or gtypSQLTmpTable.nDBID = nPostgreSQL Then
        sSqlFrom = " from " & pvsSourceTableName & " a " & _
                " join " & gtypSession.sDBPrefixSB & "mstraddresses b " & _
                " on a.Recipient_Address_ID = b.MR_Address_ID " & _
                " join " & gtypSession.sDBPrefixSB & "MSTRUSERS f " & _
                "  on b.MR_USER_ID = f.MR_USER_ID " & _
                " join " & gtypSession.sDBPrefixMD & "DSSMDUSRACCT m1 " & _
                " on f.mr_user_name like concat(concat('%', m1.object_id), '%') " & _
                " or lower(b.mr_physical_add) in (select lower(m3.address) " & _
                " from " & gtypSession.sDBPrefixMD & "DSSCSCONTACT m2 " & _
                " left join " & gtypSession.sDBPrefixMD & "DSSCSADDRESS m3 " & _
                " ON     m3.contact_id = m2.contact_id " & _
                " where     m2.contact_id = m1.object_id) "
                
    End If

                
'                " join " & gtypSession.sDBPrefixMD & "DSSMDOBJINFO x " & _
'                " ON     m1.object_id = x.object_id " & _
'                " ON     m1.project_id = x.project_id " & _

'        sSqlFrom = sSqlFrom & _
'        "join (" & _
'                "SELECT a.address , c.object_id " & _
'                "FROM " & gtypSession.sDBPrefixMD & "DSSMDUSRACCT c " & _
'                "left join " & gtypSession.sDBPrefixMD & "DSSCSCONTACT b " & _
'                "left join " & gtypSession.sDBPrefixMD & "DSSCSADDRESS a " & _
'                "ON     a.contact_id = b.contact_id " & _
'                "ON     b.contact_id = c.object_id " & _
'                "WHERE  c.login = '" & UCase(pvsUserLoginCode) & "'" & _
'                ") z1 " & _
'                "on f.mr_user_name like concatxxx(concatxxx('%', z1.object_id), '%') " & _
'                "or lower(b.mr_physical_add) = lower(z1.address) "
                

                '--where object_type = 34 and ((subtype = 8704 and UPPER(abbreviation) = ('" & UCase(pvsAccessUser) & "')) or (subtype = 8705 and UPPER(object_name) = ('" & UCase(pvsAccessUser) & "'))) "

    gsSQLtmpNCSRecipients = gsSqlTmpTableCreation(pvsTargetTableName, sSqlSelect, sSqlFrom)
End Function

Public Function gsSQLTmpNCSReportLookup(ByVal pvsTargetTableName As String, ByVal pvsSourceTableName As String) As String
'------------- Temp Table Usage ----------------
'   Input:
'pvsSourceTableName     ==> NCS Object List
'   Output:
'pvsTargetTableName     ==> All NCS objects and objects whose reports matched with I-server
'   Temporary:
'none
'-----------------------------------------------
Dim sSqlSelect As String
Dim sSqlFrom As String

    gsProcName = "Get NCS Report Lookup "

    '-- find I-server reports by matching NCS report name
    sSqlSelect = "select a.*, xa.object_id, xa.project_id "

    sSqlFrom = " from " & pvsSourceTableName & " a " & _
            " join " & gtypSession.sDBPrefixMD & "dssmdobjinfo xa " & _
                " ON  a.Nested_Doc_UPname = xa.object_uname " & _
                " and xa.object_type in (3, 55) " & _
                " and xa.project_id = '" & gtypSession.sMstrProjectID & "'"
    
    gsSQLTmpNCSReportLookup = gsSqlTmpTableCreation(pvsTargetTableName, sSqlSelect, sSqlFrom)
End Function

Public Function gsSQLtmpObjectOwnerAddress(ByVal pvsTargetTableName As String, ByVal pvsSourceTableName As String, ByVal pvsNewOwner As String) As String
'-- Get object owners to be used for generating Web Sub Scripts
'-- Need to return the original ID
'-- Use ! in Report_Owner_Login to signify disabled user
'-----------------------------------------------------------------------------------------------------------
'-- Input Temp Table
'o  #tmpSource_userid
'
'-- Output Temp table
'o  ##tmpFinalPass_userid   ==> Need to be global temp table because MS Access Qry needs to use different connection
'-----------------------------------------------------------------------------------------------------------
'Select a.ID, a.Object_ID, a.Object_Name, a.Object_Owner_Login_ID, a.Notification_User_Login_ID, a.Notification_Address_Name, a.Notification_Device_Name, a.Object_Type_Name, a.Object_Type_Num, a.Object_SubType_Num, a.Object_Extended_Type_Num
Dim sSqlSelect As String
Dim sSqlFrom As String

    gsProcName = "Get Owner Info"
    '-- Final Select Clause
    sSqlSelect = _
            "select distinct x1.ID "
    '-- object type = 18 - shortcut
    '--*mod* v2.1z Use actual object name for shortcut and ffsql report name for ffsql table
    '--*mod* v2.1R1c replace Concat with + for SQLServer 2008 compatiblity
    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
        sSqlSelect = sSqlSelect & _
            ", case When a.object_type = 18 And a2.object_name Is Not Null Then a2.object_name When a.object_type = 18 And L3.object_name Is Not Null Then L3.object_name " & _
            "when a.object_type = 15 and a.subtype=3840 and a.extended_type = 3 and f3.object_name = 'Managed Objects' then 'Logical Table for ' + f2.object_name " & _
            "else a.object_name end Object_Name "
    ElseIf gtypSQLTmpTable.nDBID = nOracle Or gtypSQLTmpTable.nDBID = nMySql Or gtypSQLTmpTable.nDBID = nPostgreSQL Then
        sSqlSelect = sSqlSelect & _
            ", case When a.object_type = 18 And a2.object_name Is Not Null Then a2.object_name When a.object_type = 18 And L3.object_name Is Not Null Then L3.object_name " & _
            "when a.object_type = 15 and a.subtype=3840 and a.extended_type = 3 and f3.object_name = 'Managed Objects' then concat('Logical Table for ', f2.object_name) " & _
            "else a.object_name end Object_Name "
    End If

    sSqlSelect = sSqlSelect & _
            ", a.object_type as Object_Type_Num, a.subtype as Object_SubType_Num, " & gsSQLDocTypeByViewMedia("a", "L3") & " as Object_Extended_Type_Num " & _
            ", a.object_id "
            
    '-- If report owner is disabled, add ! in front of owner Login
    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
        sSqlSelect = sSqlSelect & " , case when COALESCE(d3.Status,1) = 0 then '!' + b.login else b.login end Object_Owner_Login_ID "
    ElseIf gtypSQLTmpTable.nDBID = nOracle Or gtypSQLTmpTable.nDBID = nMySql Or gtypSQLTmpTable.nDBID = nPostgreSQL Then
        sSqlSelect = sSqlSelect & " , case when COALESCE(d3.Status,1) = 0 then Concat('!' , b.login) else b.login end Object_Owner_Login_ID "
    End If
            
    '-- Notifications Address
    sSqlSelect = sSqlSelect & _
            " , z1.login Notification_User_Login_ID " & _
            " , z1.Notification_Address_Name " & _
            " , z1.Notification_Address " & _
            " , b3.object_name Notification_Device_Name "

    '-- Final From Clause
    '*mod* v2.1r7t - make sure to convert GUID Object IDs for Sql Server
    '*mod* v2.1r9d - owner ID cannot join to Contact table
    sSqlFrom = " from " & gtypSession.sDBPrefixMD & "dssmdobjinfo a  " & _
            "join " & gtypSession.sDBPrefixMD & "dssmdusracct b  " & _
                "on a.owner_id = b.object_id " & _
            "left join " & gtypSession.sDBPrefixMD & "dsscscontact d3 " & _
               "  on " & gsPurifyGUIDsqlFromSQL("a.owner_id") & " = d3.contact_id " & _
            "join " & pvsSourceTableName & " x1 on a.object_id = x1.object_id and a.project_id = x1.project_id "

   '-- Shortcut to actual object
   sSqlFrom = sSqlFrom & _
            "left join " & gtypSession.sDBPrefixMD & "dssmdobjdepn a1 " & _
                   "on a1.object_id = a.object_id and a1.project_id = a.project_id " & _
                  "and a.object_type = 18 " & _
            "left join " & gtypSession.sDBPrefixMD & "dssmdobjinfo a2 " & _
                   "on a1.DEPN_OBJID = a2.object_id and a1.DEPN_PRJID = a2.project_id "
   
    '-- *mod* v2.1r11a Library Shortcut to actual object
    sSqlFrom = sSqlFrom & _
        "left join " & gtypSession.sDBPrefixMD & "dssmdlnkitem L1 " & _
               "on L1.object_id = a.object_id and L1.project_id = a.project_id " & _
              "and a.object_type = 18 " & _
        "left join " & gtypSession.sDBPrefixMD & "dssmdlnkitem L2 " & _
               "on L1.LINKITEM_ID = L2.LINKITEM_ID and L1.project_id = L2.project_id " & _
              "and L2.object_type = 55 " & _
        "left join " & gtypSession.sDBPrefixMD & "dssmdobjinfo L3 " & _
               "on L2.object_id = L3.object_id and L2.project_id = L3.project_id "
            
    '--*mod* v2.1z Get FFSQL Logical Table Names
    '--1. ffsql table is one per report  (dssmdobjdepn table contains 1 object_id only (where depn_objid is ffsql table)
    '--2. ffsql table name can have a name or can be '1'.  If not '1', then ffsql table name is not renamed if ffsql reports is renamed
    '--3. ffsql table can be define as Mstr Logical Table View.  In this case the parent object is "Tables" and not 'Managed Objects'
    '-- F2 - ffsql Report Name, F3 - ffsql Table Parent Name
    sSqlFrom = sSqlFrom & _
            "left join " & gtypSession.sDBPrefixMD & "dssmdobjdepn f1 " & _
            "on f1.DEPN_OBJID = a.object_id and f1.DEPN_PRJID = a.project_id " & _
            "and a.object_type = 15 and a.subtype=3840 and a.extended_type = 3 " & _
            "left join " & gtypSession.sDBPrefixMD & "dssmdobjinfo f2 " & _
            "on f1.object_id = f2.object_id " & _
            "and f1.project_id = f2.project_id " & _
            "left join " & gtypSession.sDBPrefixMD & "dssmdobjinfo f3 " & _
            "on a.Parent_ID = f3.object_id " & _
            "and a.project_id = f3.project_id " & _
            "and f3.object_name = 'Managed Objects'"

    '-- Gets Default notificaiton address
    '*mod* v2.1r7t - make sure to convert GUID Object IDs for Sql Server
    sSqlFrom = sSqlFrom & _
        " left join (" & _
                "SELECT  a.address_id, a.device_id, a.DISP_NAME Notification_Address_Name, a.address Notification_Address, c.login " & _
                "FROM " & gtypSession.sDBPrefixMD & "DSSCSADDRESS a " & _
                " join " & gtypSession.sDBPrefixMD & "DSSCSCONTACT b " & _
                "ON     a.contact_id = b.contact_id " & _
                " join " & gtypSession.sDBPrefixMD & "DSSMDUSRACCT c " & _
                "ON     b.contact_id = " & gsPurifyGUIDsqlFromSQL("c.object_id") & " " & _
                "WHERE a.IS_DEFAULT =-1 and a.Delivery_Type=1 "
                
    If pvsNewOwner = "" Then
        '-- Use Objects' Owner
        sSqlFrom = sSqlFrom & _
                ") z1 on z1.login = b.login "
    Else
        '-- Use new owner
        sSqlFrom = sSqlFrom & _
                "and c.login = '" & UCase(pvsNewOwner) & "'" & _
                ") z1 on z1.login = '" & UCase(pvsNewOwner) & "'"
    End If
    
    '-- v2.1r3 Get Device Name
    '*mod* v2.1r7t - make sure to convert GUID Object IDs for Sql Server
    sSqlFrom = sSqlFrom & _
       " left join " & gtypSession.sDBPrefixMD & "dssmdobjinfo b3 " & _
       " on z1.device_id = " & gsPurifyGUIDsqlFromSQL("b3.object_id") & " "
    
    gsSQLtmpObjectOwnerAddress = gsSqlTmpTableCreation(pvsTargetTableName, sSqlSelect, sSqlFrom)
End Function

Public Function gsSQLEmailAddressToSubscriberGet(ByVal pvsTargetTableName As String, ByVal pvsEmailAddress As String) As String
'Return SQL to Get user login code from first matching email address
'-----------------------------------------------------------------------------------------------------------
'-- Input Temp Table
'o  none
'
'-- Output Temp table
'o  none
'-----------------------------------------------------------------------------------------------------------
Dim sSqlSelect As String
Dim sSqlFrom As String
Dim sSqlFinal As String
    
    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
        sSqlSelect = "Select top 1 "
    ElseIf gtypSQLTmpTable.nDBID = nOracle Or gtypSQLTmpTable.nDBID = nMySql Or gtypSQLTmpTable.nDBID = nPostgreSQL Then
        sSqlSelect = "Select "
    End If
    '-- Get only first row
    '*mod* v2.1r7t - make sure to convert GUID Object IDs for Sql Server
    sSqlSelect = sSqlSelect & "lower(u.login) login, a.DISP_NAME Address_Name "
    sSqlFrom = "From " & gtypSession.sDBPrefixMD & "DSSCSADDRESS a " & _
                "join " & gtypSession.sDBPrefixMD & "DSSCSCONTACT c " & _
                "on a.CONTACT_ID = c.CONTACT_ID " & _
                "join " & gtypSession.sDBPrefixMD & "DSSMDUSRACCT u " & _
                "on " & gsPurifyGUIDsqlFromSQL("u.object_id") & "  = c.MSTRUSER_ID " & _
                "Where a.DELIVERY_TYPE = 1 and lower(a.Address) = '" & LCase(pvsEmailAddress) & "'"

    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
        sSqlFinal = sSqlSelect & gsSqlTmpTableCreate(pvsTargetTableName) & sSqlFrom & " Order by u.login "
    ElseIf gtypSQLTmpTable.nDBID = nOracle Then
        sSqlFinal = gsSqlTmpTableCreate(pvsTargetTableName) & sSqlSelect & sSqlFrom & " and rownum = 1 "
    ElseIf gtypSQLTmpTable.nDBID = nMySql Or gtypSQLTmpTable.nDBID = nPostgreSQL Then
        sSqlFinal = gsSqlTmpTableCreate(pvsTargetTableName) & sSqlSelect & sSqlFrom & " Order by u.login Limit 1 "
    End If
    
    gsSQLEmailAddressToSubscriberGet = sSqlFinal
End Function

Public Function gsSQLSubscriberToAddressGet(ByVal pvsTargetTableName As String, ByVal pvnDelvieryType As Integer, ByVal pvsMstrLoginCode As String, ByVal pvsAddressName As String) As String
'Return SQL to Get Mstr user physical address base on login code and address display name
'-----------------------------------------------------------------------------------------------------------
'-- Input Temp Table
'o  none
'
'-- Output Temp table
'o  none
'-----------------------------------------------------------------------------------------------------------
'Delivery Type
'1 - email
'2 - file
'4 - printer
Dim sSqlSelect As String
Dim sSqlFrom As String
Dim sSqlFinal As String
    
    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
        sSqlSelect = "Select top 1 "
    ElseIf gtypSQLTmpTable.nDBID = nOracle Or gtypSQLTmpTable.nDBID = nMySql Or gtypSQLTmpTable.nDBID = nPostgreSQL Then
        sSqlSelect = "Select "
    End If
    '-- Get only first row
    '*mod* v2.1r7t - make sure to convert GUID Object IDs for Sql Server
    sSqlSelect = sSqlSelect & "a.ADDRESS "
    sSqlFrom = "From " & gtypSession.sDBPrefixMD & "DSSCSADDRESS a " & _
                "join " & gtypSession.sDBPrefixMD & "DSSCSCONTACT c " & _
                "on a.CONTACT_ID = c.CONTACT_ID " & _
                "join " & gtypSession.sDBPrefixMD & "DSSMDUSRACCT u " & _
                "on " & gsPurifyGUIDsqlFromSQL("u.object_id") & "  = c.MSTRUSER_ID " & _
                "Where a.DELIVERY_TYPE = " & CStr(pvnDelvieryType) & " and lower(u.login) = '" & LCase(pvsMstrLoginCode) & "'"
    If pvsAddressName <> "" Then
        sSqlFrom = sSqlFrom & " and lower(a.DISP_NAME) = '" & LCase(pvsAddressName) & "'"
    Else
        '-- Get default address
        sSqlFrom = sSqlFrom & " and a.IS_DEFAULT <> 0 "
    End If
    
    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
        sSqlFinal = sSqlSelect & gsSqlTmpTableCreate(pvsTargetTableName) & sSqlFrom & " Order by a.DISP_NAME "
    ElseIf gtypSQLTmpTable.nDBID = nOracle Then
        sSqlFinal = gsSqlTmpTableCreate(pvsTargetTableName) & sSqlSelect & sSqlFrom & " and rownum = 1 "
    ElseIf gtypSQLTmpTable.nDBID = nMySql Or gtypSQLTmpTable.nDBID = nPostgreSQL Then
        sSqlFinal = gsSqlTmpTableCreate(pvsTargetTableName) & sSqlSelect & sSqlFrom & " Order by a.DISP_NAME Limit 1 "
    End If
    
    gsSQLSubscriberToAddressGet = sSqlFinal
End Function

Public Function gsSQLCompareDup(ByVal pvsTargetTableName As String, ByVal pvsSourceTableName As String) As String
'Return SQL to list of components
'-----------------------------------------------------------------------------------------------------------
'-- Input Temp Table
'o  Components Tree
'
'-- Output Temp table
'o  Dup Counts
'-----------------------------------------------------------------------------------------------------------
Dim sSqlSelect As String
Dim sSqlFrom As String
Dim sSqlFinal As String
    
    '*mod* v2.1r8f - New Function
    sSqlSelect = "With xObjParent as ( " & _
                        "Select b.object_name, a.original_id, b.project_id, b.object_type, b.subtype, b.extended_type, Count(a.object_id) TotalObjects " & _
                        "From " & pvsSourceTableName & " a " & _
                            "Join " & gtypSession.sDBPrefixMD & "dssmdobjinfo b " & _
                            "on a.original_id = b.object_id " & _
                            "and a.project_id = b.project_id " & _
                        "Where a.Original_Data <> 'Y' " & _
                        "Group by b.object_name, a.original_id, b.project_id, b.object_type, b.subtype, b.extended_type " & _
                    ") "
    sSqlSelect = sSqlSelect & ", xObjDetail as ( " & _
                    "Select x.object_name, x.original_id, x.project_id, x.object_type, x.subtype, x.extended_type, x.TotalObjects, t.object_id " & _
                    "From xObjParent x " & _
                        "Join " & pvsSourceTableName & " t " & _
                            "on x.original_id = t.original_id " & _
                            "and x.project_id = t.project_id " & _
                    "Where t.Original_Data <> 'Y' " & _
                ") " & _
                    "Select x.object_name, x.original_id, x.project_id, x.object_type, x.subtype, x.extended_type, x1.object_id, x.TotalObjects, 0 as Dup_Count "

    sSqlFrom = "From xObjParent x " & _
                        "Join xObjDetail x1 " & _
                            "on x.object_name = x1.object_name " & _
                            "and x.project_id = x1.project_id " & _
                            "and x.object_type = x1.object_type  " & _
                            "and x.subtype = x1.subtype  " & _
                            "and x.extended_type = x1.extended_type " & _
                            "and x.original_id <> x1.original_id "
    
    gsSQLCompareDup = gsSqlTmpTableCreation(pvsTargetTableName, sSqlSelect, sSqlFrom)
End Function

Public Function gsSQLCompareDupUpdate(ByVal pvsTargetTableName As String) As String
'Return SQL to count objects with same name but have different components, if 1 means same components, 0 means not same component
'-----------------------------------------------------------------------------------------------------------
'-- Input Temp Table
'o  Components Tree
'
'-- Output Temp table
'o  Dup Counts
'-----------------------------------------------------------------------------------------------------------
Dim sSqlSelect As String
Dim sSqlFrom As String
Dim sSqlFinal As String
    
    '*mod* v2.1r8f - New Function
    If gtypSQLTmpTable.nDBID = nSQLServer Or gtypSQLTmpTable.nDBID = nSybase Then
        sSqlFinal = "update x " & _
                "set x.Dup_Count = x.Dup_Count + 1 " & _
                    "from " & pvsTargetTableName & "  x " & _
                        "join " & pvsTargetTableName & "  x1 " & _
                            "on x.object_name = x1.object_name " & _
                            "and x.project_id = x1.project_id " & _
                            "and x.object_type = x1.object_type " & _
                            "and x.subtype = x1.subtype " & _
                            "and x.extended_type = x1.extended_type " & _
                            "and x.object_id = x1.object_id " & _
                            "and x.original_id <> x1.original_id "
    ElseIf gtypSQLTmpTable.nDBID = nOracle Then
        sSqlFinal = "update " & pvsTargetTableName & "  x " & _
                    "set x.Dup_Count = x.Dup_Count + 1 " & _
                    "where exists(select 1 " & _
                        "from " & pvsTargetTableName & "  x1 " & _
                            "where x.object_name = x1.object_name " & _
                            "and x.project_id = x1.project_id " & _
                            "and x.object_type = x1.object_type " & _
                            "and x.subtype = x1.subtype " & _
                            "and x.extended_type = x1.extended_type " & _
                            "and x.object_id = x1.object_id " & _
                            "and x.original_id <> x1.original_id) "
    ElseIf gtypSQLTmpTable.nDBID = nMySql Or gtypSQLTmpTable.nDBID = nPostgreSQL Then
        sSqlFinal = "update " & pvsTargetTableName & "  x " & _
                        "Inner Join " & pvsTargetTableName & "  x1 " & _
                            "on x.object_name = x1.object_name " & _
                            "and x.project_id = x1.project_id " & _
                            "and x.object_type = x1.object_type " & _
                            "and x.subtype = x1.subtype " & _
                            "and x.extended_type = x1.extended_type " & _
                            "and x.object_id = x1.object_id " & _
                            "and x.original_id <> x1.original_id " & _
                    "set x.Dup_Count = x.Dup_Count + 1 "

    End If
    
    gsSQLCompareDupUpdate = sSqlFinal
End Function


